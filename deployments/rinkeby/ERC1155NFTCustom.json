{
  "address": "0x0dc07d3a71AB74c502F6e20CDa56e23663ea2b85",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "tokensBurnable",
              "type": "bool"
            }
          ],
          "internalType": "struct Config.Deployment",
          "name": "deploymentConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "metadataUpdatable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "tokensTransferable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Config.Runtime",
          "name": "runtimeConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address[]",
              "name": "addresses",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "frozen",
              "type": "bool"
            }
          ],
          "internalType": "struct GranularRoles.RolesAddresses[]",
          "name": "rolesAddresses",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "PermanentURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PermanentURIGlobal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_CONTRACT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_TOKEN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "freezeTokenUris",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataUpdatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "mintByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        }
      ],
      "name": "mintByOwnerBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeNFTPortPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensBurnable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensTransferable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "transferByOwnerBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "metadataUpdatable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "tokensTransferable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Config.Runtime",
          "name": "newConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address[]",
              "name": "addresses",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "frozen",
              "type": "bool"
            }
          ],
          "internalType": "struct GranularRoles.RolesAddresses[]",
          "name": "rolesAddresses",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "isRevokeNFTPortPermissions",
          "type": "bool"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newUri",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isFreezeTokenUri",
          "type": "bool"
        }
      ],
      "name": "updateTokenUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf2c6f6ec50c07843ece61687a916621217b1f35f3407dd2d83a20f3a4e995aa5",
  "receipt": {
    "to": null,
    "from": "0xE7D7696C8f11278124f39fB7cDd39fD9442D5026",
    "contractAddress": "0x0dc07d3a71AB74c502F6e20CDa56e23663ea2b85",
    "transactionIndex": 21,
    "gasUsed": "3966781",
    "logsBloom": "0x
    "blockHash": "0x626ee3c5fabe23566354bfa100f64464bf1ab4b8fc4088b5b8fc2708838d1cad",
    "transactionHash": "0xf2c6f6ec50c07843ece61687a916621217b1f35f3407dd2d83a20f3a4e995aa5",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 10803619,
        "transactionHash": "0xf2c6f6ec50c07843ece61687a916621217b1f35f3407dd2d83a20f3a4e995aa5",
        "address": "0x0dc07d3a71AB74c502F6e20CDa56e23663ea2b85",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000e7d7696c8f11278124f39fb7cdd39fd9442d5026",
          "0x000000000000000000000000e7d7696c8f11278124f39fb7cdd39fd9442d5026"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x626ee3c5fabe23566354bfa100f64464bf1ab4b8fc4088b5b8fc2708838d1cad"
      }
    ],
    "blockNumber": 10803619,
    "cumulativeGasUsed": "11890389",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "name": "NFTPort",
      "symbol": "NFT",
      "owner": "0xE7D7696C8f11278124f39fB7cDd39fD9442D5026",
      "tokensBurnable": true
    },
    {
      "baseURI": "ipfs://baseURI",
      "metadataUpdatable": true,
      "tokensTransferable": true,
      "royaltiesBps": 250,
      "royaltiesAddress": "0xE7D7696C8f11278124f39fB7cDd39fD9442D5026"
    },
    []
  ],
  "numDeployments": 2,
  "solcInputHash": "ffcad1661056867c1d800da3a451c896",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"tokensBurnable\",\"type\":\"bool\"}],\"internalType\":\"struct Config.Deployment\",\"name\":\"deploymentConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tokensTransferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct Config.Runtime\",\"name\":\"runtimeConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"internalType\":\"struct GranularRoles.RolesAddresses[]\",\"name\":\"rolesAddresses\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PermanentURIGlobal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_CONTRACT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_TOKEN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezeTokenUris\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataUpdatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"mintByOwnerBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeNFTPortPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensBurnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferByOwnerBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tokensTransferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct Config.Runtime\",\"name\":\"newConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"internalType\":\"struct GranularRoles.RolesAddresses[]\",\"name\":\"rolesAddresses\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isRevokeNFTPortPermissions\",\"type\":\"bool\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newUri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isFreezeTokenUri\",\"type\":\"bool\"}],\"name\":\"updateTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC1155NftCustom.sol\":\"ERC1155NFTCustom\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x74216d303b87202736b6d571fc3e9b530aa98ff017a41516170f1c555e518669\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xefc3d1b4250b3d598cb6bf7886b4466d8025f24e94ac9047b7074dfad3edba10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ERC1155NftCustom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./lib/GranularRoles.sol\\\";\\nimport \\\"./lib/Base64.sol\\\";\\nimport \\\"./lib/Config.sol\\\";\\n\\ncontract ERC1155NFTCustom is ERC1155, GranularRoles {\\n    using Strings for uint256;\\n\\n    uint16 constant ROYALTIES_BASIS = 10000;\\n\\n    bool public metadataUpdatable;\\n    bool public tokensBurnable;\\n    bool public tokensTransferable;\\n\\n    string public name;\\n    string public symbol;\\n    string public baseURI;\\n\\n    address public royaltiesAddress;\\n    uint256 public royaltiesBasisPoints;\\n\\n    mapping (uint256 => bool) public freezeTokenUris;\\n    mapping (uint256 => uint256) public tokenSupply;\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    event PermanentURI(string _value, uint256 indexed _id); // https://docs.opensea.io/docs/metadata-standards\\n    event PermanentURIGlobal();\\n\\n    string constant DEFAULT_URI = \\\"\\\";\\n\\n    constructor(\\n        Config.Deployment memory deploymentConfig,\\n        Config.Runtime memory runtimeConfig,\\n        RolesAddresses[] memory rolesAddresses\\n    ) ERC1155(DEFAULT_URI) {\\n        royaltiesAddress = runtimeConfig.royaltiesAddress;\\n        royaltiesBasisPoints = runtimeConfig.royaltiesBps;\\n\\n        metadataUpdatable = runtimeConfig.metadataUpdatable;\\n        tokensBurnable = deploymentConfig.tokensBurnable;\\n        tokensTransferable = runtimeConfig.tokensTransferable;\\n        baseURI = runtimeConfig.baseURI;\\n\\n        name = deploymentConfig.name;\\n        symbol = deploymentConfig.symbol;\\n\\n        _initRoles(deploymentConfig.owner, rolesAddresses);\\n    }\\n\\n    function setURI(string memory _newURI) public onlyRole(UPDATE_CONTRACT_ROLE) {\\n        _setURI(_newURI);\\n    }\\n\\n    function updateTokenUri(uint256 _tokenId, string memory _newUri, bool _isFreezeTokenUri)\\n    public\\n    onlyRole(UPDATE_TOKEN_ROLE) {\\n        require(_exists(_tokenId), \\\"NFT: update URI query for nonexistent token\\\");\\n        require(metadataUpdatable, \\\"NFT: Token uris are frozen globally\\\");\\n        require(freezeTokenUris[_tokenId] != true, \\\"NFT: Token is frozen\\\");\\n        require(_isFreezeTokenUri || (bytes(_newUri).length != 0), \\\"NFT: Either _newUri or _isFreezeTokenUri=true required\\\");\\n\\n        if (bytes(_newUri).length != 0) {\\n            require(keccak256(bytes(_tokenURIs[_tokenId])) != keccak256(bytes(string(abi.encodePacked(_newUri)))), \\\"NFT: New token URI is same as updated\\\");\\n            _tokenURIs[_tokenId] = _newUri;\\n            emit URI(_newUri, _tokenId);\\n        }\\n        if (_isFreezeTokenUri) {\\n            freezeTokenUris[_tokenId] = true;\\n            emit PermanentURI(_tokenURIs[_tokenId], _tokenId);\\n        }\\n    }\\n\\n    function burn(\\n        uint256 id,\\n        uint256 value\\n    ) public onlyRole(BURN_ROLE) {\\n        require(tokensBurnable, \\\"NFT: tokens burning is disabled\\\");\\n\\n        _burn(_owner, id, value);\\n        tokenSupply[id] -= value;\\n    }\\n\\n    function burnBatch(\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public onlyRole(BURN_ROLE) {\\n        require(tokensBurnable, \\\"NFT: tokens burning is disabled\\\");\\n        _burnBatch(_owner, ids, values);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            tokenSupply[ids[i]] -= values[i];\\n        }\\n    }\\n\\n    function transferByOwner(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyRole(TRANSFER_ROLE) {\\n        require(tokensTransferable, \\\"NFT: Transfers by owner are disabled\\\");\\n        _safeTransferFrom(_owner, to, id, amount, \\\"\\\");\\n    }\\n\\n    function transferByOwnerBatch(\\n        address[] memory to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) public onlyRole(TRANSFER_ROLE) {\\n        require(tokensTransferable, \\\"NFT: Transfers by owner are disabled\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _safeTransferFrom(_owner, to[i], ids[i], amounts[i], \\\"\\\");\\n        }\\n    }\\n\\n    function update(\\n        Config.Runtime calldata newConfig,\\n        RolesAddresses[] memory rolesAddresses,\\n        bool isRevokeNFTPortPermissions\\n    ) public\\n    onlyRole(UPDATE_CONTRACT_ROLE) {\\n        // If metadata is frozen, baseURI cannot be updated\\n        require(\\n            metadataUpdatable ||\\n            (keccak256(abi.encodePacked(newConfig.baseURI)) ==\\n                keccak256(abi.encodePacked(baseURI))),\\n            \\\"Metadata is frozen\\\"\\n        );\\n\\n        baseURI = newConfig.baseURI;\\n        royaltiesAddress = newConfig.royaltiesAddress;\\n        royaltiesBasisPoints = newConfig.royaltiesBps;\\n\\n        if (!newConfig.tokensTransferable) {\\n            tokensTransferable = false;\\n        }\\n        if (!newConfig.metadataUpdatable && metadataUpdatable) {\\n            metadataUpdatable = false;\\n            emit PermanentURIGlobal();\\n        }\\n\\n        _updateRoles(rolesAddresses);\\n\\n        if (isRevokeNFTPortPermissions) {\\n            revokeNFTPortPermissions();\\n        }\\n    }\\n\\n    function totalSupply (uint256 _id) public view returns (uint256) {\\n        return tokenSupply[_id];\\n    }\\n\\n    function uri(uint256 _id) public override view returns (string memory) {\\n        if (bytes(_tokenURIs[_id]).length > 0) {\\n            if (bytes(baseURI).length > 0) {\\n                return string(abi.encodePacked(baseURI, _tokenURIs[_id]));\\n            } else {\\n                return _tokenURIs[_id];\\n            }\\n        } else {\\n            return super.uri(_id);\\n        }\\n    }\\n\\n    function mintByOwner( address account, uint256 id, uint256 amount, string memory uri)\\n    public\\n    onlyRole(MINT_ROLE) {\\n        require(!_exists(id), \\\"NFT: token already minted\\\");\\n        if (bytes(uri).length > 0) {\\n            _tokenURIs[id] = uri;\\n            emit URI(uri, id);\\n        }\\n        _mint(account, id, amount, \\\"\\\");\\n        tokenSupply[id] += amount;\\n    }\\n\\n    function mintByOwnerBatch(\\n        address[] memory to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        string[] memory uris\\n    ) public onlyRole(MINT_ROLE) {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(!_exists(ids[i]), \\\"NFT: one of tokens are already minted\\\");\\n            require(to[i] == address(to[i]), \\\"NFT: one of addresses is invalid\\\");\\n            require(amounts[i]>0, \\\"NFT: all amounts must be > 0\\\");\\n            tokenSupply[ids[i]] += amounts[i];\\n            if (bytes(uris[i]).length > 0) {\\n                _tokenURIs[ids[i]] = uris[i];\\n                emit URI(uris[i], ids[i]);\\n            }\\n            _mint(to[i], ids[i], amounts[i], \\\"\\\");\\n        }\\n    }\\n\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address, uint256) {\\n        return (royaltiesAddress, royaltiesBasisPoints * salePrice / ROYALTIES_BASIS);\\n    }\\n\\n    function contractURI() external view returns (string memory) {\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        // solium-disable-next-line quotes\\n                        '{\\\"seller_fee_basis_points\\\": ', // solhint-disable-line\\n                        royaltiesBasisPoints.toString(),\\n                        // solium-disable-next-line quotes\\n                        ', \\\"fee_recipient\\\": \\\"', // solhint-disable-line\\n                        uint256(uint160(royaltiesAddress)).toHexString(20),\\n                        // solium-disable-next-line quotes\\n                        '\\\"}' // solhint-disable-line\\n                    )\\n                )\\n            )\\n        );\\n\\n        string memory output = string(\\n            abi.encodePacked(\\\"data:application/json;base64,\\\", json)\\n        );\\n\\n        return output;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC1155, AccessControl) returns (bool)\\n    {\\n        return ERC1155.supportsInterface(interfaceId) || interfaceId == type(IERC2981).interfaceId;\\n    }\\n\\n    function _exists(uint256 _tokenId) internal view virtual returns (bool) {\\n        return tokenSupply[_tokenId] > 0;\\n    }\\n}\",\"keccak256\":\"0xfdd9b93e43488578e960a56334e5315572277077541ba9ea8b490291e9f88758\",\"license\":\"MIT\"},\"contracts/lib/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n                )\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0xb4d4825afc80f9fb88b0d7a306eacbed9d694e650a5d9947f15eb65f1d11d3ab\",\"license\":\"MIT\"},\"contracts/lib/Config.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Config {\\n    /// Fixed at deployment time\\n    struct Deployment {\\n        // Name of the NFT contract.\\n        string name;\\n        // Symbol of the NFT contract.\\n        string symbol;\\n        // The contract owner address. If you wish to own the contract, then set it as your wallet address.\\n        // This is also the wallet that can manage the contract on NFT marketplaces.\\n        address owner;\\n        // If true, tokens may be burned by owner. Cannot be changed later.\\n        bool tokensBurnable;\\n    }\\n\\n    /// Updatable by admins and owner\\n    struct Runtime {\\n        // Metadata base URI for tokens, NFTs minted in this contract will have metadata URI of `baseURI` + `tokenID`.\\n        // Set this to reveal token metadata.\\n        string baseURI;\\n        // If true, the base URI of the NFTs minted in the specified contract can be updated after minting (token URIs\\n        // are not frozen on the contract level). This is useful for revealing NFTs after the drop. If false, all the\\n        // NFTs minted in this contract are frozen by default which means token URIs are non-updatable.\\n        bool metadataUpdatable;\\n        // If true, tokens may be transferred by owner. Default is true. Can be only changed to false.\\n        bool tokensTransferable;\\n        // Secondary market royalties in basis points (100 bps = 1%)\\n        uint256 royaltiesBps;\\n        // Address for royalties\\n        address royaltiesAddress;\\n    }\\n}\",\"keccak256\":\"0xdfb7dacbdcf84a5369cdd753e049e91969acb1bd4342b12b3e09538b52e3c41f\",\"license\":\"MIT\"},\"contracts/lib/GranularRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nabstract contract GranularRoles is AccessControl {\\n    // Roles list\\n    // Admin role can have 2 addresses: \\n    // one address same as (_owner) which can be changed \\n    // one for NFTPort API access which can only be revoked\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    // Following roles can have multiple addresses, can be changed by admin or update contrac role\\n    bytes32 public constant MINT_ROLE = keccak256(\\\"MINT_ROLE\\\");\\n    bytes32 public constant UPDATE_CONTRACT_ROLE = keccak256(\\\"UPDATE_CONTRACT_ROLE\\\");\\n    bytes32 public constant UPDATE_TOKEN_ROLE = keccak256(\\\"UPDATE_TOKEN_ROLE\\\");\\n    bytes32 public constant BURN_ROLE = keccak256(\\\"BURN_ROLE\\\");\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n\\n    struct RolesAddresses {\\n        bytes32 role;\\n        address[] addresses;\\n        bool frozen;\\n    }\\n\\n    address internal _owner;\\n    address internal _nftPort;\\n\\n    mapping(bytes32 => address[]) internal _rolesAddressesIndexed; // Used to get roles enumeration\\n    mapping(bytes32 => bool) internal _rolesFrozen;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function transferOwnership(address newOwner) public {\\n        require(newOwner != _owner, \\\"Already the owner\\\");\\n        require(msg.sender == _owner, \\\"Only owner can transfer ownership\\\");\\n        _revokeRole(ADMIN_ROLE, _owner);\\n        address previousOwner = _owner;\\n        _owner = newOwner;\\n        _grantRole(ADMIN_ROLE, _owner);\\n        emit OwnershipTransferred(previousOwner, newOwner);\\n    }\\n\\n    function revokeNFTPortPermissions() public onlyRole(ADMIN_ROLE) {\\n        _revokeRole(ADMIN_ROLE, _nftPort);\\n        _nftPort = address(0);\\n    }\\n\\n    // Admin role has all access granted by default \\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return super.hasRole(ADMIN_ROLE, account) || super.hasRole(role, account);\\n    }\\n\\n    function _initRoles(address owner, RolesAddresses[] memory rolesAddresses) internal {\\n        _owner = owner;\\n        _nftPort = msg.sender;\\n        _grantRole(ADMIN_ROLE, _owner);\\n        _grantRole(ADMIN_ROLE, _nftPort);\\n\\n        for (uint256 roleIndex = 0; roleIndex < rolesAddresses.length; roleIndex++) {\\n            bytes32 role = rolesAddresses[roleIndex].role;\\n            require(_regularRoleValid(role), \\\"GranularRoles: Invalid rolesAddresses\\\");\\n            for(uint256 addressIndex = 0; addressIndex < rolesAddresses[roleIndex].addresses.length; addressIndex++) {\\n                _grantRole(role, rolesAddresses[roleIndex].addresses[addressIndex]);\\n                _rolesAddressesIndexed[role].push(rolesAddresses[roleIndex].addresses[addressIndex]);\\n            }\\n            if (rolesAddresses[roleIndex].frozen) {\\n                _rolesFrozen[role] = true;\\n            }\\n        }\\n    }\\n\\n    function _updateRoles(RolesAddresses[] memory rolesAddresses) internal {\\n        if (rolesAddresses.length > 0) {\\n            require(hasRole(ADMIN_ROLE, msg.sender), \\\"Granular roles: only ADMIN_ROLE can change permissions\\\");\\n            for (uint256 roleIndex = 0; roleIndex < rolesAddresses.length; roleIndex++) {\\n                bytes32 role = rolesAddresses[roleIndex].role;\\n                require(_regularRoleValid(role), \\\"GranularRoles: Invalid rolesAddresses\\\");\\n                require(!_rolesFrozen[role], \\\"GranularRoles: One of roles is frozen\\\");\\n                for(uint256 addressIndex = 0; addressIndex < _rolesAddressesIndexed[role].length; addressIndex++) {\\n                    _revokeRole(role, _rolesAddressesIndexed[role][addressIndex]);\\n                }\\n                delete _rolesAddressesIndexed[role];\\n                for(uint256 addressIndex = 0; addressIndex < rolesAddresses[roleIndex].addresses.length; addressIndex++) {\\n                    _grantRole(role, rolesAddresses[roleIndex].addresses[addressIndex]);\\n                    _rolesAddressesIndexed[role].push(rolesAddresses[roleIndex].addresses[addressIndex]);\\n                }\\n                if (rolesAddresses[roleIndex].frozen) {\\n                    _rolesFrozen[role] = true;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _regularRoleValid(bytes32 role) internal returns (bool) {\\n        return \\n            role == MINT_ROLE || \\n            role == UPDATE_CONTRACT_ROLE ||\\n            role == UPDATE_TOKEN_ROLE ||\\n            role == BURN_ROLE ||\\n            role == TRANSFER_ROLE;\\n    }\\n}\",\"keccak256\":\"0x1265358bbae5af64b1cc1faeacce606efdaad32e91ffadc5030739f43a78d764\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004da538038062004da58339810160408190526200003491620009c5565b6040805160208101909152600081526200004e8162000129565b506080820151600c80546001600160a01b0319166001600160a01b03909216919091179055606080830151600d556020808401516008805493870151604087015161ffff1990951692151561ff00191692909217610100921515929092029190911762ff0000191662010000931515939093029290921790915582518051620000dc92600b92019062000598565b5082518051620000f59160099160209091019062000598565b5060208084015180516200010e92600a92019062000598565b50604083015162000120908262000142565b50505062000b53565b80516200013e90600290602084019062000598565b5050565b600480546001600160a01b0384166001600160a01b031991821681179092556005805490911633179055620001889060008051602062004d8583398151915290620003bf565b600554620001b09060008051602062004d85833981519152906001600160a01b0316620003bf565b60005b8151811015620003ba576000828281518110620001d457620001d462000ad6565b6020026020010151600001519050620001f3816200044960201b60201c565b620002525760405162461bcd60e51b815260206004820152602560248201527f4772616e756c6172526f6c65733a20496e76616c696420726f6c657341646472604482015264657373657360d81b606482015260840160405180910390fd5b60005b8383815181106200026a576200026a62000ad6565b602002602001015160200151518110156200036257620002cd8285858151811062000299576200029962000ad6565b6020026020010151602001518381518110620002b957620002b962000ad6565b6020026020010151620003bf60201b60201c565b60008281526006602052604090208451859085908110620002f257620002f262000ad6565b602002602001015160200151828151811062000312576200031262000ad6565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580620003598162000aec565b91505062000255565b5082828151811062000378576200037862000ad6565b60200260200101516040015115620003a4576000818152600760205260409020805460ff191660011790555b5080620003b18162000aec565b915050620001b3565b505050565b620003cb828262000520565b6200013e5760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620004053390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c36868214806200049957507f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f582145b80620004c457507f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e682145b80620004ef57507fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2282145b806200051a57507f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c82145b92915050565b60006200054860008051602062004d85833981519152836200056d60201b62001b2e1760201c565b806200056657506200056683836200056d60201b62001b2e1760201c565b9392505050565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b828054620005a69062000b16565b90600052602060002090601f016020900481019282620005ca576000855562000615565b82601f10620005e557805160ff191683800117855562000615565b8280016001018555821562000615579182015b8281111562000615578251825591602001919060010190620005f8565b506200062392915062000627565b5090565b5b8082111562000623576000815560010162000628565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156200067957620006796200063e565b60405290565b604051608081016001600160401b03811182821017156200067957620006796200063e565b604051601f8201601f191681016001600160401b0381118282101715620006cf57620006cf6200063e565b604052919050565b600082601f830112620006e957600080fd5b81516001600160401b038111156200070557620007056200063e565b60206200071b601f8301601f19168201620006a4565b82815285828487010111156200073057600080fd5b60005b838110156200075057858101830151828201840152820162000733565b83811115620007625760008385840101525b5095945050505050565b80516001600160a01b03811681146200078457600080fd5b919050565b805180151581146200078457600080fd5b600060a08284031215620007ad57600080fd5b60405160a081016001600160401b038082118383101715620007d357620007d36200063e565b816040528293508451915080821115620007ec57600080fd5b50620007fb85828601620006d7565b8252506200080c6020840162000789565b60208201526200081f6040840162000789565b6040820152606083015160608201526200083c608084016200076c565b60808201525092915050565b60006001600160401b038211156200086457620008646200063e565b5060051b60200190565b600082601f8301126200088057600080fd5b8151602062000899620008938362000848565b620006a4565b82815260059290921b84018101918181019086841115620008b957600080fd5b8286015b84811015620009ba5780516001600160401b0380821115620008df5760008081fd5b908801906060828b03601f1901811315620008fa5760008081fd5b6200090462000654565b878401518152604080850151848111156200091f5760008081fd5b85019350603f84018d13620009345760008081fd5b8884015162000947620008938262000848565b81815260059190911b85018201908a8101908f831115620009685760008081fd5b958301955b82871015620009915762000981876200076c565b8252958b0195908b01906200096d565b848c015250620009a5905085840162000789565b908201528652505050918301918301620008bd565b509695505050505050565b600080600060608486031215620009db57600080fd5b83516001600160401b0380821115620009f357600080fd5b908501906080828803121562000a0857600080fd5b62000a126200067f565b82518281111562000a2257600080fd5b62000a3089828601620006d7565b82525060208301518281111562000a4657600080fd5b62000a5489828601620006d7565b60208301525062000a68604084016200076c565b604082015262000a7b6060840162000789565b6060820152602087015190955091508082111562000a9857600080fd5b62000aa6878388016200079a565b9350604086015191508082111562000abd57600080fd5b5062000acc868287016200086e565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b600060001982141562000b0f57634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168062000b2b57607f821691505b6020821081141562000b4d57634e487b7160e01b600052602260045260246000fd5b50919050565b6142228062000b636000396000f3fe608060405234801561001057600080fd5b506004361061027e5760003560e01c806383ca4b6f1161015c578063b930908f116100ce578063e985e9c511610087578063e985e9c5146105ea578063e9a9c85014610626578063f153c2e51461063b578063f242432a14610643578063f2fde38b14610656578063ff0a9f511461066957600080fd5b8063b930908f14610575578063bd85b0391461058a578063d547741f146105aa578063de374d9d146105bd578063e3d52072146105d0578063e8a3d485146105e257600080fd5b8063a217fddf11610120578063a217fddf14610504578063a22cb4651461050c578063a2f551ec1461051f578063a53a84b614610532578063b29c097a1461053b578063b390c0ab1461056257600080fd5b806383ca4b6f146104a25780638d010db3146104b55780638da5cb5b146104d857806391d14854146104e957806395d89b41146104fc57600080fd5b80632c23b965116101f557806336568abe116101b957806336568abe146104325780634e1273f4146104455780634e6f9dd6146104655780636c0360eb1461047257806375b238fc1461047a5780637e712f381461048f57600080fd5b80632c23b965146103b95780632e628b61146103ce5780632eb2c2d6146103e15780632f2ff15d146103f4578063328825351461040757600080fd5b806320333b131161024757806320333b1314610309578063206b60f91461031c578063224a177514610331578063248a9ca3146103445780632693ebf2146103675780632a55205a1461038757600080fd5b8062fdd58e1461028357806301ffc9a7146102a957806302fe5305146102cc57806306fdde03146102e15780630e89341c146102f6575b600080fd5b610296610291366004613005565b61067c565b6040519081526020015b60405180910390f35b6102bc6102b7366004613045565b610713565b60405190151581526020016102a0565b6102df6102da36600461313c565b61073f565b005b6102e9610764565b6040516102a091906131c8565b6102e96103043660046131db565b6107f2565b6102df6103173660046131f4565b610917565b61029660008051602061410d83398151915281565b6102df61033f366004613254565b610a30565b6102966103523660046131db565b60009081526003602052604090206001015490565b6102966103753660046131db565b600f6020526000908152604090205481565b61039a610395366004613287565b610aa1565b604080516001600160a01b0390931683526020830191909152016102a0565b61029660008051602061412d83398151915281565b6102df6103dc366004613354565b610add565b6102df6103ef366004613500565b610c7c565b6102df6104023660046135a9565b610d13565b600c5461041a906001600160a01b031681565b6040516001600160a01b0390911681526020016102a0565b6102df6104403660046135a9565b610d3d565b6104586104533660046135d5565b610db7565b6040516102a09190613673565b6008546102bc9060ff1681565b6102e9610ee0565b6102966000805160206141ad83398151915281565b6102df61049d366004613686565b610eed565b6102df6104b036600461370d565b610fc1565b6102bc6104c33660046131db565b600e6020526000908152604090205460ff1681565b6004546001600160a01b031661041a565b6102bc6104f73660046135a9565b6110c0565b6102e96110f1565b610296600081565b6102df61051a366004613743565b6110fe565b6102df61052d36600461376d565b611109565b610296600d5481565b6102967f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e681565b6102df610570366004613287565b611441565b6102966000805160206141cd83398151915281565b6102966105983660046131db565b6000908152600f602052604090205490565b6102df6105b83660046135a9565b6114ef565b6008546102bc9062010000900460ff1681565b6008546102bc90610100900460ff1681565b6102e9611514565b6102bc6105f83660046137ba565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61029660008051602061418d83398151915281565b6102df61158e565b6102df6106513660046137e4565b6115de565b6102df610664366004613848565b611665565b6102df610677366004613863565b6117be565b60006001600160a01b0383166106ed5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b600061071e82611b59565b8061073957506001600160e01b0319821663152a902d60e11b145b92915050565b60008051602061412d83398151915261075781611ba9565b61076082611bb6565b5050565b6009805461077190613987565b80601f016020809104026020016040519081016040528092919081815260200182805461079d90613987565b80156107ea5780601f106107bf576101008083540402835291602001916107ea565b820191906000526020600020905b8154815290600101906020018083116107cd57829003601f168201915b505050505081565b60008181526010602052604081208054606092919061081090613987565b90501115610909576000600b805461082790613987565b9050111561086b57600b60106000848152602001908152602001600020604051602001610855929190613a31565b6040516020818303038152906040529050919050565b6000828152601060205260409020805461088490613987565b80601f01602080910402602001604051908101604052809291908181526020018280546108b090613987565b80156108fd5780601f106108d2576101008083540402835291602001916108fd565b820191906000526020600020905b8154815290600101906020018083116108e057829003601f168201915b50505050509050919050565b61073982611bc9565b919050565b60008051602061418d83398151915261092f81611ba9565b6000848152600f60205260409020541561098b5760405162461bcd60e51b815260206004820152601960248201527f4e46543a20746f6b656e20616c7265616479206d696e7465640000000000000060448201526064016106e4565b8151156109eb57600084815260106020908152604090912083516109b192850190612ec7565b50837f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b836040516109e291906131c8565b60405180910390a25b610a0685858560405180602001604052806000815250611bd8565b6000848152600f602052604081208054859290610a24908490613a5c565b90915550505050505050565b60008051602061410d833981519152610a4881611ba9565b60085462010000900460ff16610a705760405162461bcd60e51b81526004016106e490613a74565b600454604080516020810190915260008152610a9b916001600160a01b031690869086908690611cec565b50505050565b600c54600d5460009182916001600160a01b039091169061271090610ac7908690613ab8565b610ad19190613aed565b915091505b9250929050565b60008051602061412d833981519152610af581611ba9565b60085460ff1680610b5e5750600b604051602001610b139190613b01565b60408051601f198184030181529190528051602090910120610b358580613b0d565b604051602001610b46929190613b53565b60405160208183030381529060405280519060200120145b610b9f5760405162461bcd60e51b815260206004820152601260248201527126b2ba30b230ba309034b990333937bd32b760711b60448201526064016106e4565b610ba98480613b0d565b610bb591600b91612f4b565b50610bc660a0850160808601613848565b600c80546001600160a01b0319166001600160a01b0392909216919091179055606084018035600d55610bfc9060408601613b63565b610c0d576008805462ff0000191690555b610c1d6040850160208601613b63565b158015610c2c575060085460ff165b15610c65576008805460ff191690556040517fb59f45df38ec0d34114b1248c38a29cdbccbf3e745ae3ef310ac66199a4ceccf90600090a15b610c6e83611e16565b8115610a9b57610a9b61158e565b6001600160a01b038516331480610c985750610c9885336105f8565b610cff5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016106e4565b610d0c8585858585612167565b5050505050565b600082815260036020526040902060010154610d2e81611ba9565b610d3883836122fb565b505050565b6001600160a01b0381163314610dad5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106e4565b6107608282612381565b60608151835114610e1c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016106e4565b600083516001600160401b03811115610e3757610e37613062565b604051908082528060200260200182016040528015610e60578160200160208202803683370190505b50905060005b8451811015610ed857610eab858281518110610e8457610e84613b7e565b6020026020010151858381518110610e9e57610e9e613b7e565b602002602001015161067c565b828281518110610ebd57610ebd613b7e565b6020908102919091010152610ed181613b94565b9050610e66565b509392505050565b600b805461077190613987565b60008051602061410d833981519152610f0581611ba9565b60085462010000900460ff16610f2d5760405162461bcd60e51b81526004016106e490613a74565b60005b8351811015610d0c576004548551610faf916001600160a01b031690879084908110610f5e57610f5e613b7e565b6020026020010151868481518110610f7857610f78613b7e565b6020026020010151868581518110610f9257610f92613b7e565b602002602001015160405180602001604052806000815250611cec565b80610fb981613b94565b915050610f30565b6000805160206141cd833981519152610fd981611ba9565b600854610100900460ff166110305760405162461bcd60e51b815260206004820152601f60248201527f4e46543a20746f6b656e73206275726e696e672069732064697361626c65640060448201526064016106e4565b600454611047906001600160a01b031684846123e8565b60005b8351811015610a9b5782818151811061106557611065613b7e565b6020026020010151600f600086848151811061108357611083613b7e565b6020026020010151815260200190815260200160002060008282546110a89190613baf565b909155508190506110b881613b94565b91505061104a565b60006110da6000805160206141ad83398151915283611b2e565b806110ea57506110ea8383611b2e565b9392505050565b600a805461077190613987565b610760338383612572565b7f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e661113381611ba9565b6000848152600f60205260409020546111a25760405162461bcd60e51b815260206004820152602b60248201527f4e46543a207570646174652055524920717565727920666f72206e6f6e65786960448201526a39ba32b73a103a37b5b2b760a91b60648201526084016106e4565b60085460ff166112005760405162461bcd60e51b815260206004820152602360248201527f4e46543a20546f6b656e2075726973206172652066726f7a656e20676c6f62616044820152626c6c7960e81b60648201526084016106e4565b6000848152600e602052604090205460ff1615156001141561125b5760405162461bcd60e51b815260206004820152601460248201527327232a1d102a37b5b2b71034b990333937bd32b760611b60448201526064016106e4565b81806112675750825115155b6112d25760405162461bcd60e51b815260206004820152603660248201527f4e46543a20456974686572205f6e6577557269206f72205f6973467265657a65604482015275151bdad95b955c9a4f5d1c9d59481c995c5d5a5c995960521b60648201526084016106e4565b8251156113d857826040516020016112ea9190613bc6565b60408051601f19818403018152828252805160209182012060008881526010909252919020909161131b9190613b01565b6040518091039020141561137f5760405162461bcd60e51b815260206004820152602560248201527f4e46543a204e657720746f6b656e205552492069732073616d6520617320757060448201526419185d195960da1b60648201526084016106e4565b6000848152601060209081526040909120845161139e92860190612ec7565b50837f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b846040516113cf91906131c8565b60405180910390a25b8115610a9b576000848152600e60209081526040808320805460ff19166001179055601090915290819020905185917fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b55657207916114339190613be2565b60405180910390a250505050565b6000805160206141cd83398151915261145981611ba9565b600854610100900460ff166114b05760405162461bcd60e51b815260206004820152601f60248201527f4e46543a20746f6b656e73206275726e696e672069732064697361626c65640060448201526064016106e4565b6004546114c7906001600160a01b03168484612653565b6000838152600f6020526040812080548492906114e5908490613baf565b9091555050505050565b60008281526003602052604090206001015461150a81611ba9565b610d388383612381565b60606000611562611526600d54612757565b600c5461153d906001600160a01b0316601461285c565b60405160200161154e929190613c67565b6040516020818303038152906040526129f7565b90506000816040516020016115779190613cee565b60408051601f198184030181529190529392505050565b6000805160206141ad8339815191526115a681611ba9565b6005546115cb906000805160206141ad833981519152906001600160a01b0316612381565b50600580546001600160a01b0319169055565b6001600160a01b0385163314806115fa57506115fa85336105f8565b6116585760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016106e4565b610d0c8585858585611cec565b6004546001600160a01b03828116911614156116b75760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c903a34329037bbb732b960791b60448201526064016106e4565b6004546001600160a01b0316331461171b5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e207472616e73666572206f776e65727368696044820152600760fc1b60648201526084016106e4565b600454611740906000805160206141ad833981519152906001600160a01b0316612381565b600480546001600160a01b038381166001600160a01b031983168117909355169061177a906000805160206141ad833981519152906122fb565b816001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008051602061418d8339815191526117d681611ba9565b60005b8451811015611b26576118138582815181106117f7576117f7613b7e565b60200260200101516000908152600f6020526040902054151590565b1561186e5760405162461bcd60e51b815260206004820152602560248201527f4e46543a206f6e65206f6620746f6b656e732061726520616c7265616479206d6044820152641a5b9d195960da1b60648201526084016106e4565b85818151811061188057611880613b7e565b60200260200101516001600160a01b03168682815181106118a3576118a3613b7e565b60200260200101516001600160a01b0316146119015760405162461bcd60e51b815260206004820181905260248201527f4e46543a206f6e65206f662061646472657373657320697320696e76616c696460448201526064016106e4565b600084828151811061191557611915613b7e565b60200260200101511161196a5760405162461bcd60e51b815260206004820152601c60248201527f4e46543a20616c6c20616d6f756e7473206d757374206265203e20300000000060448201526064016106e4565b83818151811061197c5761197c613b7e565b6020026020010151600f600087848151811061199a5761199a613b7e565b6020026020010151815260200190815260200160002060008282546119bf9190613a5c565b9250508190555060008382815181106119da576119da613b7e565b6020026020010151511115611aae578281815181106119fb576119fb613b7e565b602002602001015160106000878481518110611a1957611a19613b7e565b602002602001015181526020019081526020016000209080519060200190611a42929190612ec7565b50848181518110611a5557611a55613b7e565b60200260200101517f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b848381518110611a9057611a90613b7e565b6020026020010151604051611aa591906131c8565b60405180910390a25b611b14868281518110611ac357611ac3613b7e565b6020026020010151868381518110611add57611add613b7e565b6020026020010151868481518110611af757611af7613b7e565b602002602001015160405180602001604052806000815250611bd8565b80611b1e81613b94565b9150506117d9565b505050505050565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006001600160e01b03198216636cdb3d1360e11b1480611b8a57506001600160e01b031982166303a24d0760e21b145b8061073957506301ffc9a760e01b6001600160e01b0319831614610739565b611bb38133612b5c565b50565b8051610760906002906020840190612ec7565b60606002805461088490613987565b6001600160a01b038416611c385760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016106e4565b336000611c4485612bc0565b90506000611c5185612bc0565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290611c83908490613a5c565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611ce383600089898989612c0b565b50505050505050565b6001600160a01b038416611d125760405162461bcd60e51b81526004016106e490613d33565b336000611d1e85612bc0565b90506000611d2b85612bc0565b90506000868152602081815260408083206001600160a01b038c16845290915290205485811015611d6e5760405162461bcd60e51b81526004016106e490613d78565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611dab908490613a5c565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611e0b848a8a8a8a8a612c0b565b505050505050505050565b805115611bb357611e356000805160206141ad833981519152336110c0565b611ea05760405162461bcd60e51b815260206004820152603660248201527f4772616e756c617220726f6c65733a206f6e6c792041444d494e5f524f4c452060448201527563616e206368616e6765207065726d697373696f6e7360501b60648201526084016106e4565b60005b8151811015610760576000828281518110611ec057611ec0613b7e565b6020026020010151600001519050611ed781612d76565b611f315760405162461bcd60e51b815260206004820152602560248201527f4772616e756c6172526f6c65733a20496e76616c696420726f6c657341646472604482015264657373657360d81b60648201526084016106e4565b60008181526007602052604090205460ff1615611f9e5760405162461bcd60e51b815260206004820152602560248201527f4772616e756c6172526f6c65733a204f6e65206f6620726f6c657320697320666044820152643937bd32b760d91b60648201526084016106e4565b60005b6000828152600660205260409020548110156120095760008281526006602052604090208054611ff791849184908110611fdd57611fdd613b7e565b6000918252602090912001546001600160a01b0316612381565b8061200181613b94565b915050611fa1565b50600081815260066020526040812061202191612fbf565b60005b83838151811061203657612036613b7e565b602002602001015160200151518110156121165761208a8285858151811061206057612060613b7e565b602002602001015160200151838151811061207d5761207d613b7e565b60200260200101516122fb565b600082815260066020526040902084518590859081106120ac576120ac613b7e565b60200260200101516020015182815181106120c9576120c9613b7e565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558061210e81613b94565b915050612024565b5082828151811061212957612129613b7e565b60200260200101516040015115612154576000818152600760205260409020805460ff191660011790555b508061215f81613b94565b915050611ea3565b81518351146121885760405162461bcd60e51b81526004016106e490613dc2565b6001600160a01b0384166121ae5760405162461bcd60e51b81526004016106e490613d33565b3360005b84518110156122955760008582815181106121cf576121cf613b7e565b6020026020010151905060008583815181106121ed576121ed613b7e565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561223d5760405162461bcd60e51b81526004016106e490613d78565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061227a908490613a5c565b925050819055505050508061228e90613b94565b90506121b2565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122e5929190613e0a565b60405180910390a4611b26818787878787612dfd565b61230582826110c0565b6107605760008281526003602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561233d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61238b82826110c0565b156107605760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b03831661240e5760405162461bcd60e51b81526004016106e490613e38565b805182511461242f5760405162461bcd60e51b81526004016106e490613dc2565b604080516020810190915260009081905233905b835181101561250557600084828151811061246057612460613b7e565b60200260200101519050600084838151811061247e5761247e613b7e565b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156124ce5760405162461bcd60e51b81526004016106e490613e7b565b6000928352602083815260408085206001600160a01b038b16865290915290922091039055806124fd81613b94565b915050612443565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612556929190613e0a565b60405180910390a4604080516020810190915260009052610a9b565b816001600160a01b0316836001600160a01b031614156125e65760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016106e4565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166126795760405162461bcd60e51b81526004016106e490613e38565b33600061268584612bc0565b9050600061269284612bc0565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156126df5760405162461bcd60e51b81526004016106e490613e7b565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611ce3565b60608161277b5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156127a5578061278f81613b94565b915061279e9050600a83613aed565b915061277f565b6000816001600160401b038111156127bf576127bf613062565b6040519080825280601f01601f1916602001820160405280156127e9576020820181803683370190505b5090505b8415612854576127fe600183613baf565b915061280b600a86613ebf565b612816906030613a5c565b60f81b81838151811061282b5761282b613b7e565b60200101906001600160f81b031916908160001a90535061284d600a86613aed565b94506127ed565b949350505050565b6060600061286b836002613ab8565b612876906002613a5c565b6001600160401b0381111561288d5761288d613062565b6040519080825280601f01601f1916602001820160405280156128b7576020820181803683370190505b509050600360fc1b816000815181106128d2576128d2613b7e565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061290157612901613b7e565b60200101906001600160f81b031916908160001a9053506000612925846002613ab8565b612930906001613a5c565b90505b60018111156129a8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061296457612964613b7e565b1a60f81b82828151811061297a5761297a613b7e565b60200101906001600160f81b031916908160001a90535060049490941c936129a181613ed3565b9050612933565b5083156110ea5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e4565b805160609080612a17575050604080516020810190915260008152919050565b60006003612a26836002613a5c565b612a309190613aed565b612a3b906004613ab8565b90506000612a4a826020613a5c565b6001600160401b03811115612a6157612a61613062565b6040519080825280601f01601f191660200182016040528015612a8b576020820181803683370190505b509050600060405180606001604052806040815260200161414d604091399050600181016020830160005b86811015612b17576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101612ab6565b506003860660018114612b315760028114612b4257612b4e565b613d3d60f01b600119830152612b4e565b603d60f81b6000198301525b505050918152949350505050565b612b6682826110c0565b61076057612b7e816001600160a01b0316601461285c565b612b8983602061285c565b604051602001612b9a929190613eea565b60408051601f198184030181529082905262461bcd60e51b82526106e4916004016131c8565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612bfa57612bfa613b7e565b602090810291909101015292915050565b6001600160a01b0384163b15611b265760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612c4f9089908990889088908890600401613f5f565b602060405180830381600087803b158015612c6957600080fd5b505af1925050508015612c99575060408051601f3d908101601f19168201909252612c9691810190613fa4565b60015b612d4657612ca5613fc1565b806308c379a01415612cdf5750612cba613fdd565b80612cc55750612ce1565b8060405162461bcd60e51b81526004016106e491906131c8565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016106e4565b6001600160e01b0319811663f23a6e6160e01b14611ce35760405162461bcd60e51b81526004016106e490614066565b600060008051602061418d833981519152821480612da1575060008051602061412d83398151915282145b80612dcb57507f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e682145b80612de357506000805160206141cd83398151915282145b8061073957505060008051602061410d8339815191521490565b6001600160a01b0384163b15611b265760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612e4190899089908890889088906004016140ae565b602060405180830381600087803b158015612e5b57600080fd5b505af1925050508015612e8b575060408051601f3d908101601f19168201909252612e8891810190613fa4565b60015b612e9757612ca5613fc1565b6001600160e01b0319811663bc197c8160e01b14611ce35760405162461bcd60e51b81526004016106e490614066565b828054612ed390613987565b90600052602060002090601f016020900481019282612ef55760008555612f3b565b82601f10612f0e57805160ff1916838001178555612f3b565b82800160010185558215612f3b579182015b82811115612f3b578251825591602001919060010190612f20565b50612f47929150612fd9565b5090565b828054612f5790613987565b90600052602060002090601f016020900481019282612f795760008555612f3b565b82601f10612f925782800160ff19823516178555612f3b565b82800160010185558215612f3b579182015b82811115612f3b578235825591602001919060010190612fa4565b5080546000825590600052602060002090810190611bb391905b5b80821115612f475760008155600101612fda565b80356001600160a01b038116811461091257600080fd5b6000806040838503121561301857600080fd5b61302183612fee565b946020939093013593505050565b6001600160e01b031981168114611bb357600080fd5b60006020828403121561305757600080fd5b81356110ea8161302f565b634e487b7160e01b600052604160045260246000fd5b606081018181106001600160401b038211171561309757613097613062565b60405250565b601f8201601f191681016001600160401b03811182821017156130c2576130c2613062565b6040525050565b600082601f8301126130da57600080fd5b81356001600160401b038111156130f3576130f3613062565b60405161310a601f8301601f19166020018261309d565b81815284602083860101111561311f57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561314e57600080fd5b81356001600160401b0381111561316457600080fd5b612854848285016130c9565b60005b8381101561318b578181015183820152602001613173565b83811115610a9b5750506000910152565b600081518084526131b4816020860160208601613170565b601f01601f19169290920160200192915050565b6020815260006110ea602083018461319c565b6000602082840312156131ed57600080fd5b5035919050565b6000806000806080858703121561320a57600080fd5b61321385612fee565b9350602085013592506040850135915060608501356001600160401b0381111561323c57600080fd5b613248878288016130c9565b91505092959194509250565b60008060006060848603121561326957600080fd5b61327284612fee565b95602085013595506040909401359392505050565b6000806040838503121561329a57600080fd5b50508035926020909101359150565b60006001600160401b038211156132c2576132c2613062565b5060051b60200190565b600082601f8301126132dd57600080fd5b813560206132ea826132a9565b6040516132f7828261309d565b83815260059390931b850182019282810191508684111561331757600080fd5b8286015b848110156133395761332c81612fee565b835291830191830161331b565b509695505050505050565b8035801515811461091257600080fd5b60008060006060848603121561336957600080fd5b83356001600160401b038082111561338057600080fd5b9085019060a0828803121561339457600080fd5b90935060209085820135818111156133ab57600080fd5b8601601f810188136133bc57600080fd5b80356133c7816132a9565b6040516133d4828261309d565b82815260059290921b830185019185810191508a8311156133f457600080fd5b8584015b8381101561347b5780358681111561340f57600080fd5b85016060818e03601f1901121561342557600080fd5b60405161343181613078565b88820135815260408201358881111561344957600080fd5b6134578f8b838601016132cc565b8a8301525061346860608301613344565b60408201528452509186019186016133f8565b5080975050505050505061349160408501613344565b90509250925092565b600082601f8301126134ab57600080fd5b813560206134b8826132a9565b6040516134c5828261309d565b83815260059390931b85018201928281019150868411156134e557600080fd5b8286015b8481101561333957803583529183019183016134e9565b600080600080600060a0868803121561351857600080fd5b61352186612fee565b945061352f60208701612fee565b935060408601356001600160401b038082111561354b57600080fd5b61355789838a0161349a565b9450606088013591508082111561356d57600080fd5b61357989838a0161349a565b9350608088013591508082111561358f57600080fd5b5061359c888289016130c9565b9150509295509295909350565b600080604083850312156135bc57600080fd5b823591506135cc60208401612fee565b90509250929050565b600080604083850312156135e857600080fd5b82356001600160401b03808211156135ff57600080fd5b61360b868387016132cc565b9350602085013591508082111561362157600080fd5b5061362e8582860161349a565b9150509250929050565b600081518084526020808501945080840160005b838110156136685781518752958201959082019060010161364c565b509495945050505050565b6020815260006110ea6020830184613638565b60008060006060848603121561369b57600080fd5b83356001600160401b03808211156136b257600080fd5b6136be878388016132cc565b945060208601359150808211156136d457600080fd5b6136e08783880161349a565b935060408601359150808211156136f657600080fd5b506137038682870161349a565b9150509250925092565b6000806040838503121561372057600080fd5b82356001600160401b038082111561373757600080fd5b61360b8683870161349a565b6000806040838503121561375657600080fd5b61375f83612fee565b91506135cc60208401613344565b60008060006060848603121561378257600080fd5b8335925060208401356001600160401b0381111561379f57600080fd5b6137ab868287016130c9565b92505061349160408501613344565b600080604083850312156137cd57600080fd5b6137d683612fee565b91506135cc60208401612fee565b600080600080600060a086880312156137fc57600080fd5b61380586612fee565b945061381360208701612fee565b9350604086013592506060860135915060808601356001600160401b0381111561383c57600080fd5b61359c888289016130c9565b60006020828403121561385a57600080fd5b6110ea82612fee565b6000806000806080858703121561387957600080fd5b84356001600160401b038082111561389057600080fd5b61389c888389016132cc565b95506020915081870135818111156138b357600080fd5b6138bf89828a0161349a565b9550506040870135818111156138d457600080fd5b6138e089828a0161349a565b9450506060870135818111156138f557600080fd5b8701601f8101891361390657600080fd5b8035613911816132a9565b60405161391e828261309d565b82815260059290921b830185019185810191508b83111561393e57600080fd5b8584015b838110156139765780358681111561395a5760008081fd5b6139688e89838901016130c9565b845250918601918601613942565b50989b979a50959850505050505050565b600181811c9082168061399b57607f821691505b602082108114156139bc57634e487b7160e01b600052602260045260246000fd5b50919050565b600081546139cf81613987565b600182811680156139e757600181146139f857613a27565b60ff19841687528287019450613a27565b8560005260208060002060005b85811015613a1e5781548a820152908401908201613a05565b50505082870194505b5050505092915050565b6000612854613a4083866139c2565b846139c2565b634e487b7160e01b600052601160045260246000fd5b60008219821115613a6f57613a6f613a46565b500190565b60208082526024908201527f4e46543a205472616e7366657273206279206f776e6572206172652064697361604082015263189b195960e21b606082015260800190565b6000816000190483118215151615613ad257613ad2613a46565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613afc57613afc613ad7565b500490565b60006110ea82846139c2565b6000808335601e19843603018112613b2457600080fd5b8301803591506001600160401b03821115613b3e57600080fd5b602001915036819003821315610ad657600080fd5b8183823760009101908152919050565b600060208284031215613b7557600080fd5b6110ea82613344565b634e487b7160e01b600052603260045260246000fd5b6000600019821415613ba857613ba8613a46565b5060010190565b600082821015613bc157613bc1613a46565b500390565b60008251613bd8818460208701613170565b9190910192915050565b6000602080835260008454613bf681613987565b80848701526040600180841660008114613c175760018114613c2b57613c59565b60ff19851689840152606089019550613c59565b896000528660002060005b85811015613c515781548b8201860152908301908801613c36565b8a0184019650505b509398975050505050505050565b7f7b2273656c6c65725f6665655f62617369735f706f696e7473223a2000000000815260008351613c9f81601c850160208801613170565b731610113332b2afb932b1b4b834b2b73a111d101160611b601c918401918201528351613cd3816030840160208801613170565b61227d60f01b60309290910191820152603201949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251613d2681601d850160208701613170565b91909101601d0192915050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b604081526000613e1d6040830185613638565b8281036020840152613e2f8185613638565b95945050505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b600082613ece57613ece613ad7565b500690565b600081613ee257613ee2613a46565b506000190190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613f22816017850160208801613170565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613f53816028840160208801613170565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613f999083018461319c565b979650505050505050565b600060208284031215613fb657600080fd5b81516110ea8161302f565b600060033d1115613fda5760046000803e5060005160e01c5b90565b600060443d1015613feb5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561401a57505050505090565b82850191508151818111156140325750505050505090565b843d870101602082850101111561404c5750505050505090565b61405b6020828601018761309d565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906140da90830186613638565b82810360608401526140ec8186613638565b90508281036080840152614100818561319c565b9897505050505050505056fe8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f54142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c3686a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775e97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa22a2646970667358221220e8c6dd770472f80e864635305d0ddd54d9efdacdf7aac9295dbf896833e9091464736f6c63430008090033a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027e5760003560e01c806383ca4b6f1161015c578063b930908f116100ce578063e985e9c511610087578063e985e9c5146105ea578063e9a9c85014610626578063f153c2e51461063b578063f242432a14610643578063f2fde38b14610656578063ff0a9f511461066957600080fd5b8063b930908f14610575578063bd85b0391461058a578063d547741f146105aa578063de374d9d146105bd578063e3d52072146105d0578063e8a3d485146105e257600080fd5b8063a217fddf11610120578063a217fddf14610504578063a22cb4651461050c578063a2f551ec1461051f578063a53a84b614610532578063b29c097a1461053b578063b390c0ab1461056257600080fd5b806383ca4b6f146104a25780638d010db3146104b55780638da5cb5b146104d857806391d14854146104e957806395d89b41146104fc57600080fd5b80632c23b965116101f557806336568abe116101b957806336568abe146104325780634e1273f4146104455780634e6f9dd6146104655780636c0360eb1461047257806375b238fc1461047a5780637e712f381461048f57600080fd5b80632c23b965146103b95780632e628b61146103ce5780632eb2c2d6146103e15780632f2ff15d146103f4578063328825351461040757600080fd5b806320333b131161024757806320333b1314610309578063206b60f91461031c578063224a177514610331578063248a9ca3146103445780632693ebf2146103675780632a55205a1461038757600080fd5b8062fdd58e1461028357806301ffc9a7146102a957806302fe5305146102cc57806306fdde03146102e15780630e89341c146102f6575b600080fd5b610296610291366004613005565b61067c565b6040519081526020015b60405180910390f35b6102bc6102b7366004613045565b610713565b60405190151581526020016102a0565b6102df6102da36600461313c565b61073f565b005b6102e9610764565b6040516102a091906131c8565b6102e96103043660046131db565b6107f2565b6102df6103173660046131f4565b610917565b61029660008051602061410d83398151915281565b6102df61033f366004613254565b610a30565b6102966103523660046131db565b60009081526003602052604090206001015490565b6102966103753660046131db565b600f6020526000908152604090205481565b61039a610395366004613287565b610aa1565b604080516001600160a01b0390931683526020830191909152016102a0565b61029660008051602061412d83398151915281565b6102df6103dc366004613354565b610add565b6102df6103ef366004613500565b610c7c565b6102df6104023660046135a9565b610d13565b600c5461041a906001600160a01b031681565b6040516001600160a01b0390911681526020016102a0565b6102df6104403660046135a9565b610d3d565b6104586104533660046135d5565b610db7565b6040516102a09190613673565b6008546102bc9060ff1681565b6102e9610ee0565b6102966000805160206141ad83398151915281565b6102df61049d366004613686565b610eed565b6102df6104b036600461370d565b610fc1565b6102bc6104c33660046131db565b600e6020526000908152604090205460ff1681565b6004546001600160a01b031661041a565b6102bc6104f73660046135a9565b6110c0565b6102e96110f1565b610296600081565b6102df61051a366004613743565b6110fe565b6102df61052d36600461376d565b611109565b610296600d5481565b6102967f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e681565b6102df610570366004613287565b611441565b6102966000805160206141cd83398151915281565b6102966105983660046131db565b6000908152600f602052604090205490565b6102df6105b83660046135a9565b6114ef565b6008546102bc9062010000900460ff1681565b6008546102bc90610100900460ff1681565b6102e9611514565b6102bc6105f83660046137ba565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61029660008051602061418d83398151915281565b6102df61158e565b6102df6106513660046137e4565b6115de565b6102df610664366004613848565b611665565b6102df610677366004613863565b6117be565b60006001600160a01b0383166106ed5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b600061071e82611b59565b8061073957506001600160e01b0319821663152a902d60e11b145b92915050565b60008051602061412d83398151915261075781611ba9565b61076082611bb6565b5050565b6009805461077190613987565b80601f016020809104026020016040519081016040528092919081815260200182805461079d90613987565b80156107ea5780601f106107bf576101008083540402835291602001916107ea565b820191906000526020600020905b8154815290600101906020018083116107cd57829003601f168201915b505050505081565b60008181526010602052604081208054606092919061081090613987565b90501115610909576000600b805461082790613987565b9050111561086b57600b60106000848152602001908152602001600020604051602001610855929190613a31565b6040516020818303038152906040529050919050565b6000828152601060205260409020805461088490613987565b80601f01602080910402602001604051908101604052809291908181526020018280546108b090613987565b80156108fd5780601f106108d2576101008083540402835291602001916108fd565b820191906000526020600020905b8154815290600101906020018083116108e057829003601f168201915b50505050509050919050565b61073982611bc9565b919050565b60008051602061418d83398151915261092f81611ba9565b6000848152600f60205260409020541561098b5760405162461bcd60e51b815260206004820152601960248201527f4e46543a20746f6b656e20616c7265616479206d696e7465640000000000000060448201526064016106e4565b8151156109eb57600084815260106020908152604090912083516109b192850190612ec7565b50837f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b836040516109e291906131c8565b60405180910390a25b610a0685858560405180602001604052806000815250611bd8565b6000848152600f602052604081208054859290610a24908490613a5c565b90915550505050505050565b60008051602061410d833981519152610a4881611ba9565b60085462010000900460ff16610a705760405162461bcd60e51b81526004016106e490613a74565b600454604080516020810190915260008152610a9b916001600160a01b031690869086908690611cec565b50505050565b600c54600d5460009182916001600160a01b039091169061271090610ac7908690613ab8565b610ad19190613aed565b915091505b9250929050565b60008051602061412d833981519152610af581611ba9565b60085460ff1680610b5e5750600b604051602001610b139190613b01565b60408051601f198184030181529190528051602090910120610b358580613b0d565b604051602001610b46929190613b53565b60405160208183030381529060405280519060200120145b610b9f5760405162461bcd60e51b815260206004820152601260248201527126b2ba30b230ba309034b990333937bd32b760711b60448201526064016106e4565b610ba98480613b0d565b610bb591600b91612f4b565b50610bc660a0850160808601613848565b600c80546001600160a01b0319166001600160a01b0392909216919091179055606084018035600d55610bfc9060408601613b63565b610c0d576008805462ff0000191690555b610c1d6040850160208601613b63565b158015610c2c575060085460ff165b15610c65576008805460ff191690556040517fb59f45df38ec0d34114b1248c38a29cdbccbf3e745ae3ef310ac66199a4ceccf90600090a15b610c6e83611e16565b8115610a9b57610a9b61158e565b6001600160a01b038516331480610c985750610c9885336105f8565b610cff5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016106e4565b610d0c8585858585612167565b5050505050565b600082815260036020526040902060010154610d2e81611ba9565b610d3883836122fb565b505050565b6001600160a01b0381163314610dad5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106e4565b6107608282612381565b60608151835114610e1c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016106e4565b600083516001600160401b03811115610e3757610e37613062565b604051908082528060200260200182016040528015610e60578160200160208202803683370190505b50905060005b8451811015610ed857610eab858281518110610e8457610e84613b7e565b6020026020010151858381518110610e9e57610e9e613b7e565b602002602001015161067c565b828281518110610ebd57610ebd613b7e565b6020908102919091010152610ed181613b94565b9050610e66565b509392505050565b600b805461077190613987565b60008051602061410d833981519152610f0581611ba9565b60085462010000900460ff16610f2d5760405162461bcd60e51b81526004016106e490613a74565b60005b8351811015610d0c576004548551610faf916001600160a01b031690879084908110610f5e57610f5e613b7e565b6020026020010151868481518110610f7857610f78613b7e565b6020026020010151868581518110610f9257610f92613b7e565b602002602001015160405180602001604052806000815250611cec565b80610fb981613b94565b915050610f30565b6000805160206141cd833981519152610fd981611ba9565b600854610100900460ff166110305760405162461bcd60e51b815260206004820152601f60248201527f4e46543a20746f6b656e73206275726e696e672069732064697361626c65640060448201526064016106e4565b600454611047906001600160a01b031684846123e8565b60005b8351811015610a9b5782818151811061106557611065613b7e565b6020026020010151600f600086848151811061108357611083613b7e565b6020026020010151815260200190815260200160002060008282546110a89190613baf565b909155508190506110b881613b94565b91505061104a565b60006110da6000805160206141ad83398151915283611b2e565b806110ea57506110ea8383611b2e565b9392505050565b600a805461077190613987565b610760338383612572565b7f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e661113381611ba9565b6000848152600f60205260409020546111a25760405162461bcd60e51b815260206004820152602b60248201527f4e46543a207570646174652055524920717565727920666f72206e6f6e65786960448201526a39ba32b73a103a37b5b2b760a91b60648201526084016106e4565b60085460ff166112005760405162461bcd60e51b815260206004820152602360248201527f4e46543a20546f6b656e2075726973206172652066726f7a656e20676c6f62616044820152626c6c7960e81b60648201526084016106e4565b6000848152600e602052604090205460ff1615156001141561125b5760405162461bcd60e51b815260206004820152601460248201527327232a1d102a37b5b2b71034b990333937bd32b760611b60448201526064016106e4565b81806112675750825115155b6112d25760405162461bcd60e51b815260206004820152603660248201527f4e46543a20456974686572205f6e6577557269206f72205f6973467265657a65604482015275151bdad95b955c9a4f5d1c9d59481c995c5d5a5c995960521b60648201526084016106e4565b8251156113d857826040516020016112ea9190613bc6565b60408051601f19818403018152828252805160209182012060008881526010909252919020909161131b9190613b01565b6040518091039020141561137f5760405162461bcd60e51b815260206004820152602560248201527f4e46543a204e657720746f6b656e205552492069732073616d6520617320757060448201526419185d195960da1b60648201526084016106e4565b6000848152601060209081526040909120845161139e92860190612ec7565b50837f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b846040516113cf91906131c8565b60405180910390a25b8115610a9b576000848152600e60209081526040808320805460ff19166001179055601090915290819020905185917fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b55657207916114339190613be2565b60405180910390a250505050565b6000805160206141cd83398151915261145981611ba9565b600854610100900460ff166114b05760405162461bcd60e51b815260206004820152601f60248201527f4e46543a20746f6b656e73206275726e696e672069732064697361626c65640060448201526064016106e4565b6004546114c7906001600160a01b03168484612653565b6000838152600f6020526040812080548492906114e5908490613baf565b9091555050505050565b60008281526003602052604090206001015461150a81611ba9565b610d388383612381565b60606000611562611526600d54612757565b600c5461153d906001600160a01b0316601461285c565b60405160200161154e929190613c67565b6040516020818303038152906040526129f7565b90506000816040516020016115779190613cee565b60408051601f198184030181529190529392505050565b6000805160206141ad8339815191526115a681611ba9565b6005546115cb906000805160206141ad833981519152906001600160a01b0316612381565b50600580546001600160a01b0319169055565b6001600160a01b0385163314806115fa57506115fa85336105f8565b6116585760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016106e4565b610d0c8585858585611cec565b6004546001600160a01b03828116911614156116b75760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c903a34329037bbb732b960791b60448201526064016106e4565b6004546001600160a01b0316331461171b5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e207472616e73666572206f776e65727368696044820152600760fc1b60648201526084016106e4565b600454611740906000805160206141ad833981519152906001600160a01b0316612381565b600480546001600160a01b038381166001600160a01b031983168117909355169061177a906000805160206141ad833981519152906122fb565b816001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008051602061418d8339815191526117d681611ba9565b60005b8451811015611b26576118138582815181106117f7576117f7613b7e565b60200260200101516000908152600f6020526040902054151590565b1561186e5760405162461bcd60e51b815260206004820152602560248201527f4e46543a206f6e65206f6620746f6b656e732061726520616c7265616479206d6044820152641a5b9d195960da1b60648201526084016106e4565b85818151811061188057611880613b7e565b60200260200101516001600160a01b03168682815181106118a3576118a3613b7e565b60200260200101516001600160a01b0316146119015760405162461bcd60e51b815260206004820181905260248201527f4e46543a206f6e65206f662061646472657373657320697320696e76616c696460448201526064016106e4565b600084828151811061191557611915613b7e565b60200260200101511161196a5760405162461bcd60e51b815260206004820152601c60248201527f4e46543a20616c6c20616d6f756e7473206d757374206265203e20300000000060448201526064016106e4565b83818151811061197c5761197c613b7e565b6020026020010151600f600087848151811061199a5761199a613b7e565b6020026020010151815260200190815260200160002060008282546119bf9190613a5c565b9250508190555060008382815181106119da576119da613b7e565b6020026020010151511115611aae578281815181106119fb576119fb613b7e565b602002602001015160106000878481518110611a1957611a19613b7e565b602002602001015181526020019081526020016000209080519060200190611a42929190612ec7565b50848181518110611a5557611a55613b7e565b60200260200101517f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b848381518110611a9057611a90613b7e565b6020026020010151604051611aa591906131c8565b60405180910390a25b611b14868281518110611ac357611ac3613b7e565b6020026020010151868381518110611add57611add613b7e565b6020026020010151868481518110611af757611af7613b7e565b602002602001015160405180602001604052806000815250611bd8565b80611b1e81613b94565b9150506117d9565b505050505050565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006001600160e01b03198216636cdb3d1360e11b1480611b8a57506001600160e01b031982166303a24d0760e21b145b8061073957506301ffc9a760e01b6001600160e01b0319831614610739565b611bb38133612b5c565b50565b8051610760906002906020840190612ec7565b60606002805461088490613987565b6001600160a01b038416611c385760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016106e4565b336000611c4485612bc0565b90506000611c5185612bc0565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290611c83908490613a5c565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611ce383600089898989612c0b565b50505050505050565b6001600160a01b038416611d125760405162461bcd60e51b81526004016106e490613d33565b336000611d1e85612bc0565b90506000611d2b85612bc0565b90506000868152602081815260408083206001600160a01b038c16845290915290205485811015611d6e5760405162461bcd60e51b81526004016106e490613d78565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611dab908490613a5c565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611e0b848a8a8a8a8a612c0b565b505050505050505050565b805115611bb357611e356000805160206141ad833981519152336110c0565b611ea05760405162461bcd60e51b815260206004820152603660248201527f4772616e756c617220726f6c65733a206f6e6c792041444d494e5f524f4c452060448201527563616e206368616e6765207065726d697373696f6e7360501b60648201526084016106e4565b60005b8151811015610760576000828281518110611ec057611ec0613b7e565b6020026020010151600001519050611ed781612d76565b611f315760405162461bcd60e51b815260206004820152602560248201527f4772616e756c6172526f6c65733a20496e76616c696420726f6c657341646472604482015264657373657360d81b60648201526084016106e4565b60008181526007602052604090205460ff1615611f9e5760405162461bcd60e51b815260206004820152602560248201527f4772616e756c6172526f6c65733a204f6e65206f6620726f6c657320697320666044820152643937bd32b760d91b60648201526084016106e4565b60005b6000828152600660205260409020548110156120095760008281526006602052604090208054611ff791849184908110611fdd57611fdd613b7e565b6000918252602090912001546001600160a01b0316612381565b8061200181613b94565b915050611fa1565b50600081815260066020526040812061202191612fbf565b60005b83838151811061203657612036613b7e565b602002602001015160200151518110156121165761208a8285858151811061206057612060613b7e565b602002602001015160200151838151811061207d5761207d613b7e565b60200260200101516122fb565b600082815260066020526040902084518590859081106120ac576120ac613b7e565b60200260200101516020015182815181106120c9576120c9613b7e565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558061210e81613b94565b915050612024565b5082828151811061212957612129613b7e565b60200260200101516040015115612154576000818152600760205260409020805460ff191660011790555b508061215f81613b94565b915050611ea3565b81518351146121885760405162461bcd60e51b81526004016106e490613dc2565b6001600160a01b0384166121ae5760405162461bcd60e51b81526004016106e490613d33565b3360005b84518110156122955760008582815181106121cf576121cf613b7e565b6020026020010151905060008583815181106121ed576121ed613b7e565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561223d5760405162461bcd60e51b81526004016106e490613d78565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061227a908490613a5c565b925050819055505050508061228e90613b94565b90506121b2565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122e5929190613e0a565b60405180910390a4611b26818787878787612dfd565b61230582826110c0565b6107605760008281526003602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561233d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61238b82826110c0565b156107605760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b03831661240e5760405162461bcd60e51b81526004016106e490613e38565b805182511461242f5760405162461bcd60e51b81526004016106e490613dc2565b604080516020810190915260009081905233905b835181101561250557600084828151811061246057612460613b7e565b60200260200101519050600084838151811061247e5761247e613b7e565b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156124ce5760405162461bcd60e51b81526004016106e490613e7b565b6000928352602083815260408085206001600160a01b038b16865290915290922091039055806124fd81613b94565b915050612443565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612556929190613e0a565b60405180910390a4604080516020810190915260009052610a9b565b816001600160a01b0316836001600160a01b031614156125e65760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016106e4565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166126795760405162461bcd60e51b81526004016106e490613e38565b33600061268584612bc0565b9050600061269284612bc0565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156126df5760405162461bcd60e51b81526004016106e490613e7b565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611ce3565b60608161277b5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156127a5578061278f81613b94565b915061279e9050600a83613aed565b915061277f565b6000816001600160401b038111156127bf576127bf613062565b6040519080825280601f01601f1916602001820160405280156127e9576020820181803683370190505b5090505b8415612854576127fe600183613baf565b915061280b600a86613ebf565b612816906030613a5c565b60f81b81838151811061282b5761282b613b7e565b60200101906001600160f81b031916908160001a90535061284d600a86613aed565b94506127ed565b949350505050565b6060600061286b836002613ab8565b612876906002613a5c565b6001600160401b0381111561288d5761288d613062565b6040519080825280601f01601f1916602001820160405280156128b7576020820181803683370190505b509050600360fc1b816000815181106128d2576128d2613b7e565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061290157612901613b7e565b60200101906001600160f81b031916908160001a9053506000612925846002613ab8565b612930906001613a5c565b90505b60018111156129a8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061296457612964613b7e565b1a60f81b82828151811061297a5761297a613b7e565b60200101906001600160f81b031916908160001a90535060049490941c936129a181613ed3565b9050612933565b5083156110ea5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e4565b805160609080612a17575050604080516020810190915260008152919050565b60006003612a26836002613a5c565b612a309190613aed565b612a3b906004613ab8565b90506000612a4a826020613a5c565b6001600160401b03811115612a6157612a61613062565b6040519080825280601f01601f191660200182016040528015612a8b576020820181803683370190505b509050600060405180606001604052806040815260200161414d604091399050600181016020830160005b86811015612b17576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101612ab6565b506003860660018114612b315760028114612b4257612b4e565b613d3d60f01b600119830152612b4e565b603d60f81b6000198301525b505050918152949350505050565b612b6682826110c0565b61076057612b7e816001600160a01b0316601461285c565b612b8983602061285c565b604051602001612b9a929190613eea565b60408051601f198184030181529082905262461bcd60e51b82526106e4916004016131c8565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612bfa57612bfa613b7e565b602090810291909101015292915050565b6001600160a01b0384163b15611b265760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612c4f9089908990889088908890600401613f5f565b602060405180830381600087803b158015612c6957600080fd5b505af1925050508015612c99575060408051601f3d908101601f19168201909252612c9691810190613fa4565b60015b612d4657612ca5613fc1565b806308c379a01415612cdf5750612cba613fdd565b80612cc55750612ce1565b8060405162461bcd60e51b81526004016106e491906131c8565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016106e4565b6001600160e01b0319811663f23a6e6160e01b14611ce35760405162461bcd60e51b81526004016106e490614066565b600060008051602061418d833981519152821480612da1575060008051602061412d83398151915282145b80612dcb57507f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e682145b80612de357506000805160206141cd83398151915282145b8061073957505060008051602061410d8339815191521490565b6001600160a01b0384163b15611b265760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612e4190899089908890889088906004016140ae565b602060405180830381600087803b158015612e5b57600080fd5b505af1925050508015612e8b575060408051601f3d908101601f19168201909252612e8891810190613fa4565b60015b612e9757612ca5613fc1565b6001600160e01b0319811663bc197c8160e01b14611ce35760405162461bcd60e51b81526004016106e490614066565b828054612ed390613987565b90600052602060002090601f016020900481019282612ef55760008555612f3b565b82601f10612f0e57805160ff1916838001178555612f3b565b82800160010185558215612f3b579182015b82811115612f3b578251825591602001919060010190612f20565b50612f47929150612fd9565b5090565b828054612f5790613987565b90600052602060002090601f016020900481019282612f795760008555612f3b565b82601f10612f925782800160ff19823516178555612f3b565b82800160010185558215612f3b579182015b82811115612f3b578235825591602001919060010190612fa4565b5080546000825590600052602060002090810190611bb391905b5b80821115612f475760008155600101612fda565b80356001600160a01b038116811461091257600080fd5b6000806040838503121561301857600080fd5b61302183612fee565b946020939093013593505050565b6001600160e01b031981168114611bb357600080fd5b60006020828403121561305757600080fd5b81356110ea8161302f565b634e487b7160e01b600052604160045260246000fd5b606081018181106001600160401b038211171561309757613097613062565b60405250565b601f8201601f191681016001600160401b03811182821017156130c2576130c2613062565b6040525050565b600082601f8301126130da57600080fd5b81356001600160401b038111156130f3576130f3613062565b60405161310a601f8301601f19166020018261309d565b81815284602083860101111561311f57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561314e57600080fd5b81356001600160401b0381111561316457600080fd5b612854848285016130c9565b60005b8381101561318b578181015183820152602001613173565b83811115610a9b5750506000910152565b600081518084526131b4816020860160208601613170565b601f01601f19169290920160200192915050565b6020815260006110ea602083018461319c565b6000602082840312156131ed57600080fd5b5035919050565b6000806000806080858703121561320a57600080fd5b61321385612fee565b9350602085013592506040850135915060608501356001600160401b0381111561323c57600080fd5b613248878288016130c9565b91505092959194509250565b60008060006060848603121561326957600080fd5b61327284612fee565b95602085013595506040909401359392505050565b6000806040838503121561329a57600080fd5b50508035926020909101359150565b60006001600160401b038211156132c2576132c2613062565b5060051b60200190565b600082601f8301126132dd57600080fd5b813560206132ea826132a9565b6040516132f7828261309d565b83815260059390931b850182019282810191508684111561331757600080fd5b8286015b848110156133395761332c81612fee565b835291830191830161331b565b509695505050505050565b8035801515811461091257600080fd5b60008060006060848603121561336957600080fd5b83356001600160401b038082111561338057600080fd5b9085019060a0828803121561339457600080fd5b90935060209085820135818111156133ab57600080fd5b8601601f810188136133bc57600080fd5b80356133c7816132a9565b6040516133d4828261309d565b82815260059290921b830185019185810191508a8311156133f457600080fd5b8584015b8381101561347b5780358681111561340f57600080fd5b85016060818e03601f1901121561342557600080fd5b60405161343181613078565b88820135815260408201358881111561344957600080fd5b6134578f8b838601016132cc565b8a8301525061346860608301613344565b60408201528452509186019186016133f8565b5080975050505050505061349160408501613344565b90509250925092565b600082601f8301126134ab57600080fd5b813560206134b8826132a9565b6040516134c5828261309d565b83815260059390931b85018201928281019150868411156134e557600080fd5b8286015b8481101561333957803583529183019183016134e9565b600080600080600060a0868803121561351857600080fd5b61352186612fee565b945061352f60208701612fee565b935060408601356001600160401b038082111561354b57600080fd5b61355789838a0161349a565b9450606088013591508082111561356d57600080fd5b61357989838a0161349a565b9350608088013591508082111561358f57600080fd5b5061359c888289016130c9565b9150509295509295909350565b600080604083850312156135bc57600080fd5b823591506135cc60208401612fee565b90509250929050565b600080604083850312156135e857600080fd5b82356001600160401b03808211156135ff57600080fd5b61360b868387016132cc565b9350602085013591508082111561362157600080fd5b5061362e8582860161349a565b9150509250929050565b600081518084526020808501945080840160005b838110156136685781518752958201959082019060010161364c565b509495945050505050565b6020815260006110ea6020830184613638565b60008060006060848603121561369b57600080fd5b83356001600160401b03808211156136b257600080fd5b6136be878388016132cc565b945060208601359150808211156136d457600080fd5b6136e08783880161349a565b935060408601359150808211156136f657600080fd5b506137038682870161349a565b9150509250925092565b6000806040838503121561372057600080fd5b82356001600160401b038082111561373757600080fd5b61360b8683870161349a565b6000806040838503121561375657600080fd5b61375f83612fee565b91506135cc60208401613344565b60008060006060848603121561378257600080fd5b8335925060208401356001600160401b0381111561379f57600080fd5b6137ab868287016130c9565b92505061349160408501613344565b600080604083850312156137cd57600080fd5b6137d683612fee565b91506135cc60208401612fee565b600080600080600060a086880312156137fc57600080fd5b61380586612fee565b945061381360208701612fee565b9350604086013592506060860135915060808601356001600160401b0381111561383c57600080fd5b61359c888289016130c9565b60006020828403121561385a57600080fd5b6110ea82612fee565b6000806000806080858703121561387957600080fd5b84356001600160401b038082111561389057600080fd5b61389c888389016132cc565b95506020915081870135818111156138b357600080fd5b6138bf89828a0161349a565b9550506040870135818111156138d457600080fd5b6138e089828a0161349a565b9450506060870135818111156138f557600080fd5b8701601f8101891361390657600080fd5b8035613911816132a9565b60405161391e828261309d565b82815260059290921b830185019185810191508b83111561393e57600080fd5b8584015b838110156139765780358681111561395a5760008081fd5b6139688e89838901016130c9565b845250918601918601613942565b50989b979a50959850505050505050565b600181811c9082168061399b57607f821691505b602082108114156139bc57634e487b7160e01b600052602260045260246000fd5b50919050565b600081546139cf81613987565b600182811680156139e757600181146139f857613a27565b60ff19841687528287019450613a27565b8560005260208060002060005b85811015613a1e5781548a820152908401908201613a05565b50505082870194505b5050505092915050565b6000612854613a4083866139c2565b846139c2565b634e487b7160e01b600052601160045260246000fd5b60008219821115613a6f57613a6f613a46565b500190565b60208082526024908201527f4e46543a205472616e7366657273206279206f776e6572206172652064697361604082015263189b195960e21b606082015260800190565b6000816000190483118215151615613ad257613ad2613a46565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613afc57613afc613ad7565b500490565b60006110ea82846139c2565b6000808335601e19843603018112613b2457600080fd5b8301803591506001600160401b03821115613b3e57600080fd5b602001915036819003821315610ad657600080fd5b8183823760009101908152919050565b600060208284031215613b7557600080fd5b6110ea82613344565b634e487b7160e01b600052603260045260246000fd5b6000600019821415613ba857613ba8613a46565b5060010190565b600082821015613bc157613bc1613a46565b500390565b60008251613bd8818460208701613170565b9190910192915050565b6000602080835260008454613bf681613987565b80848701526040600180841660008114613c175760018114613c2b57613c59565b60ff19851689840152606089019550613c59565b896000528660002060005b85811015613c515781548b8201860152908301908801613c36565b8a0184019650505b509398975050505050505050565b7f7b2273656c6c65725f6665655f62617369735f706f696e7473223a2000000000815260008351613c9f81601c850160208801613170565b731610113332b2afb932b1b4b834b2b73a111d101160611b601c918401918201528351613cd3816030840160208801613170565b61227d60f01b60309290910191820152603201949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251613d2681601d850160208701613170565b91909101601d0192915050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b604081526000613e1d6040830185613638565b8281036020840152613e2f8185613638565b95945050505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b600082613ece57613ece613ad7565b500690565b600081613ee257613ee2613a46565b506000190190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613f22816017850160208801613170565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613f53816028840160208801613170565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613f999083018461319c565b979650505050505050565b600060208284031215613fb657600080fd5b81516110ea8161302f565b600060033d1115613fda5760046000803e5060005160e01c5b90565b600060443d1015613feb5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561401a57505050505090565b82850191508151818111156140325750505050505090565b843d870101602082850101111561404c5750505050505090565b61405b6020828601018761309d565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906140da90830186613638565b82810360608401526140ec8186613638565b90508281036080840152614100818561319c565b9897505050505050505056fe8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f54142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c3686a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775e97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa22a2646970667358221220e8c6dd770472f80e864635305d0ddd54d9efdacdf7aac9295dbf896833e9091464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 684,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 690,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 692,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 24,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 8284,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8286,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "_nftPort",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 8291,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "_rolesAddressesIndexed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 8295,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "_rolesFrozen",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 4822,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "metadataUpdatable",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 4824,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "tokensBurnable",
        "offset": 1,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 4826,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "tokensTransferable",
        "offset": 2,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 4828,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "name",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 4830,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "symbol",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 4832,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "baseURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 4834,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "royaltiesAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 4836,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "royaltiesBasisPoints",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4840,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "freezeTokenUris",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 4844,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "tokenSupply",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4848,
        "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/ERC1155NftCustom.sol:ERC1155NFTCustom",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}