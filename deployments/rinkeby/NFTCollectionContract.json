{
  "address": "0x31D76089f70aee14B39F6C53755D8728c28F83b1",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reservedSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensPerMint",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "treasuryAddress",
              "type": "address"
            }
          ],
          "internalType": "struct NFTCollection.DeploymentConfig",
          "name": "deploymentConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "metadataUpdatable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "publicMintStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "presaleMintStart",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "prerevealTokenURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "presaleMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesAddress",
              "type": "address"
            }
          ],
          "internalType": "struct NFTCollection.RuntimeConfig",
          "name": "runtimeConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "maxSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "reservedSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "mintPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokensPerMint",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "treasuryAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct NFTCollection.DeploymentConfig",
              "name": "deploymentConfig",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "metadataUpdatable",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "publicMintStart",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "presaleMintStart",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "prerevealTokenURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "presaleMerkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "royaltiesBps",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "royaltiesAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct NFTCollection.RuntimeConfig",
              "name": "runtimeConfig",
              "type": "tuple"
            }
          ],
          "internalType": "struct NFTCollection.ContractInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reservedSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensPerMint",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "treasuryAddress",
              "type": "address"
            }
          ],
          "internalType": "struct NFTCollection.DeploymentConfig",
          "name": "deploymentConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "metadataUpdatable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "publicMintStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "presaleMintStart",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "prerevealTokenURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "presaleMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesAddress",
              "type": "address"
            }
          ],
          "internalType": "struct NFTCollection.RuntimeConfig",
          "name": "runtimeConfig",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataUpdatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prerevealTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "presaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleMintStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "reserveMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensPerMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferAdminRights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "metadataUpdatable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "publicMintStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "presaleMintStart",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "prerevealTokenURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "presaleMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesAddress",
              "type": "address"
            }
          ],
          "internalType": "struct NFTCollection.RuntimeConfig",
          "name": "newConfig",
          "type": "tuple"
        }
      ],
      "name": "updateConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x411db0733de484052cf18d1232e08a653c0e9c5e5ee3533a6f5d1dd289c588ba",
  "receipt": {
    "to": null,
    "from": "0xE7D7696C8f11278124f39fB7cDd39fD9442D5026",
    "contractAddress": "0x31D76089f70aee14B39F6C53755D8728c28F83b1",
    "transactionIndex": 11,
    "gasUsed": "3852772",
    "logsBloom": "0x
    "blockHash": "0xd1d4e967b0ffa67f66000d6f2bff8f90369a8b1522043d992daef143305039d5",
    "transactionHash": "0x411db0733de484052cf18d1232e08a653c0e9c5e5ee3533a6f5d1dd289c588ba",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 10468077,
        "transactionHash": "0x411db0733de484052cf18d1232e08a653c0e9c5e5ee3533a6f5d1dd289c588ba",
        "address": "0x31D76089f70aee14B39F6C53755D8728c28F83b1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000e7d7696c8f11278124f39fb7cdd39fd9442d5026",
          "0x000000000000000000000000e7d7696c8f11278124f39fb7cdd39fd9442d5026"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xd1d4e967b0ffa67f66000d6f2bff8f90369a8b1522043d992daef143305039d5"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 10468077,
        "transactionHash": "0x411db0733de484052cf18d1232e08a653c0e9c5e5ee3533a6f5d1dd289c588ba",
        "address": "0x31D76089f70aee14B39F6C53755D8728c28F83b1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e7d7696c8f11278124f39fb7cdd39fd9442d5026",
          "0x000000000000000000000000e7d7696c8f11278124f39fb7cdd39fd9442d5026"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xd1d4e967b0ffa67f66000d6f2bff8f90369a8b1522043d992daef143305039d5"
      }
    ],
    "blockNumber": 10468077,
    "cumulativeGasUsed": "4521062",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "owner": "0xE7D7696C8f11278124f39fB7cDd39fD9442D5026",
      "name": "NFTCollection",
      "symbol": "NFT",
      "maxSupply": 1000,
      "reservedSupply": 0,
      "tokensPerMint": 10,
      "mintPrice": "10000000000000000",
      "treasuryAddress": "0xE7D7696C8f11278124f39fB7cDd39fD9442D5026"
    },
    {
      "baseURI": "",
      "prerevealTokenURI": "",
      "publicMintStart": 0,
      "presaleMintStart": 0,
      "presaleMerkleRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "metadataUpdatable": true,
      "royaltiesBps": 250,
      "royaltiesAddress": "0xE7D7696C8f11278124f39fB7cDd39fD9442D5026"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "b6c324222d3ee49ee36165237c3a7802",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerMint\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"internalType\":\"struct NFTCollection.DeploymentConfig\",\"name\":\"deploymentConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"publicMintStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleMintStart\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prerevealTokenURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct NFTCollection.RuntimeConfig\",\"name\":\"runtimeConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerMint\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"internalType\":\"struct NFTCollection.DeploymentConfig\",\"name\":\"deploymentConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"publicMintStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleMintStart\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prerevealTokenURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct NFTCollection.RuntimeConfig\",\"name\":\"runtimeConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct NFTCollection.ContractInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerMint\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"internalType\":\"struct NFTCollection.DeploymentConfig\",\"name\":\"deploymentConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"publicMintStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleMintStart\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prerevealTokenURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct NFTCollection.RuntimeConfig\",\"name\":\"runtimeConfig\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataUpdatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prerevealTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleMintStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reserveMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferAdminRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"publicMintStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleMintStart\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prerevealTokenURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct NFTCollection.RuntimeConfig\",\"name\":\"newConfig\",\"type\":\"tuple\"}],\"name\":\"updateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"contractURI()\":{\"details\":\"OpenSea contract metadata\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getInfo()\":{\"details\":\"Convenience helper\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"Need name() to support setting it in the initializer instead of constructor\"},\"owner()\":{\"details\":\"Required for easy integration with OpenSea\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"ERC2981 token royalty info\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Need symbol() to support setting it in the initializer instead of constructor\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"updateConfig((string,bool,uint256,uint256,string,bytes32,uint256,address))\":{\"details\":\"Callable by admin roles only\"},\"withdrawFees()\":{\"details\":\"Callable by admin roles only\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"Admin role\"},\"VERSION()\":{\"notice\":\"Contract version, semver-style uint X_YY_ZZ\"},\"availableSupply()\":{\"notice\":\"Get the number of tokens still available for minting\"},\"getInfo()\":{\"notice\":\"Get full contract information\"},\"initialize((string,string,address,uint256,uint256,uint256,uint256,address),(string,bool,uint256,uint256,string,bytes32,uint256,address))\":{\"notice\":\"Contract initializer\"},\"isWhitelisted(address,bytes32[])\":{\"notice\":\"Check if the wallet is whitelisted for the presale\"},\"mint(uint256)\":{\"notice\":\"Mint tokens\"},\"mintingActive()\":{\"notice\":\"Check if public minting is active\"},\"owner()\":{\"notice\":\"Contract owner address\"},\"presaleActive()\":{\"notice\":\"Check if presale minting is active\"},\"presaleMint(uint256,bytes32[])\":{\"notice\":\"Mint tokens if the wallet has been whitelisted\"},\"reserveMint(address,uint256)\":{\"notice\":\"Mint a token from the reserve\"},\"reserveRemaining()\":{\"notice\":\"The number of tokens remaining in the reserve\"},\"tokenURI(uint256)\":{\"notice\":\"Get the token metadata URI\"},\"totalSupply()\":{\"notice\":\"The number of currently minted tokens\"},\"transferAdminRights(address)\":{\"notice\":\"Transfer contract ownership\"},\"transferOwnership(address)\":{\"notice\":\"Transfer contract ownership\"},\"updateConfig((string,bool,uint256,uint256,string,bytes32,uint256,address))\":{\"notice\":\"Update contract configuration\"},\"withdrawFees()\":{\"notice\":\"Withdraw minting fees to the treasury address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deployables/NFTCollectionContract.sol\":\"NFTCollectionContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x0117c84d8584216a032bbfc24a21077e672609fa4e788624aace97dd97ceec9b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address, uint256)\\n    {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x73a07d6155bb2549828bf1ce4dce2300b5d78c958acb922e61a3341ea4279c97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/deployables/NFTCollectionContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../templates/NFTCollection.sol\\\";\\n\\ncontract NFTCollectionContract is NFTCollection {\\n    constructor(\\n        DeploymentConfig memory deploymentConfig,\\n        RuntimeConfig memory runtimeConfig\\n    ) {\\n        _preventInitialization = false;\\n        initialize(deploymentConfig, runtimeConfig);\\n    }\\n}\\n\",\"keccak256\":\"0xf420a54c2e02d5d36de44dc5ee171690fdeb46378cca80844223b519a1d5ac10\",\"license\":\"MIT\"},\"contracts/lib/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n                )\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0xf07ba0116b91bfccdd8ce9b9615bc8249d818ac0c25c72cc53fea3aa69569c4c\",\"license\":\"MIT\"},\"contracts/lib/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\n\\nabstract contract ERC2981 is IERC165, IERC2981 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC2981).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xa8b81ee9a467d26b366547a235506bce4f9f37b8966ea60d2abc56d4631833c4\",\"license\":\"MIT\"},\"contracts/templates/NFTCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport \\\"../lib/ERC2981.sol\\\";\\nimport \\\"../lib/Base64.sol\\\";\\n\\ncontract NFTCollection is ERC721, ERC2981, AccessControl, Initializable {\\n    using Address for address payable;\\n    using Strings for uint256;\\n\\n    /// Fixed at deployment time\\n    struct DeploymentConfig {\\n        /// Name of the NFT contract.\\n        string name;\\n        /// Symbol of the NFT contract.\\n        string symbol;\\n        /// The contract owner address. If you wish to own the contract, then set it as your wallet address.\\n        /// This is also the wallet that can manage the contract on NFT marketplaces. Use `transferOwnership()`\\n        /// to update the contract owner.\\n        address owner;\\n        /// The maximum number of tokens that can be minted in this collection.\\n        uint256 maxSupply;\\n        /// The number of free token mints reserved for the contract owner\\n        uint256 reservedSupply;\\n        /// Minting price per token.\\n        uint256 mintPrice;\\n        /// The maximum number of tokens the user can mint per transaction.\\n        uint256 tokensPerMint;\\n        /// Treasury address is the address where minting fees can be withdrawn to.\\n        /// Use `withdrawFees()` to transfer the entire contract balance to the treasury address.\\n        address payable treasuryAddress;\\n    }\\n\\n    /// Updatable by admins and owner\\n    struct RuntimeConfig {\\n        /// Metadata base URI for tokens, NFTs minted in this contract will have metadata URI of `baseURI` + `tokenID`.\\n        /// Set this to reveal token metadata.\\n        string baseURI;\\n        /// If true, the base URI of the NFTs minted in the specified contract can be updated after minting (token URIs\\n        /// are not frozen on the contract level). This is useful for revealing NFTs after the drop. If false, all the\\n        /// NFTs minted in this contract are frozen by default which means token URIs are non-updatable.\\n        bool metadataUpdatable;\\n        /// Starting timestamp for public minting.\\n        uint256 publicMintStart;\\n        /// Starting timestamp for whitelisted/presale minting.\\n        uint256 presaleMintStart;\\n        /// Pre-reveal token URI for placholder metadata. This will be returned for all token IDs until a `baseURI`\\n        /// has been set.\\n        string prerevealTokenURI;\\n        /// Root of the Merkle tree of whitelisted addresses. This is used to check if a wallet has been whitelisted\\n        /// for presale minting.\\n        bytes32 presaleMerkleRoot;\\n        /// Secondary market royalties in basis points (100 bps = 1%)\\n        uint256 royaltiesBps;\\n        /// Address for royalties\\n        address royaltiesAddress;\\n    }\\n\\n    struct ContractInfo {\\n        uint256 version;\\n        DeploymentConfig deploymentConfig;\\n        RuntimeConfig runtimeConfig;\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    /// Contract version, semver-style uint X_YY_ZZ\\n    uint256 public constant VERSION = 1_02_00;\\n\\n    /// Admin role\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    // Basis for calculating royalties.\\n    // This has to be 10k for royaltiesBps to be in basis points.\\n    uint16 constant ROYALTIES_BASIS = 10000;\\n\\n    /********************\\n     * Public variables *\\n     ********************/\\n\\n    /// The number of currently minted tokens\\n    /// @dev Managed by the contract\\n    uint256 public totalSupply;\\n\\n    /// The number of tokens remaining in the reserve\\n    /// @dev Managed by the contract\\n    uint256 public reserveRemaining;\\n\\n    /***************************\\n     * Contract initialization *\\n     ***************************/\\n\\n    constructor() ERC721(\\\"\\\", \\\"\\\") {\\n        _preventInitialization = true;\\n    }\\n\\n    /// Contract initializer\\n    function initialize(\\n        DeploymentConfig memory deploymentConfig,\\n        RuntimeConfig memory runtimeConfig\\n    ) public initializer {\\n        require(!_preventInitialization, \\\"Cannot be initialized\\\");\\n        _validateDeploymentConfig(deploymentConfig);\\n\\n        _grantRole(ADMIN_ROLE, msg.sender);\\n        _grantRole(ADMIN_ROLE, deploymentConfig.owner);\\n        _grantRole(DEFAULT_ADMIN_ROLE, deploymentConfig.owner);\\n\\n        _deploymentConfig = deploymentConfig;\\n        _runtimeConfig = runtimeConfig;\\n\\n        reserveRemaining = deploymentConfig.reservedSupply;\\n    }\\n\\n    /****************\\n     * User actions *\\n     ****************/\\n\\n    /// Mint tokens\\n    function mint(uint256 amount) external payable paymentProvided(amount) {\\n        require(mintingActive(), \\\"Minting has not started yet\\\");\\n\\n        _mintTokens(msg.sender, amount);\\n    }\\n\\n    /// Mint tokens if the wallet has been whitelisted\\n    function presaleMint(uint256 amount, bytes32[] calldata proof)\\n        external\\n        payable\\n        paymentProvided(amount)\\n    {\\n        require(presaleActive(), \\\"Presale has not started yet\\\");\\n        require(\\n            isWhitelisted(msg.sender, proof),\\n            \\\"Not whitelisted for presale\\\"\\n        );\\n\\n        _presaleMinted[msg.sender] = true;\\n        _mintTokens(msg.sender, amount);\\n    }\\n\\n    /******************\\n     * View functions *\\n     ******************/\\n\\n    /// Check if public minting is active\\n    function mintingActive() public view returns (bool) {\\n        return block.timestamp > _runtimeConfig.publicMintStart;\\n    }\\n\\n    /// Check if presale minting is active\\n    function presaleActive() public view returns (bool) {\\n        return block.timestamp > _runtimeConfig.presaleMintStart;\\n    }\\n\\n    /// Get the number of tokens still available for minting\\n    function availableSupply() public view returns (uint256) {\\n        return _deploymentConfig.maxSupply - totalSupply - reserveRemaining;\\n    }\\n\\n    /// Check if the wallet is whitelisted for the presale\\n    function isWhitelisted(address wallet, bytes32[] calldata proof)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        require(!_presaleMinted[wallet], \\\"Already minted\\\");\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(wallet));\\n\\n        return\\n            MerkleProof.verify(proof, _runtimeConfig.presaleMerkleRoot, leaf);\\n    }\\n\\n    /// Contract owner address\\n    /// @dev Required for easy integration with OpenSea\\n    function owner() public view returns (address) {\\n        return _deploymentConfig.owner;\\n    }\\n\\n    /*******************\\n     * Access controls *\\n     *******************/\\n\\n    /// Transfer contract ownership\\n    function transferOwnership(address newOwner)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(newOwner != _deploymentConfig.owner, \\\"Already the owner\\\");\\n\\n        _revokeRole(ADMIN_ROLE, _deploymentConfig.owner);\\n        _revokeRole(DEFAULT_ADMIN_ROLE, _deploymentConfig.owner);\\n\\n        address previousOwner = _deploymentConfig.owner;\\n        _deploymentConfig.owner = newOwner;\\n\\n        _grantRole(ADMIN_ROLE, _deploymentConfig.owner);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _deploymentConfig.owner);\\n\\n        emit OwnershipTransferred(previousOwner, newOwner);\\n    }\\n\\n    /// Transfer contract ownership\\n    function transferAdminRights(address to) external onlyRole(ADMIN_ROLE) {\\n        require(!hasRole(ADMIN_ROLE, to), \\\"Already an admin\\\");\\n        require(msg.sender != _deploymentConfig.owner, \\\"Use transferOwnership\\\");\\n\\n        _revokeRole(ADMIN_ROLE, msg.sender);\\n        _grantRole(ADMIN_ROLE, to);\\n    }\\n\\n    /*****************\\n     * Admin actions *\\n     *****************/\\n\\n    /// Mint a token from the reserve\\n    function reserveMint(address to, uint256 amount)\\n        external\\n        onlyRole(ADMIN_ROLE)\\n    {\\n        require(amount <= reserveRemaining, \\\"Not enough reserved\\\");\\n\\n        reserveRemaining -= amount;\\n        _mintTokens(to, amount);\\n    }\\n\\n    /// Get full contract information\\n    /// @dev Convenience helper\\n    function getInfo() external view returns (ContractInfo memory info) {\\n        info.version = VERSION;\\n        info.deploymentConfig = _deploymentConfig;\\n        info.runtimeConfig = _runtimeConfig;\\n    }\\n\\n    /// Update contract configuration\\n    /// @dev Callable by admin roles only\\n    function updateConfig(RuntimeConfig calldata newConfig)\\n        external\\n        onlyRole(ADMIN_ROLE)\\n    {\\n        _validateRuntimeConfig(newConfig);\\n        _runtimeConfig = newConfig;\\n    }\\n\\n    /// Withdraw minting fees to the treasury address\\n    /// @dev Callable by admin roles only\\n    function withdrawFees() external onlyRole(ADMIN_ROLE) {\\n        _deploymentConfig.treasuryAddress.sendValue(address(this).balance);\\n    }\\n\\n    /*************\\n     * Internals *\\n     *************/\\n\\n    /// Contract configuration\\n    RuntimeConfig internal _runtimeConfig;\\n    DeploymentConfig internal _deploymentConfig;\\n\\n    /// Flag for disabling initalization for template contracts\\n    bool internal _preventInitialization;\\n\\n    /// Mapping for tracking presale mint status\\n    mapping(address => bool) internal _presaleMinted;\\n\\n    /// @dev Internal function for performing token mints\\n    function _mintTokens(address to, uint256 amount) internal {\\n        require(amount <= _deploymentConfig.tokensPerMint, \\\"Amount too large\\\");\\n        require(amount <= availableSupply(), \\\"Not enough tokens left\\\");\\n\\n        // Update totalSupply only once with the total minted amount\\n        totalSupply += amount;\\n        // Mint the required amount of tokens,\\n        // starting with the highest token ID\\n        for (uint256 i = 1; i <= amount; i++) {\\n            _safeMint(to, totalSupply - i);\\n        }\\n    }\\n\\n    /// Validate deployment config\\n    function _validateDeploymentConfig(DeploymentConfig memory config)\\n        internal\\n        pure\\n    {\\n        require(config.maxSupply > 0, \\\"Maximum supply must be non-zero\\\");\\n        require(config.tokensPerMint > 0, \\\"Tokens per mint must be non-zero\\\");\\n        require(\\n            config.treasuryAddress != address(0),\\n            \\\"Treasury address cannot be the null address\\\"\\n        );\\n        require(config.owner != address(0), \\\"Contract must have an owner\\\");\\n        require(\\n            config.reservedSupply <= config.maxSupply,\\n            \\\"Reserve must be less than maximum supply\\\"\\n        );\\n    }\\n\\n    /// Validate a runtime configuration change\\n    function _validateRuntimeConfig(RuntimeConfig calldata config)\\n        internal\\n        view\\n    {\\n        // Can't set royalties to more than 100%\\n        require(config.royaltiesBps <= ROYALTIES_BASIS, \\\"Royalties too high\\\");\\n\\n        // If metadata is updatable, we don't have any other limitations\\n        if (_runtimeConfig.metadataUpdatable) return;\\n\\n        // If it isn't, has we can't allow the flag to change anymore\\n        require(\\n            _runtimeConfig.metadataUpdatable == config.metadataUpdatable,\\n            \\\"Cannot unfreeze metadata\\\"\\n        );\\n\\n        // We also can't allow base URI to change\\n        require(\\n            keccak256(abi.encodePacked(_runtimeConfig.baseURI)) ==\\n                keccak256(abi.encodePacked(config.baseURI)),\\n            \\\"Metadata is frozen\\\"\\n        );\\n    }\\n\\n    /// @dev See {IERC165-supportsInterface}.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, AccessControl, ERC2981)\\n        returns (bool)\\n    {\\n        return\\n            ERC721.supportsInterface(interfaceId) ||\\n            AccessControl.supportsInterface(interfaceId) ||\\n            ERC2981.supportsInterface(interfaceId);\\n    }\\n\\n    /// Get the token metadata URI\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n\\n        return\\n            bytes(_runtimeConfig.baseURI).length > 0\\n                ? string(\\n                    abi.encodePacked(_runtimeConfig.baseURI, tokenId.toString())\\n                )\\n                : _runtimeConfig.prerevealTokenURI;\\n    }\\n\\n    /// @dev Need name() to support setting it in the initializer instead of constructor\\n    function name() public view override returns (string memory) {\\n        return _deploymentConfig.name;\\n    }\\n\\n    /// @dev Need symbol() to support setting it in the initializer instead of constructor\\n    function symbol() public view override returns (string memory) {\\n        return _deploymentConfig.symbol;\\n    }\\n\\n    /// @dev ERC2981 token royalty info\\n    function royaltyInfo(uint256, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        receiver = _runtimeConfig.royaltiesAddress;\\n        royaltyAmount =\\n            (_runtimeConfig.royaltiesBps * salePrice) /\\n            ROYALTIES_BASIS;\\n    }\\n\\n    /// @dev OpenSea contract metadata\\n    function contractURI() external view returns (string memory) {\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"seller_fee_basis_points\\\": ',\\n                        _runtimeConfig.royaltiesBps.toString(),\\n                        ', \\\"fee_recipient\\\": \\\"',\\n                        uint256(uint160(_runtimeConfig.royaltiesAddress))\\n                            .toHexString(20),\\n                        '\\\"}'\\n                    )\\n                )\\n            )\\n        );\\n\\n        string memory output = string(\\n            abi.encodePacked(\\\"data:application/json;base64,\\\", json)\\n        );\\n\\n        return output;\\n    }\\n\\n    /// Check if enough payment was provided to mint `amount` number of tokens\\n    modifier paymentProvided(uint256 amount) {\\n        require(\\n            msg.value >= amount * _deploymentConfig.mintPrice,\\n            \\\"Payment too small\\\"\\n        );\\n        _;\\n    }\\n\\n    /***********************\\n     * Convenience getters *\\n     ***********************/\\n\\n    function maxSupply() public view returns (uint256) {\\n        return _deploymentConfig.maxSupply;\\n    }\\n\\n    function reservedSupply() public view returns (uint256) {\\n        return _deploymentConfig.reservedSupply;\\n    }\\n\\n    function mintPrice() public view returns (uint256) {\\n        return _deploymentConfig.mintPrice;\\n    }\\n\\n    function tokensPerMint() public view returns (uint256) {\\n        return _deploymentConfig.tokensPerMint;\\n    }\\n\\n    function treasuryAddress() public view returns (address) {\\n        return _deploymentConfig.treasuryAddress;\\n    }\\n\\n    function publicMintStart() public view returns (uint256) {\\n        return _runtimeConfig.publicMintStart;\\n    }\\n\\n    function presaleMintStart() public view returns (uint256) {\\n        return _runtimeConfig.presaleMintStart;\\n    }\\n\\n    function presaleMerkleRoot() public view returns (bytes32) {\\n        return _runtimeConfig.presaleMerkleRoot;\\n    }\\n\\n    function baseURI() public view returns (string memory) {\\n        return _runtimeConfig.baseURI;\\n    }\\n\\n    function metadataUpdatable() public view returns (bool) {\\n        return _runtimeConfig.metadataUpdatable;\\n    }\\n\\n    function prerevealTokenURI() public view returns (string memory) {\\n        return _runtimeConfig.prerevealTokenURI;\\n    }\\n}\\n\",\"keccak256\":\"0x28848639c9778aef68c0c05d0d2ca6d3e5c007258848e7df7c5d2ea804716de0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004859380380620048598339810160408190526200003491620008b8565b604080516020808201808452600080845284519283019094528382528251929391926200006392919062000613565b5080516200007990600190602084019062000613565b5050601a805460ff19169055506200009282826200009a565b505062000a08565b600754610100900460ff16620000b75760075460ff1615620000c1565b620000c16200035b565b6200012a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600754610100900460ff161580156200014d576007805461ffff19166101011790555b601a5460ff1615620001a25760405162461bcd60e51b815260206004820152601560248201527f43616e6e6f7420626520696e697469616c697a65640000000000000000000000604482015260640162000121565b620001ad8362000379565b620001c860008051602062004839833981519152336200055f565b620001ed6000805160206200483983398151915284604001516200055f60201b60201c565b604083015162000200906000906200055f565b8251805184916012916200021c91839160209091019062000613565b50602082810151805162000237926001850192019062000613565b5060408201516002820180546001600160a01b03199081166001600160a01b0393841617909155606084015160038401556080840151600484015560a0840151600584015560c0840151600684015560e090930151600790920180549093169116179055815180518391600a91620002b791839160209091019062000613565b5060208281015160018301805460ff1916911515919091179055604083015160028301556060830151600383015560808301518051620002fe926004850192019062000613565b5060a0820151600582015560c0820151600682015560e090910151600790910180546001600160a01b0319166001600160a01b039092169190911790556080830151600955801562000356576007805461ff00191690555b505050565b600062000373306200060460201b62001b611760201c565b15905090565b6000816060015111620003cf5760405162461bcd60e51b815260206004820152601f60248201527f4d6178696d756d20737570706c79206d757374206265206e6f6e2d7a65726f00604482015260640162000121565b60008160c0015111620004255760405162461bcd60e51b815260206004820181905260248201527f546f6b656e7320706572206d696e74206d757374206265206e6f6e2d7a65726f604482015260640162000121565b60e08101516001600160a01b0316620004955760405162461bcd60e51b815260206004820152602b60248201527f547265617375727920616464726573732063616e6e6f7420626520746865206e60448201526a756c6c206164647265737360a81b606482015260840162000121565b60408101516001600160a01b0316620004f15760405162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374206d757374206861766520616e206f776e65720000000000604482015260640162000121565b8060600151816080015111156200055c5760405162461bcd60e51b815260206004820152602860248201527f52657365727665206d757374206265206c657373207468616e206d6178696d756044820152676d20737570706c7960c01b606482015260840162000121565b50565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16620006005760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620005bf3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6001600160a01b03163b151590565b8280546200062190620009cb565b90600052602060002090601f01602090048101928262000645576000855562000690565b82601f106200066057805160ff191683800117855562000690565b8280016001018555821562000690579182015b828111156200069057825182559160200191906001019062000673565b506200069e929150620006a2565b5090565b5b808211156200069e5760008155600101620006a3565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b0381118282101715620006f557620006f5620006b9565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620007265762000726620006b9565b604052919050565b600082601f8301126200074057600080fd5b81516001600160401b038111156200075c576200075c620006b9565b602062000772601f8301601f19168201620006fb565b82815285828487010111156200078757600080fd5b60005b83811015620007a75785810183015182820184015282016200078a565b83811115620007b95760008385840101525b5095945050505050565b80516001600160a01b0381168114620007db57600080fd5b919050565b80518015158114620007db57600080fd5b600061010082840312156200080557600080fd5b6200080f620006cf565b82519091506001600160401b03808211156200082a57600080fd5b62000838858386016200072e565b83526200084860208501620007e0565b6020840152604084015160408401526060840151606084015260808401519150808211156200087657600080fd5b5062000885848285016200072e565b60808301525060a082015160a082015260c082015160c0820152620008ad60e08301620007c3565b60e082015292915050565b60008060408385031215620008cc57600080fd5b82516001600160401b0380821115620008e457600080fd5b908401906101008287031215620008fa57600080fd5b62000904620006cf565b8251828111156200091457600080fd5b62000922888286016200072e565b8252506020830151828111156200093857600080fd5b62000946888286016200072e565b6020830152506200095a60408401620007c3565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526200099560e08401620007c3565b60e08201526020860151909450915080821115620009b257600080fd5b50620009c185828601620007f1565b9150509250929050565b600181811c90821680620009e057607f821691505b6020821081141562000a0257634e487b7160e01b600052602260045260246000fd5b50919050565b613e218062000a186000396000f3fe6080604052600436106102c95760003560e01c806370a0823111610175578063b5106add116100dc578063e3e1e8ef11610095578063eec1b5d51161006f578063eec1b5d51461084a578063f2fde38b1461086a578063f4ad0f971461088a578063ffa1ad741461089f57600080fd5b8063e3e1e8ef146107d9578063e8a3d485146107ec578063e985e9c51461080157600080fd5b8063b5106add14610726578063b88d4fde14610746578063c5f956af14610766578063c87b56dd14610784578063d547741f146107a4578063d5abeb01146107c457600080fd5b806391d148541161012e57806391d148541461068957806395d89b41146106a9578063a0712d68146106be578063a217fddf146106d1578063a22cb465146106e6578063b0ea18021461070657600080fd5b806370a08231146105df57806375b238fc146105ff5780637ecc2b5614610621578063877bb1ae146106365780638cfec4c0146106565780638da5cb5b1461066b57600080fd5b806336568abe1161023457806353135ca0116101ed5780635c629f4c116101c75780635c629f4c1461057f5780636352211e146105955780636817c76c146105b55780636c0360eb146105ca57600080fd5b806353135ca0146105265780635a23dd991461053d5780635a9b0b891461055d57600080fd5b806336568abe1461048f57806342842e0e146104af57806344d19d2b146104cf5780634653124b146104e4578063476343ee146104f95780634e6f9dd61461050e57600080fd5b806322212e2b1161028657806322212e2b146103b457806323b872dd146103c9578063248a9ca3146103e95780632a55205a146104195780632f2ff15d1461045857806331f9c9191461047857600080fd5b806301ffc9a7146102ce57806306fdde03146103035780630807b9e214610325578063081812fc14610344578063095ea7b31461037c57806318160ddd1461039e575b600080fd5b3480156102da57600080fd5b506102ee6102e9366004612f0c565b6108b5565b60405190151581526020015b60405180910390f35b34801561030f57600080fd5b506103186108f0565b6040516102fa9190612f81565b34801561033157600080fd5b506018545b6040519081526020016102fa565b34801561035057600080fd5b5061036461035f366004612f94565b610985565b6040516001600160a01b0390911681526020016102fa565b34801561038857600080fd5b5061039c610397366004612fd2565b610a1f565b005b3480156103aa57600080fd5b5061033660085481565b3480156103c057600080fd5b50600f54610336565b3480156103d557600080fd5b5061039c6103e4366004612ffe565b610b35565b3480156103f557600080fd5b50610336610404366004612f94565b60009081526006602052604090206001015490565b34801561042557600080fd5b5061043961043436600461303f565b610b66565b604080516001600160a01b0390931683526020830191909152016102fa565b34801561046457600080fd5b5061039c610473366004613061565b610b9d565b34801561048457600080fd5b50600c5442116102ee565b34801561049b57600080fd5b5061039c6104aa366004613061565b610bc3565b3480156104bb57600080fd5b5061039c6104ca366004612ffe565b610c41565b3480156104db57600080fd5b50601654610336565b3480156104f057600080fd5b50600d54610336565b34801561050557600080fd5b5061039c610c5c565b34801561051a57600080fd5b50600b5460ff166102ee565b34801561053257600080fd5b50600d5442116102ee565b34801561054957600080fd5b506102ee6105583660046130dc565b610c8e565b34801561056957600080fd5b50610572610d6c565b6040516102fa91906131b3565b34801561058b57600080fd5b5061033660095481565b3480156105a157600080fd5b506103646105b0366004612f94565b61108e565b3480156105c157600080fd5b50601754610336565b3480156105d657600080fd5b50610318611105565b3480156105eb57600080fd5b506103366105fa36600461327b565b611117565b34801561060b57600080fd5b50610336600080516020613dcc83398151915281565b34801561062d57600080fd5b5061033661119e565b34801561064257600080fd5b5061039c610651366004613298565b6111c3565b34801561066257600080fd5b50600c54610336565b34801561067757600080fd5b506014546001600160a01b0316610364565b34801561069557600080fd5b506102ee6106a4366004613061565b6111f8565b3480156106b557600080fd5b50610318611223565b61039c6106cc366004612f94565b611235565b3480156106dd57600080fd5b50610336600081565b3480156106f257600080fd5b5061039c6107013660046132ec565b6112e2565b34801561071257600080fd5b5061039c610721366004612fd2565b6112ed565b34801561073257600080fd5b5061039c61074136600461327b565b611370565b34801561075257600080fd5b5061039c6107613660046133ce565b611464565b34801561077257600080fd5b506019546001600160a01b0316610364565b34801561079057600080fd5b5061031861079f366004612f94565b611496565b3480156107b057600080fd5b5061039c6107bf366004613061565b6115ce565b3480156107d057600080fd5b50601554610336565b61039c6107e736600461344d565b6115f4565b3480156107f857600080fd5b50610318611712565b34801561080d57600080fd5b506102ee61081c36600461347f565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561085657600080fd5b5061039c610865366004613586565b61178f565b34801561087657600080fd5b5061039c61088536600461327b565b611a1d565b34801561089657600080fd5b50610318611b4f565b3480156108ab57600080fd5b506103366127d881565b60006108c082611b70565b806108cf57506108cf82611bc0565b806108ea575063152a902d60e11b6001600160e01b03198316145b92915050565b60606012600001805461090290613686565b80601f016020809104026020016040519081016040528092919081815260200182805461092e90613686565b801561097b5780601f106109505761010080835404028352916020019161097b565b820191906000526020600020905b81548152906001019060200180831161095e57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610a035760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610a2a8261108e565b9050806001600160a01b0316836001600160a01b03161415610a985760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016109fa565b336001600160a01b0382161480610ab45750610ab4813361081c565b610b265760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109fa565b610b308383611bf5565b505050565b610b3f3382611c63565b610b5b5760405162461bcd60e51b81526004016109fa906136c1565b610b30838383611d5a565b6011546010546001600160a01b039091169060009061271090610b8a908590613728565b610b94919061375d565b90509250929050565b600082815260066020526040902060010154610bb98133611ef6565b610b308383611f5a565b6001600160a01b0381163314610c335760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016109fa565b610c3d8282611fe0565b5050565b610b3083838360405180602001604052806000815250611464565b600080516020613dcc833981519152610c758133611ef6565b601954610c8b906001600160a01b031647612047565b50565b6001600160a01b0383166000908152601b602052604081205460ff1615610ce85760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b60448201526064016109fa565b6040516bffffffffffffffffffffffff19606086901b166020820152600090603401604051602081830303815290604052805190602001209050610d6384848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600f549150849050612160565b95945050505050565b610d74612d91565b6127d881526040805161010081019091526012805482908290610d9690613686565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc290613686565b8015610e0f5780601f10610de457610100808354040283529160200191610e0f565b820191906000526020600020905b815481529060010190602001808311610df257829003601f168201915b50505050508152602001600182018054610e2890613686565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5490613686565b8015610ea15780601f10610e7657610100808354040283529160200191610ea1565b820191906000526020600020905b815481529060010190602001808311610e8457829003601f168201915b505050918352505060028201546001600160a01b0390811660208084019190915260038401546040808501919091526004850154606085015260058501546080850152600685015460a085015260079094015490911660c09092019190915283019190915280516101008101909152600a805482908290610f2190613686565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4d90613686565b8015610f9a5780601f10610f6f57610100808354040283529160200191610f9a565b820191906000526020600020905b815481529060010190602001808311610f7d57829003601f168201915b5050509183525050600182015460ff16151560208201526002820154604082015260038201546060820152600482018054608090920191610fda90613686565b80601f016020809104026020016040519081016040528092919081815260200182805461100690613686565b80156110535780601f1061102857610100808354040283529160200191611053565b820191906000526020600020905b81548152906001019060200180831161103657829003601f168201915b50505091835250506005820154602082015260068201546040808301919091526007909201546001600160a01b031660609091015282015290565b6000818152600260205260408120546001600160a01b0316806108ea5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016109fa565b6060600a600001805461090290613686565b60006001600160a01b0382166111825760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016109fa565b506001600160a01b031660009081526003602052604090205490565b600954600854601554600092916111b491613771565b6111be9190613771565b905090565b600080516020613dcc8339815191526111dc8133611ef6565b6111e582612176565b81600a6111f282826138f6565b50505050565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606012600101805461090290613686565b60175481906112449082613728565b3410156112875760405162461bcd60e51b815260206004820152601160248201527014185e5b595b9d081d1bdbc81cdb585b1b607a1b60448201526064016109fa565b600c5442116112d85760405162461bcd60e51b815260206004820152601b60248201527f4d696e74696e6720686173206e6f74207374617274656420796574000000000060448201526064016109fa565b610c3d33836122d1565b610c3d3383836123b1565b600080516020613dcc8339815191526113068133611ef6565b60095482111561134e5760405162461bcd60e51b8152602060048201526013602482015272139bdd08195b9bdd59da081c995cd95c9d9959606a1b60448201526064016109fa565b81600960008282546113609190613771565b90915550610b30905083836122d1565b600080516020613dcc8339815191526113898133611ef6565b6113a1600080516020613dcc833981519152836111f8565b156113e15760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c9030b71030b236b4b760811b60448201526064016109fa565b6014546001600160a01b03163314156114345760405162461bcd60e51b81526020600482015260156024820152740557365207472616e736665724f776e65727368697605c1b60448201526064016109fa565b61144c600080516020613dcc83398151915233611fe0565b610c3d600080516020613dcc83398151915283611f5a565b61146e3383611c63565b61148a5760405162461bcd60e51b81526004016109fa906136c1565b6111f284848484612480565b6000818152600260205260409020546060906001600160a01b03166114f45760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109fa565b6000600a600001805461150690613686565b90501161159d57600e805461151a90613686565b80601f016020809104026020016040519081016040528092919081815260200182805461154690613686565b80156115935780601f1061156857610100808354040283529160200191611593565b820191906000526020600020905b81548152906001019060200180831161157657829003601f168201915b50505050506108ea565b600a6115a8836124b3565b6040516020016115b9929190613acc565b60405160208183030381529060405292915050565b6000828152600660205260409020600101546115ea8133611ef6565b610b308383611fe0565b60175483906116039082613728565b3410156116465760405162461bcd60e51b815260206004820152601160248201527014185e5b595b9d081d1bdbc81cdb585b1b607a1b60448201526064016109fa565b600d5442116116975760405162461bcd60e51b815260206004820152601b60248201527f50726573616c6520686173206e6f74207374617274656420796574000000000060448201526064016109fa565b6116a2338484610c8e565b6116ee5760405162461bcd60e51b815260206004820152601b60248201527f4e6f742077686974656c697374656420666f722070726573616c65000000000060448201526064016109fa565b336000818152601b60205260409020805460ff191660011790556111f290856122d1565b60606000611763611727600a600601546124b3565b60115461173e906001600160a01b031660146125b0565b60405160200161174f929190613af1565b604051602081830303815290604052612752565b90506000816040516020016117789190613b78565b60408051601f198184030181529190529392505050565b600754610100900460ff166117aa5760075460ff16156117ae565b303b155b6118115760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109fa565b600754610100900460ff16158015611833576007805461ffff19166101011790555b601a5460ff161561187e5760405162461bcd60e51b815260206004820152601560248201527410d85b9b9bdd081899481a5b9a5d1a585b1a5e9959605a1b60448201526064016109fa565b611887836128b7565b61189f600080516020613dcc83398151915233611f5a565b6118bb600080516020613dcc8339815191528460400151611f5a565b6118cc6000801b8460400151611f5a565b8251805184916012916118e6918391602090910190612e5d565b5060208281015180516118ff9260018501920190612e5d565b5060408201516002820180546001600160a01b03199081166001600160a01b0393841617909155606084015160038401556080840151600484015560a0840151600584015560c0840151600684015560e090930151600790920180549093169116179055815180518391600a9161197d918391602090910190612e5d565b5060208281015160018301805460ff19169115159190911790556040830151600283015560608301516003830155608083015180516119c29260048501920190612e5d565b5060a0820151600582015560c0820151600682015560e090910151600790910180546001600160a01b0319166001600160a01b0390921691909117905560808301516009558015610b30576007805461ff0019169055505050565b6000611a298133611ef6565b6014546001600160a01b0383811691161415611a7b5760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c903a34329037bbb732b960791b60448201526064016109fa565b601454611aa090600080516020613dcc833981519152906001600160a01b0316611fe0565b601454611ab8906000906001600160a01b0316611fe0565b601480546001600160a01b038481166001600160a01b0319831681179093551690611af290600080516020613dcc83398151915290611f5a565b601454611b0a906000906001600160a01b0316611f5a565b826001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b6060600a600401805461090290613686565b6001600160a01b03163b151590565b60006001600160e01b031982166380ac58cd60e01b1480611ba157506001600160e01b03198216635b5e139f60e01b145b806108ea57506301ffc9a760e01b6001600160e01b03198316146108ea565b60006001600160e01b03198216637965db0b60e01b14806108ea575063152a902d60e11b6001600160e01b03198316146108ea565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611c2a8261108e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611cdc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109fa565b6000611ce78361108e565b9050806001600160a01b0316846001600160a01b03161480611d225750836001600160a01b0316611d1784610985565b6001600160a01b0316145b80611d5257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611d6d8261108e565b6001600160a01b031614611dd15760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016109fa565b6001600160a01b038216611e335760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109fa565b611e3e600082611bf5565b6001600160a01b0383166000908152600360205260408120805460019290611e67908490613771565b90915550506001600160a01b0382166000908152600360205260408120805460019290611e95908490613bbd565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611f0082826111f8565b610c3d57611f18816001600160a01b031660146125b0565b611f238360206125b0565b604051602001611f34929190613bd5565b60408051601f198184030181529082905262461bcd60e51b82526109fa91600401612f81565b611f6482826111f8565b610c3d5760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f9c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611fea82826111f8565b15610c3d5760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b804710156120975760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016109fa565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146120e4576040519150601f19603f3d011682016040523d82523d6000602084013e6120e9565b606091505b5050905080610b305760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016109fa565b60008261216d8584612a90565b14949350505050565b61271060c082013511156121c15760405162461bcd60e51b81526020600482015260126024820152710a4def2c2d8e8d2cae640e8dede40d0d2ced60731b60448201526064016109fa565b600b5460ff16156121cf5750565b6121df6040820160208301613c4a565b600b5460ff161515901515146122375760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420756e667265657a65206d65746164617461000000000000000060448201526064016109fa565b6122418180613788565b604051602001612252929190613c67565b60408051601f198184030181529082905280516020918201209161227991600a9101613c77565b6040516020818303038152906040528051906020012014610c8b5760405162461bcd60e51b815260206004820152601260248201527126b2ba30b230ba309034b990333937bd32b760711b60448201526064016109fa565b6018548111156123165760405162461bcd60e51b815260206004820152601060248201526f416d6f756e7420746f6f206c6172676560801b60448201526064016109fa565b61231e61119e565b8111156123665760405162461bcd60e51b8152602060048201526016602482015275139bdd08195b9bdd59da081d1bdad95b9cc81b19599d60521b60448201526064016109fa565b80600860008282546123789190613bbd565b90915550600190505b818111610b305761239f838260085461239a9190613771565b612b04565b806123a981613c83565b915050612381565b816001600160a01b0316836001600160a01b031614156124135760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109fa565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61248b848484611d5a565b61249784848484612b1e565b6111f25760405162461bcd60e51b81526004016109fa90613c9e565b6060816124d75750506040805180820190915260018152600360fc1b602082015290565b8160005b811561250157806124eb81613c83565b91506124fa9050600a8361375d565b91506124db565b6000816001600160401b0381111561251b5761251b61331a565b6040519080825280601f01601f191660200182016040528015612545576020820181803683370190505b5090505b8415611d525761255a600183613771565b9150612567600a86613cf0565b612572906030613bbd565b60f81b81838151811061258757612587613d04565b60200101906001600160f81b031916908160001a9053506125a9600a8661375d565b9450612549565b606060006125bf836002613728565b6125ca906002613bbd565b6001600160401b038111156125e1576125e161331a565b6040519080825280601f01601f19166020018201604052801561260b576020820181803683370190505b509050600360fc1b8160008151811061262657612626613d04565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061265557612655613d04565b60200101906001600160f81b031916908160001a9053506000612679846002613728565b612684906001613bbd565b90505b60018111156126fc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106126b8576126b8613d04565b1a60f81b8282815181106126ce576126ce613d04565b60200101906001600160f81b031916908160001a90535060049490941c936126f581613d1a565b9050612687565b50831561274b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109fa565b9392505050565b805160609080612772575050604080516020810190915260008152919050565b60006003612781836002613bbd565b61278b919061375d565b612796906004613728565b905060006127a5826020613bbd565b6001600160401b038111156127bc576127bc61331a565b6040519080825280601f01601f1916602001820160405280156127e6576020820181803683370190505b5090506000604051806060016040528060408152602001613d8c604091399050600181016020830160005b86811015612872576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101612811565b50600386066001811461288c576002811461289d576128a9565b613d3d60f01b6001198301526128a9565b603d60f81b6000198301525b505050918152949350505050565b600081606001511161290b5760405162461bcd60e51b815260206004820152601f60248201527f4d6178696d756d20737570706c79206d757374206265206e6f6e2d7a65726f0060448201526064016109fa565b60008160c001511161295f5760405162461bcd60e51b815260206004820181905260248201527f546f6b656e7320706572206d696e74206d757374206265206e6f6e2d7a65726f60448201526064016109fa565b60e08101516001600160a01b03166129cd5760405162461bcd60e51b815260206004820152602b60248201527f547265617375727920616464726573732063616e6e6f7420626520746865206e60448201526a756c6c206164647265737360a81b60648201526084016109fa565b60408101516001600160a01b0316612a275760405162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374206d757374206861766520616e206f776e6572000000000060448201526064016109fa565b806060015181608001511115610c8b5760405162461bcd60e51b815260206004820152602860248201527f52657365727665206d757374206265206c657373207468616e206d6178696d756044820152676d20737570706c7960c01b60648201526084016109fa565b600081815b8451811015612afc576000858281518110612ab257612ab2613d04565b60200260200101519050808311612ad85760008381526020829052604090209250612ae9565b600081815260208490526040902092505b5080612af481613c83565b915050612a95565b509392505050565b610c3d828260405180602001604052806000815250612c1c565b60006001600160a01b0384163b15612c1157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612b62903390899088908890600401613d31565b6020604051808303816000875af1925050508015612b9d575060408051601f3d908101601f19168201909252612b9a91810190613d6e565b60015b612bf7573d808015612bcb576040519150601f19603f3d011682016040523d82523d6000602084013e612bd0565b606091505b508051612bef5760405162461bcd60e51b81526004016109fa90613c9e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d52565b506001949350505050565b612c268383612c4f565b612c336000848484612b1e565b610b305760405162461bcd60e51b81526004016109fa90613c9e565b6001600160a01b038216612ca55760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109fa565b6000818152600260205260409020546001600160a01b031615612d0a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109fa565b6001600160a01b0382166000908152600360205260408120805460019290612d33908490613bbd565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b604051806060016040528060008152602001612dfd604051806101000160405280606081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b8152602001612e5860405180610100016040528060608152602001600015158152602001600081526020016000815260200160608152602001600080191681526020016000815260200160006001600160a01b031681525090565b905290565b828054612e6990613686565b90600052602060002090601f016020900481019282612e8b5760008555612ed1565b82601f10612ea457805160ff1916838001178555612ed1565b82800160010185558215612ed1579182015b82811115612ed1578251825591602001919060010190612eb6565b50612edd929150612ee1565b5090565b5b80821115612edd5760008155600101612ee2565b6001600160e01b031981168114610c8b57600080fd5b600060208284031215612f1e57600080fd5b813561274b81612ef6565b60005b83811015612f44578181015183820152602001612f2c565b838111156111f25750506000910152565b60008151808452612f6d816020860160208601612f29565b601f01601f19169290920160200192915050565b60208152600061274b6020830184612f55565b600060208284031215612fa657600080fd5b5035919050565b6001600160a01b0381168114610c8b57600080fd5b8035612fcd81612fad565b919050565b60008060408385031215612fe557600080fd5b8235612ff081612fad565b946020939093013593505050565b60008060006060848603121561301357600080fd5b833561301e81612fad565b9250602084013561302e81612fad565b929592945050506040919091013590565b6000806040838503121561305257600080fd5b50508035926020909101359150565b6000806040838503121561307457600080fd5b82359150602083013561308681612fad565b809150509250929050565b60008083601f8401126130a357600080fd5b5081356001600160401b038111156130ba57600080fd5b6020830191508360208260051b85010111156130d557600080fd5b9250929050565b6000806000604084860312156130f157600080fd5b83356130fc81612fad565b925060208401356001600160401b0381111561311757600080fd5b61312386828701613091565b9497909650939450505050565b6000610100825181855261314682860182612f55565b9150506020830151151560208501526040830151604085015260608301516060850152608083015184820360808601526131808282612f55565b60a0858101519087015260c0808601519087015260e0948501516001600160a01b03169490950193909352509192915050565b6020815281516020820152600060208301516060604084015280516101008060808601526131e5610180860183612f55565b91506020830151607f198684030160a08701526132028382612f55565b92505060018060a01b0360408401511660c0860152606083015160e08601526080830151818601525060a082015161012085015260c082015161014085015260e0820151915061325e6101608501836001600160a01b03169052565b6040850151848203601f190160608601529150610d638183613130565b60006020828403121561328d57600080fd5b813561274b81612fad565b6000602082840312156132aa57600080fd5b81356001600160401b038111156132c057600080fd5b8201610100818503121561274b57600080fd5b8015158114610c8b57600080fd5b8035612fcd816132d3565b600080604083850312156132ff57600080fd5b823561330a81612fad565b91506020830135613086816132d3565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b03811182821017156133535761335361331a565b60405290565b60006001600160401b03808411156133735761337361331a565b604051601f8501601f19908116603f0116810190828211818310171561339b5761339b61331a565b816040528093508581528686860111156133b457600080fd5b858560208301376000602087830101525050509392505050565b600080600080608085870312156133e457600080fd5b84356133ef81612fad565b935060208501356133ff81612fad565b92506040850135915060608501356001600160401b0381111561342157600080fd5b8501601f8101871361343257600080fd5b61344187823560208401613359565b91505092959194509250565b60008060006040848603121561346257600080fd5b8335925060208401356001600160401b0381111561311757600080fd5b6000806040838503121561349257600080fd5b823561349d81612fad565b9150602083013561308681612fad565b600082601f8301126134be57600080fd5b61274b83833560208501613359565b600061010082840312156134e057600080fd5b6134e8613330565b905081356001600160401b038082111561350157600080fd5b61350d858386016134ad565b835261351b602085016132e1565b60208401526040840135604084015260608401356060840152608084013591508082111561354857600080fd5b50613555848285016134ad565b60808301525060a082013560a082015260c082013560c082015261357b60e08301612fc2565b60e082015292915050565b6000806040838503121561359957600080fd5b82356001600160401b03808211156135b057600080fd5b9084019061010082870312156135c557600080fd5b6135cd613330565b8235828111156135dc57600080fd5b6135e8888286016134ad565b8252506020830135828111156135fd57600080fd5b613609888286016134ad565b60208301525061361b60408401612fc2565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015261365460e08401612fc2565b60e08201529350602085013591508082111561366f57600080fd5b5061367c858286016134cd565b9150509250929050565b600181811c9082168061369a57607f821691505b602082108114156136bb57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561374257613742613712565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261376c5761376c613747565b500490565b60008282101561378357613783613712565b500390565b6000808335601e1984360301811261379f57600080fd5b8301803591506001600160401b038211156137b957600080fd5b6020019150368190038213156130d557600080fd5b601f821115610b3057600081815260208120601f850160051c810160208610156137f55750805b601f850160051c820191505b8181101561381457828155600101613801565b505050505050565b6001600160401b038311156138335761383361331a565b613847836138418354613686565b836137ce565b6000601f84116001811461387b57600085156138635750838201355b600019600387901b1c1916600186901b1783556138d5565b600083815260209020601f19861690835b828110156138ac578685013582556020948501946001909201910161388c565b50868210156138c95760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600081356108ea816132d3565b600081356108ea81612fad565b6139008283613788565b6001600160401b038111156139175761391761331a565b61392b816139258554613686565b856137ce565b6000601f82116001811461395f57600083156139475750838201355b600019600385901b1c1916600184901b1785556139b9565b600085815260209020601f19841690835b828110156139905786850135825560209485019460019092019101613970565b50848210156139ad5760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506139e56139cc602084016138dc565b6001830160ff1981541660ff8315151681178255505050565b6040820135600282015560608201356003820155613a066080830183613788565b613a1481836004860161381c565b505060a0820135600582015560c08201356006820155610c3d613a3960e084016138e9565b6007830180546001600160a01b0319166001600160a01b0392909216919091179055565b60008154613a6a81613686565b60018281168015613a825760018114613a9357613ac2565b60ff19841687528287019450613ac2565b8560005260208060002060005b85811015613ab95781548a820152908401908201613aa0565b50505082870194505b5050505092915050565b6000613ad88285613a5d565b8351613ae8818360208801612f29565b01949350505050565b7f7b2273656c6c65725f6665655f62617369735f706f696e7473223a2000000000815260008351613b2981601c850160208801612f29565b731610113332b2afb932b1b4b834b2b73a111d101160611b601c918401918201528351613b5d816030840160208801612f29565b61227d60f01b60309290910191820152603201949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251613bb081601d850160208701612f29565b91909101601d0192915050565b60008219821115613bd057613bd0613712565b500190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613c0d816017850160208801612f29565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613c3e816028840160208801612f29565b01602801949350505050565b600060208284031215613c5c57600080fd5b813561274b816132d3565b8183823760009101908152919050565b600061274b8284613a5d565b6000600019821415613c9757613c97613712565b5060010190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600082613cff57613cff613747565b500690565b634e487b7160e01b600052603260045260246000fd5b600081613d2957613d29613712565b506000190190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613d6490830184612f55565b9695505050505050565b600060208284031215613d8057600080fd5b815161274b81612ef656fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220e5fa4ff9db491ebc83a8b32192e2851d1fda09fca931d51e62f6661e1569c6ba64736f6c634300080b0033a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
  "deployedBytecode": "0x6080604052600436106102c95760003560e01c806370a0823111610175578063b5106add116100dc578063e3e1e8ef11610095578063eec1b5d51161006f578063eec1b5d51461084a578063f2fde38b1461086a578063f4ad0f971461088a578063ffa1ad741461089f57600080fd5b8063e3e1e8ef146107d9578063e8a3d485146107ec578063e985e9c51461080157600080fd5b8063b5106add14610726578063b88d4fde14610746578063c5f956af14610766578063c87b56dd14610784578063d547741f146107a4578063d5abeb01146107c457600080fd5b806391d148541161012e57806391d148541461068957806395d89b41146106a9578063a0712d68146106be578063a217fddf146106d1578063a22cb465146106e6578063b0ea18021461070657600080fd5b806370a08231146105df57806375b238fc146105ff5780637ecc2b5614610621578063877bb1ae146106365780638cfec4c0146106565780638da5cb5b1461066b57600080fd5b806336568abe1161023457806353135ca0116101ed5780635c629f4c116101c75780635c629f4c1461057f5780636352211e146105955780636817c76c146105b55780636c0360eb146105ca57600080fd5b806353135ca0146105265780635a23dd991461053d5780635a9b0b891461055d57600080fd5b806336568abe1461048f57806342842e0e146104af57806344d19d2b146104cf5780634653124b146104e4578063476343ee146104f95780634e6f9dd61461050e57600080fd5b806322212e2b1161028657806322212e2b146103b457806323b872dd146103c9578063248a9ca3146103e95780632a55205a146104195780632f2ff15d1461045857806331f9c9191461047857600080fd5b806301ffc9a7146102ce57806306fdde03146103035780630807b9e214610325578063081812fc14610344578063095ea7b31461037c57806318160ddd1461039e575b600080fd5b3480156102da57600080fd5b506102ee6102e9366004612f0c565b6108b5565b60405190151581526020015b60405180910390f35b34801561030f57600080fd5b506103186108f0565b6040516102fa9190612f81565b34801561033157600080fd5b506018545b6040519081526020016102fa565b34801561035057600080fd5b5061036461035f366004612f94565b610985565b6040516001600160a01b0390911681526020016102fa565b34801561038857600080fd5b5061039c610397366004612fd2565b610a1f565b005b3480156103aa57600080fd5b5061033660085481565b3480156103c057600080fd5b50600f54610336565b3480156103d557600080fd5b5061039c6103e4366004612ffe565b610b35565b3480156103f557600080fd5b50610336610404366004612f94565b60009081526006602052604090206001015490565b34801561042557600080fd5b5061043961043436600461303f565b610b66565b604080516001600160a01b0390931683526020830191909152016102fa565b34801561046457600080fd5b5061039c610473366004613061565b610b9d565b34801561048457600080fd5b50600c5442116102ee565b34801561049b57600080fd5b5061039c6104aa366004613061565b610bc3565b3480156104bb57600080fd5b5061039c6104ca366004612ffe565b610c41565b3480156104db57600080fd5b50601654610336565b3480156104f057600080fd5b50600d54610336565b34801561050557600080fd5b5061039c610c5c565b34801561051a57600080fd5b50600b5460ff166102ee565b34801561053257600080fd5b50600d5442116102ee565b34801561054957600080fd5b506102ee6105583660046130dc565b610c8e565b34801561056957600080fd5b50610572610d6c565b6040516102fa91906131b3565b34801561058b57600080fd5b5061033660095481565b3480156105a157600080fd5b506103646105b0366004612f94565b61108e565b3480156105c157600080fd5b50601754610336565b3480156105d657600080fd5b50610318611105565b3480156105eb57600080fd5b506103366105fa36600461327b565b611117565b34801561060b57600080fd5b50610336600080516020613dcc83398151915281565b34801561062d57600080fd5b5061033661119e565b34801561064257600080fd5b5061039c610651366004613298565b6111c3565b34801561066257600080fd5b50600c54610336565b34801561067757600080fd5b506014546001600160a01b0316610364565b34801561069557600080fd5b506102ee6106a4366004613061565b6111f8565b3480156106b557600080fd5b50610318611223565b61039c6106cc366004612f94565b611235565b3480156106dd57600080fd5b50610336600081565b3480156106f257600080fd5b5061039c6107013660046132ec565b6112e2565b34801561071257600080fd5b5061039c610721366004612fd2565b6112ed565b34801561073257600080fd5b5061039c61074136600461327b565b611370565b34801561075257600080fd5b5061039c6107613660046133ce565b611464565b34801561077257600080fd5b506019546001600160a01b0316610364565b34801561079057600080fd5b5061031861079f366004612f94565b611496565b3480156107b057600080fd5b5061039c6107bf366004613061565b6115ce565b3480156107d057600080fd5b50601554610336565b61039c6107e736600461344d565b6115f4565b3480156107f857600080fd5b50610318611712565b34801561080d57600080fd5b506102ee61081c36600461347f565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561085657600080fd5b5061039c610865366004613586565b61178f565b34801561087657600080fd5b5061039c61088536600461327b565b611a1d565b34801561089657600080fd5b50610318611b4f565b3480156108ab57600080fd5b506103366127d881565b60006108c082611b70565b806108cf57506108cf82611bc0565b806108ea575063152a902d60e11b6001600160e01b03198316145b92915050565b60606012600001805461090290613686565b80601f016020809104026020016040519081016040528092919081815260200182805461092e90613686565b801561097b5780601f106109505761010080835404028352916020019161097b565b820191906000526020600020905b81548152906001019060200180831161095e57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610a035760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610a2a8261108e565b9050806001600160a01b0316836001600160a01b03161415610a985760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016109fa565b336001600160a01b0382161480610ab45750610ab4813361081c565b610b265760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109fa565b610b308383611bf5565b505050565b610b3f3382611c63565b610b5b5760405162461bcd60e51b81526004016109fa906136c1565b610b30838383611d5a565b6011546010546001600160a01b039091169060009061271090610b8a908590613728565b610b94919061375d565b90509250929050565b600082815260066020526040902060010154610bb98133611ef6565b610b308383611f5a565b6001600160a01b0381163314610c335760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016109fa565b610c3d8282611fe0565b5050565b610b3083838360405180602001604052806000815250611464565b600080516020613dcc833981519152610c758133611ef6565b601954610c8b906001600160a01b031647612047565b50565b6001600160a01b0383166000908152601b602052604081205460ff1615610ce85760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b60448201526064016109fa565b6040516bffffffffffffffffffffffff19606086901b166020820152600090603401604051602081830303815290604052805190602001209050610d6384848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600f549150849050612160565b95945050505050565b610d74612d91565b6127d881526040805161010081019091526012805482908290610d9690613686565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc290613686565b8015610e0f5780601f10610de457610100808354040283529160200191610e0f565b820191906000526020600020905b815481529060010190602001808311610df257829003601f168201915b50505050508152602001600182018054610e2890613686565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5490613686565b8015610ea15780601f10610e7657610100808354040283529160200191610ea1565b820191906000526020600020905b815481529060010190602001808311610e8457829003601f168201915b505050918352505060028201546001600160a01b0390811660208084019190915260038401546040808501919091526004850154606085015260058501546080850152600685015460a085015260079094015490911660c09092019190915283019190915280516101008101909152600a805482908290610f2190613686565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4d90613686565b8015610f9a5780601f10610f6f57610100808354040283529160200191610f9a565b820191906000526020600020905b815481529060010190602001808311610f7d57829003601f168201915b5050509183525050600182015460ff16151560208201526002820154604082015260038201546060820152600482018054608090920191610fda90613686565b80601f016020809104026020016040519081016040528092919081815260200182805461100690613686565b80156110535780601f1061102857610100808354040283529160200191611053565b820191906000526020600020905b81548152906001019060200180831161103657829003601f168201915b50505091835250506005820154602082015260068201546040808301919091526007909201546001600160a01b031660609091015282015290565b6000818152600260205260408120546001600160a01b0316806108ea5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016109fa565b6060600a600001805461090290613686565b60006001600160a01b0382166111825760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016109fa565b506001600160a01b031660009081526003602052604090205490565b600954600854601554600092916111b491613771565b6111be9190613771565b905090565b600080516020613dcc8339815191526111dc8133611ef6565b6111e582612176565b81600a6111f282826138f6565b50505050565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606012600101805461090290613686565b60175481906112449082613728565b3410156112875760405162461bcd60e51b815260206004820152601160248201527014185e5b595b9d081d1bdbc81cdb585b1b607a1b60448201526064016109fa565b600c5442116112d85760405162461bcd60e51b815260206004820152601b60248201527f4d696e74696e6720686173206e6f74207374617274656420796574000000000060448201526064016109fa565b610c3d33836122d1565b610c3d3383836123b1565b600080516020613dcc8339815191526113068133611ef6565b60095482111561134e5760405162461bcd60e51b8152602060048201526013602482015272139bdd08195b9bdd59da081c995cd95c9d9959606a1b60448201526064016109fa565b81600960008282546113609190613771565b90915550610b30905083836122d1565b600080516020613dcc8339815191526113898133611ef6565b6113a1600080516020613dcc833981519152836111f8565b156113e15760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c9030b71030b236b4b760811b60448201526064016109fa565b6014546001600160a01b03163314156114345760405162461bcd60e51b81526020600482015260156024820152740557365207472616e736665724f776e65727368697605c1b60448201526064016109fa565b61144c600080516020613dcc83398151915233611fe0565b610c3d600080516020613dcc83398151915283611f5a565b61146e3383611c63565b61148a5760405162461bcd60e51b81526004016109fa906136c1565b6111f284848484612480565b6000818152600260205260409020546060906001600160a01b03166114f45760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109fa565b6000600a600001805461150690613686565b90501161159d57600e805461151a90613686565b80601f016020809104026020016040519081016040528092919081815260200182805461154690613686565b80156115935780601f1061156857610100808354040283529160200191611593565b820191906000526020600020905b81548152906001019060200180831161157657829003601f168201915b50505050506108ea565b600a6115a8836124b3565b6040516020016115b9929190613acc565b60405160208183030381529060405292915050565b6000828152600660205260409020600101546115ea8133611ef6565b610b308383611fe0565b60175483906116039082613728565b3410156116465760405162461bcd60e51b815260206004820152601160248201527014185e5b595b9d081d1bdbc81cdb585b1b607a1b60448201526064016109fa565b600d5442116116975760405162461bcd60e51b815260206004820152601b60248201527f50726573616c6520686173206e6f74207374617274656420796574000000000060448201526064016109fa565b6116a2338484610c8e565b6116ee5760405162461bcd60e51b815260206004820152601b60248201527f4e6f742077686974656c697374656420666f722070726573616c65000000000060448201526064016109fa565b336000818152601b60205260409020805460ff191660011790556111f290856122d1565b60606000611763611727600a600601546124b3565b60115461173e906001600160a01b031660146125b0565b60405160200161174f929190613af1565b604051602081830303815290604052612752565b90506000816040516020016117789190613b78565b60408051601f198184030181529190529392505050565b600754610100900460ff166117aa5760075460ff16156117ae565b303b155b6118115760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109fa565b600754610100900460ff16158015611833576007805461ffff19166101011790555b601a5460ff161561187e5760405162461bcd60e51b815260206004820152601560248201527410d85b9b9bdd081899481a5b9a5d1a585b1a5e9959605a1b60448201526064016109fa565b611887836128b7565b61189f600080516020613dcc83398151915233611f5a565b6118bb600080516020613dcc8339815191528460400151611f5a565b6118cc6000801b8460400151611f5a565b8251805184916012916118e6918391602090910190612e5d565b5060208281015180516118ff9260018501920190612e5d565b5060408201516002820180546001600160a01b03199081166001600160a01b0393841617909155606084015160038401556080840151600484015560a0840151600584015560c0840151600684015560e090930151600790920180549093169116179055815180518391600a9161197d918391602090910190612e5d565b5060208281015160018301805460ff19169115159190911790556040830151600283015560608301516003830155608083015180516119c29260048501920190612e5d565b5060a0820151600582015560c0820151600682015560e090910151600790910180546001600160a01b0319166001600160a01b0390921691909117905560808301516009558015610b30576007805461ff0019169055505050565b6000611a298133611ef6565b6014546001600160a01b0383811691161415611a7b5760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c903a34329037bbb732b960791b60448201526064016109fa565b601454611aa090600080516020613dcc833981519152906001600160a01b0316611fe0565b601454611ab8906000906001600160a01b0316611fe0565b601480546001600160a01b038481166001600160a01b0319831681179093551690611af290600080516020613dcc83398151915290611f5a565b601454611b0a906000906001600160a01b0316611f5a565b826001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b6060600a600401805461090290613686565b6001600160a01b03163b151590565b60006001600160e01b031982166380ac58cd60e01b1480611ba157506001600160e01b03198216635b5e139f60e01b145b806108ea57506301ffc9a760e01b6001600160e01b03198316146108ea565b60006001600160e01b03198216637965db0b60e01b14806108ea575063152a902d60e11b6001600160e01b03198316146108ea565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611c2a8261108e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611cdc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109fa565b6000611ce78361108e565b9050806001600160a01b0316846001600160a01b03161480611d225750836001600160a01b0316611d1784610985565b6001600160a01b0316145b80611d5257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611d6d8261108e565b6001600160a01b031614611dd15760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016109fa565b6001600160a01b038216611e335760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109fa565b611e3e600082611bf5565b6001600160a01b0383166000908152600360205260408120805460019290611e67908490613771565b90915550506001600160a01b0382166000908152600360205260408120805460019290611e95908490613bbd565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611f0082826111f8565b610c3d57611f18816001600160a01b031660146125b0565b611f238360206125b0565b604051602001611f34929190613bd5565b60408051601f198184030181529082905262461bcd60e51b82526109fa91600401612f81565b611f6482826111f8565b610c3d5760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f9c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611fea82826111f8565b15610c3d5760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b804710156120975760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016109fa565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146120e4576040519150601f19603f3d011682016040523d82523d6000602084013e6120e9565b606091505b5050905080610b305760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016109fa565b60008261216d8584612a90565b14949350505050565b61271060c082013511156121c15760405162461bcd60e51b81526020600482015260126024820152710a4def2c2d8e8d2cae640e8dede40d0d2ced60731b60448201526064016109fa565b600b5460ff16156121cf5750565b6121df6040820160208301613c4a565b600b5460ff161515901515146122375760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420756e667265657a65206d65746164617461000000000000000060448201526064016109fa565b6122418180613788565b604051602001612252929190613c67565b60408051601f198184030181529082905280516020918201209161227991600a9101613c77565b6040516020818303038152906040528051906020012014610c8b5760405162461bcd60e51b815260206004820152601260248201527126b2ba30b230ba309034b990333937bd32b760711b60448201526064016109fa565b6018548111156123165760405162461bcd60e51b815260206004820152601060248201526f416d6f756e7420746f6f206c6172676560801b60448201526064016109fa565b61231e61119e565b8111156123665760405162461bcd60e51b8152602060048201526016602482015275139bdd08195b9bdd59da081d1bdad95b9cc81b19599d60521b60448201526064016109fa565b80600860008282546123789190613bbd565b90915550600190505b818111610b305761239f838260085461239a9190613771565b612b04565b806123a981613c83565b915050612381565b816001600160a01b0316836001600160a01b031614156124135760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109fa565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61248b848484611d5a565b61249784848484612b1e565b6111f25760405162461bcd60e51b81526004016109fa90613c9e565b6060816124d75750506040805180820190915260018152600360fc1b602082015290565b8160005b811561250157806124eb81613c83565b91506124fa9050600a8361375d565b91506124db565b6000816001600160401b0381111561251b5761251b61331a565b6040519080825280601f01601f191660200182016040528015612545576020820181803683370190505b5090505b8415611d525761255a600183613771565b9150612567600a86613cf0565b612572906030613bbd565b60f81b81838151811061258757612587613d04565b60200101906001600160f81b031916908160001a9053506125a9600a8661375d565b9450612549565b606060006125bf836002613728565b6125ca906002613bbd565b6001600160401b038111156125e1576125e161331a565b6040519080825280601f01601f19166020018201604052801561260b576020820181803683370190505b509050600360fc1b8160008151811061262657612626613d04565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061265557612655613d04565b60200101906001600160f81b031916908160001a9053506000612679846002613728565b612684906001613bbd565b90505b60018111156126fc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106126b8576126b8613d04565b1a60f81b8282815181106126ce576126ce613d04565b60200101906001600160f81b031916908160001a90535060049490941c936126f581613d1a565b9050612687565b50831561274b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109fa565b9392505050565b805160609080612772575050604080516020810190915260008152919050565b60006003612781836002613bbd565b61278b919061375d565b612796906004613728565b905060006127a5826020613bbd565b6001600160401b038111156127bc576127bc61331a565b6040519080825280601f01601f1916602001820160405280156127e6576020820181803683370190505b5090506000604051806060016040528060408152602001613d8c604091399050600181016020830160005b86811015612872576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101612811565b50600386066001811461288c576002811461289d576128a9565b613d3d60f01b6001198301526128a9565b603d60f81b6000198301525b505050918152949350505050565b600081606001511161290b5760405162461bcd60e51b815260206004820152601f60248201527f4d6178696d756d20737570706c79206d757374206265206e6f6e2d7a65726f0060448201526064016109fa565b60008160c001511161295f5760405162461bcd60e51b815260206004820181905260248201527f546f6b656e7320706572206d696e74206d757374206265206e6f6e2d7a65726f60448201526064016109fa565b60e08101516001600160a01b03166129cd5760405162461bcd60e51b815260206004820152602b60248201527f547265617375727920616464726573732063616e6e6f7420626520746865206e60448201526a756c6c206164647265737360a81b60648201526084016109fa565b60408101516001600160a01b0316612a275760405162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374206d757374206861766520616e206f776e6572000000000060448201526064016109fa565b806060015181608001511115610c8b5760405162461bcd60e51b815260206004820152602860248201527f52657365727665206d757374206265206c657373207468616e206d6178696d756044820152676d20737570706c7960c01b60648201526084016109fa565b600081815b8451811015612afc576000858281518110612ab257612ab2613d04565b60200260200101519050808311612ad85760008381526020829052604090209250612ae9565b600081815260208490526040902092505b5080612af481613c83565b915050612a95565b509392505050565b610c3d828260405180602001604052806000815250612c1c565b60006001600160a01b0384163b15612c1157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612b62903390899088908890600401613d31565b6020604051808303816000875af1925050508015612b9d575060408051601f3d908101601f19168201909252612b9a91810190613d6e565b60015b612bf7573d808015612bcb576040519150601f19603f3d011682016040523d82523d6000602084013e612bd0565b606091505b508051612bef5760405162461bcd60e51b81526004016109fa90613c9e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d52565b506001949350505050565b612c268383612c4f565b612c336000848484612b1e565b610b305760405162461bcd60e51b81526004016109fa90613c9e565b6001600160a01b038216612ca55760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109fa565b6000818152600260205260409020546001600160a01b031615612d0a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109fa565b6001600160a01b0382166000908152600360205260408120805460019290612d33908490613bbd565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b604051806060016040528060008152602001612dfd604051806101000160405280606081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b8152602001612e5860405180610100016040528060608152602001600015158152602001600081526020016000815260200160608152602001600080191681526020016000815260200160006001600160a01b031681525090565b905290565b828054612e6990613686565b90600052602060002090601f016020900481019282612e8b5760008555612ed1565b82601f10612ea457805160ff1916838001178555612ed1565b82800160010185558215612ed1579182015b82811115612ed1578251825591602001919060010190612eb6565b50612edd929150612ee1565b5090565b5b80821115612edd5760008155600101612ee2565b6001600160e01b031981168114610c8b57600080fd5b600060208284031215612f1e57600080fd5b813561274b81612ef6565b60005b83811015612f44578181015183820152602001612f2c565b838111156111f25750506000910152565b60008151808452612f6d816020860160208601612f29565b601f01601f19169290920160200192915050565b60208152600061274b6020830184612f55565b600060208284031215612fa657600080fd5b5035919050565b6001600160a01b0381168114610c8b57600080fd5b8035612fcd81612fad565b919050565b60008060408385031215612fe557600080fd5b8235612ff081612fad565b946020939093013593505050565b60008060006060848603121561301357600080fd5b833561301e81612fad565b9250602084013561302e81612fad565b929592945050506040919091013590565b6000806040838503121561305257600080fd5b50508035926020909101359150565b6000806040838503121561307457600080fd5b82359150602083013561308681612fad565b809150509250929050565b60008083601f8401126130a357600080fd5b5081356001600160401b038111156130ba57600080fd5b6020830191508360208260051b85010111156130d557600080fd5b9250929050565b6000806000604084860312156130f157600080fd5b83356130fc81612fad565b925060208401356001600160401b0381111561311757600080fd5b61312386828701613091565b9497909650939450505050565b6000610100825181855261314682860182612f55565b9150506020830151151560208501526040830151604085015260608301516060850152608083015184820360808601526131808282612f55565b60a0858101519087015260c0808601519087015260e0948501516001600160a01b03169490950193909352509192915050565b6020815281516020820152600060208301516060604084015280516101008060808601526131e5610180860183612f55565b91506020830151607f198684030160a08701526132028382612f55565b92505060018060a01b0360408401511660c0860152606083015160e08601526080830151818601525060a082015161012085015260c082015161014085015260e0820151915061325e6101608501836001600160a01b03169052565b6040850151848203601f190160608601529150610d638183613130565b60006020828403121561328d57600080fd5b813561274b81612fad565b6000602082840312156132aa57600080fd5b81356001600160401b038111156132c057600080fd5b8201610100818503121561274b57600080fd5b8015158114610c8b57600080fd5b8035612fcd816132d3565b600080604083850312156132ff57600080fd5b823561330a81612fad565b91506020830135613086816132d3565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b03811182821017156133535761335361331a565b60405290565b60006001600160401b03808411156133735761337361331a565b604051601f8501601f19908116603f0116810190828211818310171561339b5761339b61331a565b816040528093508581528686860111156133b457600080fd5b858560208301376000602087830101525050509392505050565b600080600080608085870312156133e457600080fd5b84356133ef81612fad565b935060208501356133ff81612fad565b92506040850135915060608501356001600160401b0381111561342157600080fd5b8501601f8101871361343257600080fd5b61344187823560208401613359565b91505092959194509250565b60008060006040848603121561346257600080fd5b8335925060208401356001600160401b0381111561311757600080fd5b6000806040838503121561349257600080fd5b823561349d81612fad565b9150602083013561308681612fad565b600082601f8301126134be57600080fd5b61274b83833560208501613359565b600061010082840312156134e057600080fd5b6134e8613330565b905081356001600160401b038082111561350157600080fd5b61350d858386016134ad565b835261351b602085016132e1565b60208401526040840135604084015260608401356060840152608084013591508082111561354857600080fd5b50613555848285016134ad565b60808301525060a082013560a082015260c082013560c082015261357b60e08301612fc2565b60e082015292915050565b6000806040838503121561359957600080fd5b82356001600160401b03808211156135b057600080fd5b9084019061010082870312156135c557600080fd5b6135cd613330565b8235828111156135dc57600080fd5b6135e8888286016134ad565b8252506020830135828111156135fd57600080fd5b613609888286016134ad565b60208301525061361b60408401612fc2565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015261365460e08401612fc2565b60e08201529350602085013591508082111561366f57600080fd5b5061367c858286016134cd565b9150509250929050565b600181811c9082168061369a57607f821691505b602082108114156136bb57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561374257613742613712565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261376c5761376c613747565b500490565b60008282101561378357613783613712565b500390565b6000808335601e1984360301811261379f57600080fd5b8301803591506001600160401b038211156137b957600080fd5b6020019150368190038213156130d557600080fd5b601f821115610b3057600081815260208120601f850160051c810160208610156137f55750805b601f850160051c820191505b8181101561381457828155600101613801565b505050505050565b6001600160401b038311156138335761383361331a565b613847836138418354613686565b836137ce565b6000601f84116001811461387b57600085156138635750838201355b600019600387901b1c1916600186901b1783556138d5565b600083815260209020601f19861690835b828110156138ac578685013582556020948501946001909201910161388c565b50868210156138c95760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600081356108ea816132d3565b600081356108ea81612fad565b6139008283613788565b6001600160401b038111156139175761391761331a565b61392b816139258554613686565b856137ce565b6000601f82116001811461395f57600083156139475750838201355b600019600385901b1c1916600184901b1785556139b9565b600085815260209020601f19841690835b828110156139905786850135825560209485019460019092019101613970565b50848210156139ad5760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506139e56139cc602084016138dc565b6001830160ff1981541660ff8315151681178255505050565b6040820135600282015560608201356003820155613a066080830183613788565b613a1481836004860161381c565b505060a0820135600582015560c08201356006820155610c3d613a3960e084016138e9565b6007830180546001600160a01b0319166001600160a01b0392909216919091179055565b60008154613a6a81613686565b60018281168015613a825760018114613a9357613ac2565b60ff19841687528287019450613ac2565b8560005260208060002060005b85811015613ab95781548a820152908401908201613aa0565b50505082870194505b5050505092915050565b6000613ad88285613a5d565b8351613ae8818360208801612f29565b01949350505050565b7f7b2273656c6c65725f6665655f62617369735f706f696e7473223a2000000000815260008351613b2981601c850160208801612f29565b731610113332b2afb932b1b4b834b2b73a111d101160611b601c918401918201528351613b5d816030840160208801612f29565b61227d60f01b60309290910191820152603201949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251613bb081601d850160208701612f29565b91909101601d0192915050565b60008219821115613bd057613bd0613712565b500190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613c0d816017850160208801612f29565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613c3e816028840160208801612f29565b01602801949350505050565b600060208284031215613c5c57600080fd5b813561274b816132d3565b8183823760009101908152919050565b600061274b8284613a5d565b6000600019821415613c9757613c97613712565b5060010190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600082613cff57613cff613747565b500690565b634e487b7160e01b600052603260045260246000fd5b600081613d2957613d29613712565b506000190190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613d6490830184612f55565b9695505050505050565b600060208284031215613d8057600080fd5b815161274b81612ef656fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220e5fa4ff9db491ebc83a8b32192e2851d1fda09fca931d51e62f6661e1569c6ba64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "contractURI()": {
        "details": "OpenSea contract metadata"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getInfo()": {
        "details": "Convenience helper"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "Need name() to support setting it in the initializer instead of constructor"
      },
      "owner()": {
        "details": "Required for easy integration with OpenSea"
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "ERC2981 token royalty info"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Need symbol() to support setting it in the initializer instead of constructor"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "updateConfig((string,bool,uint256,uint256,string,bytes32,uint256,address))": {
        "details": "Callable by admin roles only"
      },
      "withdrawFees()": {
        "details": "Callable by admin roles only"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ADMIN_ROLE()": {
        "notice": "Admin role"
      },
      "VERSION()": {
        "notice": "Contract version, semver-style uint X_YY_ZZ"
      },
      "availableSupply()": {
        "notice": "Get the number of tokens still available for minting"
      },
      "getInfo()": {
        "notice": "Get full contract information"
      },
      "initialize((string,string,address,uint256,uint256,uint256,uint256,address),(string,bool,uint256,uint256,string,bytes32,uint256,address))": {
        "notice": "Contract initializer"
      },
      "isWhitelisted(address,bytes32[])": {
        "notice": "Check if the wallet is whitelisted for the presale"
      },
      "mint(uint256)": {
        "notice": "Mint tokens"
      },
      "mintingActive()": {
        "notice": "Check if public minting is active"
      },
      "owner()": {
        "notice": "Contract owner address"
      },
      "presaleActive()": {
        "notice": "Check if presale minting is active"
      },
      "presaleMint(uint256,bytes32[])": {
        "notice": "Mint tokens if the wallet has been whitelisted"
      },
      "reserveMint(address,uint256)": {
        "notice": "Mint a token from the reserve"
      },
      "reserveRemaining()": {
        "notice": "The number of tokens remaining in the reserve"
      },
      "tokenURI(uint256)": {
        "notice": "Get the token metadata URI"
      },
      "totalSupply()": {
        "notice": "The number of currently minted tokens"
      },
      "transferAdminRights(address)": {
        "notice": "Transfer contract ownership"
      },
      "transferOwnership(address)": {
        "notice": "Transfer contract ownership"
      },
      "updateConfig((string,bool,uint256,uint256,string,bytes32,uint256,address))": {
        "notice": "Update contract configuration"
      },
      "withdrawFees()": {
        "notice": "Withdraw minting fees to the treasury address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1603,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1605,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1609,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1613,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1617,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1623,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1044,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "_roles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1039_storage)"
      },
      {
        "astId": 1510,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "_initialized",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 1513,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "_initializing",
        "offset": 1,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 4710,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "totalSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4713,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "reserveRemaining",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5123,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "_runtimeConfig",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(RuntimeConfig)4679_storage"
      },
      {
        "astId": 5126,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "_deploymentConfig",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(DeploymentConfig)4654_storage"
      },
      {
        "astId": 5129,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "_preventInitialization",
        "offset": 0,
        "slot": "26",
        "type": "t_bool"
      },
      {
        "astId": 5134,
        "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
        "label": "_presaleMinted",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1039_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1039_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DeploymentConfig)4654_storage": {
        "encoding": "inplace",
        "label": "struct NFTCollection.DeploymentConfig",
        "members": [
          {
            "astId": 4632,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4635,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4638,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4641,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "maxSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4644,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "reservedSupply",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4647,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "mintPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4650,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "tokensPerMint",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4653,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(RoleData)1039_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1036,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1038,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RuntimeConfig)4679_storage": {
        "encoding": "inplace",
        "label": "struct NFTCollection.RuntimeConfig",
        "members": [
          {
            "astId": 4657,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "baseURI",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4660,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "metadataUpdatable",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 4663,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "publicMintStart",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4666,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "presaleMintStart",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4669,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "prerevealTokenURI",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 4672,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "presaleMerkleRoot",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 4675,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "royaltiesBps",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4678,
            "contract": "contracts/deployables/NFTCollectionContract.sol:NFTCollectionContract",
            "label": "royaltiesAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}