{
  "address": "0x306b08122507bF5Cb8963d4B96741D75c95acC44",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "tokensBurnable",
              "type": "bool"
            }
          ],
          "internalType": "struct Config.Deployment",
          "name": "deploymentConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "metadataUpdatable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "tokensTransferable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Config.Runtime",
          "name": "runtimeConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address[]",
              "name": "addresses",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "frozen",
              "type": "bool"
            }
          ],
          "internalType": "struct GranularRoles.RolesAddresses[]",
          "name": "rolesAddresses",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "PermanentURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PermanentURIGlobal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_CONTRACT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_TOKEN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "freezeTokenUris",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataUpdatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mintToCaller",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeNFTPortPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensBurnable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensTransferable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "metadataUpdatable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "tokensTransferable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Config.Runtime",
          "name": "newConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address[]",
              "name": "addresses",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "frozen",
              "type": "bool"
            }
          ],
          "internalType": "struct GranularRoles.RolesAddresses[]",
          "name": "rolesAddresses",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "isRevokeNFTPortPermissions",
          "type": "bool"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenUri",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isFreezeTokenUri",
          "type": "bool"
        }
      ],
      "name": "updateTokenUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x53ed11d8c155f6ac3c4d0ee63bfb93e6f4106518d17ba6c1be560da41d6c2320",
  "receipt": {
    "to": null,
    "from": "0xE7D7696C8f11278124f39fB7cDd39fD9442D5026",
    "contractAddress": "0x306b08122507bF5Cb8963d4B96741D75c95acC44",
    "transactionIndex": 29,
    "gasUsed": "3495828",
    "logsBloom": "0x00000004000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000010000000000000000004000000000000000000000000000000000000000000000000000100000000000000000000000000000001000000000000000000000000800000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000100000000000000000000000",
    "blockHash": "0x7089dbd3d64dae38cfbaa12b665dc00b2028b01e7931c015908628730bd3d42d",
    "transactionHash": "0x53ed11d8c155f6ac3c4d0ee63bfb93e6f4106518d17ba6c1be560da41d6c2320",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 10803617,
        "transactionHash": "0x53ed11d8c155f6ac3c4d0ee63bfb93e6f4106518d17ba6c1be560da41d6c2320",
        "address": "0x306b08122507bF5Cb8963d4B96741D75c95acC44",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000e7d7696c8f11278124f39fb7cdd39fd9442d5026",
          "0x000000000000000000000000e7d7696c8f11278124f39fb7cdd39fd9442d5026"
        ],
        "data": "0x",
        "logIndex": 53,
        "blockHash": "0x7089dbd3d64dae38cfbaa12b665dc00b2028b01e7931c015908628730bd3d42d"
      }
    ],
    "blockNumber": 10803617,
    "cumulativeGasUsed": "8695886",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "name": "NFTPort",
      "symbol": "NFT",
      "owner": "0xE7D7696C8f11278124f39fB7cDd39fD9442D5026",
      "tokensBurnable": true
    },
    {
      "baseURI": "ipfs://baseURI",
      "metadataUpdatable": true,
      "tokensTransferable": true,
      "royaltiesBps": 250,
      "royaltiesAddress": "0xE7D7696C8f11278124f39fB7cDd39fD9442D5026"
    },
    []
  ],
  "numDeployments": 2,
  "solcInputHash": "ffcad1661056867c1d800da3a451c896",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"tokensBurnable\",\"type\":\"bool\"}],\"internalType\":\"struct Config.Deployment\",\"name\":\"deploymentConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tokensTransferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct Config.Runtime\",\"name\":\"runtimeConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"internalType\":\"struct GranularRoles.RolesAddresses[]\",\"name\":\"rolesAddresses\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PermanentURIGlobal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_CONTRACT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_TOKEN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezeTokenUris\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataUpdatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintToCaller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeNFTPortPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensBurnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tokensTransferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct Config.Runtime\",\"name\":\"newConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"internalType\":\"struct GranularRoles.RolesAddresses[]\",\"name\":\"rolesAddresses\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isRevokeNFTPortPermissions\",\"type\":\"bool\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenUri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isFreezeTokenUri\",\"type\":\"bool\"}],\"name\":\"updateTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721NftCustom.sol\":\"ERC721NFTCustom\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xefc3d1b4250b3d598cb6bf7886b4466d8025f24e94ac9047b7074dfad3edba10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ERC721NftCustom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./lib/GranularRoles.sol\\\";\\nimport \\\"./lib/Base64.sol\\\";\\nimport \\\"./lib/Config.sol\\\";\\n\\ncontract ERC721NFTCustom is ERC721URIStorage, GranularRoles {\\n    using Strings for uint256;\\n    uint16 constant ROYALTIES_BASIS = 10000;\\n\\n    bool public metadataUpdatable;\\n    bool public tokensBurnable;\\n    bool public tokensTransferable;\\n\\n    // Mapping of individually frozen tokens\\n    mapping (uint256 => bool) public freezeTokenUris;\\n\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    string public baseURI;\\n\\n    address public royaltiesAddress;\\n    uint256 public royaltiesBasisPoints;\\n\\n    event PermanentURI(string _value, uint256 indexed _id); // https://docs.opensea.io/docs/metadata-standards\\n    event PermanentURIGlobal();\\n\\n    constructor(\\n        Config.Deployment memory deploymentConfig,\\n        Config.Runtime memory runtimeConfig,\\n        RolesAddresses[] memory rolesAddresses\\n    ) ERC721(deploymentConfig.name, deploymentConfig.symbol) {\\n        royaltiesAddress = runtimeConfig.royaltiesAddress;\\n        royaltiesBasisPoints = runtimeConfig.royaltiesBps;\\n\\n        metadataUpdatable = runtimeConfig.metadataUpdatable;\\n        tokensBurnable = deploymentConfig.tokensBurnable;\\n        tokensTransferable = runtimeConfig.tokensTransferable;\\n\\n        baseURI = runtimeConfig.baseURI;\\n\\n        _initRoles(deploymentConfig.owner, rolesAddresses);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC721, AccessControl)\\n    returns (bool)\\n    {\\n        return ERC721.supportsInterface(interfaceId) || interfaceId == type(IERC2981).interfaceId;\\n    }\\n\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n    external\\n    view\\n    returns (address, uint256)\\n    {\\n        return (royaltiesAddress, royaltiesBasisPoints * salePrice / ROYALTIES_BASIS);\\n    }\\n\\n    function contractURI()\\n    external\\n    view\\n    returns (string memory)\\n    {\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        // solium-disable-next-line quotes\\n                        '{\\\"seller_fee_basis_points\\\": ', // solhint-disable-line quotes\\n                        royaltiesBasisPoints.toString(),\\n                        // solium-disable-next-line quotes\\n                        ', \\\"fee_recipient\\\": \\\"', // solhint-disable-line quotes\\n                        uint256(uint160(royaltiesAddress)).toHexString(20),\\n                        // solium-disable-next-line quotes\\n                        '\\\"}' // solhint-disable-line quotes\\n                    )\\n                )\\n            )\\n        );\\n\\n        string memory output = string(\\n            abi.encodePacked(\\\"data:application/json;base64,\\\", json)\\n        );\\n\\n        return output;\\n    }\\n\\n    function _baseURI()\\n    internal\\n    view\\n    virtual\\n    override(ERC721)\\n    returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function mintToCaller(address caller, uint256 tokenId, string memory tokenURI)\\n    public\\n    onlyRole(MINT_ROLE)\\n    returns (uint256)\\n    {\\n        _safeMint(caller, tokenId);\\n        _setTokenURI(tokenId, tokenURI);\\n        return tokenId;\\n    }\\n\\n    function updateTokenUri(uint256 _tokenId, string memory _tokenUri, bool _isFreezeTokenUri)\\n    public\\n    onlyRole(UPDATE_TOKEN_ROLE) {\\n        require(_exists(_tokenId), \\\"NFT: update URI query for nonexistent token\\\");\\n        require(metadataUpdatable, \\\"NFT: Token uris are frozen globally\\\");\\n        require(freezeTokenUris[_tokenId] != true, \\\"NFT: Token is frozen\\\");\\n        require(_isFreezeTokenUri || (bytes(_tokenUri).length != 0), \\\"NFT: Either _tokenUri or _isFreezeTokenUri=true required\\\");\\n\\n        if (bytes(_tokenUri).length != 0) {\\n            require(keccak256(bytes(tokenURI(_tokenId))) != keccak256(bytes(string(abi.encodePacked(_baseURI(), _tokenUri)))), \\\"NFT: New token URI is same as updated\\\");\\n            _setTokenURI(_tokenId, _tokenUri);\\n        }\\n        if (_isFreezeTokenUri) {\\n            freezeTokenUris[_tokenId] = true;\\n            emit PermanentURI(tokenURI(_tokenId), _tokenId);\\n        }\\n    }\\n\\n    function transferByOwner(\\n        address _to,\\n        uint256 _tokenId\\n    )\\n    public\\n    onlyRole(TRANSFER_ROLE) {\\n        require(tokensTransferable, \\\"NFT: Transfers by owner are disabled\\\");\\n        _safeTransfer(_owner, _to, _tokenId, \\\"\\\");\\n    }\\n\\n    function burn(uint256 _tokenId)\\n    public\\n    onlyRole(BURN_ROLE) {\\n        require(tokensBurnable, \\\"NFT: tokens burning is disabled\\\");\\n        require(_exists(_tokenId), \\\"Burn for nonexistent token\\\");\\n        require(ERC721.ownerOf(_tokenId) == _owner, \\\"NFT: tokens may be burned by owner only\\\");\\n        _burn(_tokenId);\\n    }\\n\\n    function update(\\n        Config.Runtime calldata newConfig,\\n        RolesAddresses[] memory rolesAddresses,\\n        bool isRevokeNFTPortPermissions\\n    ) public\\n    onlyRole(UPDATE_CONTRACT_ROLE) {\\n        // If metadata is frozen, baseURI cannot be updated\\n        require(\\n            metadataUpdatable ||\\n            (keccak256(abi.encodePacked(newConfig.baseURI)) ==\\n                keccak256(abi.encodePacked(baseURI))),\\n            \\\"Metadata is frozen\\\"\\n        );\\n\\n        baseURI = newConfig.baseURI;\\n        royaltiesAddress = newConfig.royaltiesAddress;\\n        royaltiesBasisPoints = newConfig.royaltiesBps;\\n\\n        if (!newConfig.tokensTransferable) {\\n            tokensTransferable = false;\\n        }\\n        if (!newConfig.metadataUpdatable && metadataUpdatable) {\\n            metadataUpdatable = false;\\n            emit PermanentURIGlobal();\\n        }\\n\\n        _updateRoles(rolesAddresses);\\n\\n        if (isRevokeNFTPortPermissions) {\\n            revokeNFTPortPermissions();\\n        }\\n    }\\n\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        require(index < balanceOf(owner), \\\"ERC721: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        require(index < totalSupply(), \\\"ERC721: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\",\"keccak256\":\"0xffd07b472cadc823d93eeb0d022f3bc86e13e61712fb1212b6c2bcde7973efe8\",\"license\":\"MIT\"},\"contracts/lib/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n                )\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0xb4d4825afc80f9fb88b0d7a306eacbed9d694e650a5d9947f15eb65f1d11d3ab\",\"license\":\"MIT\"},\"contracts/lib/Config.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Config {\\n    /// Fixed at deployment time\\n    struct Deployment {\\n        // Name of the NFT contract.\\n        string name;\\n        // Symbol of the NFT contract.\\n        string symbol;\\n        // The contract owner address. If you wish to own the contract, then set it as your wallet address.\\n        // This is also the wallet that can manage the contract on NFT marketplaces.\\n        address owner;\\n        // If true, tokens may be burned by owner. Cannot be changed later.\\n        bool tokensBurnable;\\n    }\\n\\n    /// Updatable by admins and owner\\n    struct Runtime {\\n        // Metadata base URI for tokens, NFTs minted in this contract will have metadata URI of `baseURI` + `tokenID`.\\n        // Set this to reveal token metadata.\\n        string baseURI;\\n        // If true, the base URI of the NFTs minted in the specified contract can be updated after minting (token URIs\\n        // are not frozen on the contract level). This is useful for revealing NFTs after the drop. If false, all the\\n        // NFTs minted in this contract are frozen by default which means token URIs are non-updatable.\\n        bool metadataUpdatable;\\n        // If true, tokens may be transferred by owner. Default is true. Can be only changed to false.\\n        bool tokensTransferable;\\n        // Secondary market royalties in basis points (100 bps = 1%)\\n        uint256 royaltiesBps;\\n        // Address for royalties\\n        address royaltiesAddress;\\n    }\\n}\",\"keccak256\":\"0xdfb7dacbdcf84a5369cdd753e049e91969acb1bd4342b12b3e09538b52e3c41f\",\"license\":\"MIT\"},\"contracts/lib/GranularRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nabstract contract GranularRoles is AccessControl {\\n    // Roles list\\n    // Admin role can have 2 addresses: \\n    // one address same as (_owner) which can be changed \\n    // one for NFTPort API access which can only be revoked\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    // Following roles can have multiple addresses, can be changed by admin or update contrac role\\n    bytes32 public constant MINT_ROLE = keccak256(\\\"MINT_ROLE\\\");\\n    bytes32 public constant UPDATE_CONTRACT_ROLE = keccak256(\\\"UPDATE_CONTRACT_ROLE\\\");\\n    bytes32 public constant UPDATE_TOKEN_ROLE = keccak256(\\\"UPDATE_TOKEN_ROLE\\\");\\n    bytes32 public constant BURN_ROLE = keccak256(\\\"BURN_ROLE\\\");\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n\\n    struct RolesAddresses {\\n        bytes32 role;\\n        address[] addresses;\\n        bool frozen;\\n    }\\n\\n    address internal _owner;\\n    address internal _nftPort;\\n\\n    mapping(bytes32 => address[]) internal _rolesAddressesIndexed; // Used to get roles enumeration\\n    mapping(bytes32 => bool) internal _rolesFrozen;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function transferOwnership(address newOwner) public {\\n        require(newOwner != _owner, \\\"Already the owner\\\");\\n        require(msg.sender == _owner, \\\"Only owner can transfer ownership\\\");\\n        _revokeRole(ADMIN_ROLE, _owner);\\n        address previousOwner = _owner;\\n        _owner = newOwner;\\n        _grantRole(ADMIN_ROLE, _owner);\\n        emit OwnershipTransferred(previousOwner, newOwner);\\n    }\\n\\n    function revokeNFTPortPermissions() public onlyRole(ADMIN_ROLE) {\\n        _revokeRole(ADMIN_ROLE, _nftPort);\\n        _nftPort = address(0);\\n    }\\n\\n    // Admin role has all access granted by default \\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return super.hasRole(ADMIN_ROLE, account) || super.hasRole(role, account);\\n    }\\n\\n    function _initRoles(address owner, RolesAddresses[] memory rolesAddresses) internal {\\n        _owner = owner;\\n        _nftPort = msg.sender;\\n        _grantRole(ADMIN_ROLE, _owner);\\n        _grantRole(ADMIN_ROLE, _nftPort);\\n\\n        for (uint256 roleIndex = 0; roleIndex < rolesAddresses.length; roleIndex++) {\\n            bytes32 role = rolesAddresses[roleIndex].role;\\n            require(_regularRoleValid(role), \\\"GranularRoles: Invalid rolesAddresses\\\");\\n            for(uint256 addressIndex = 0; addressIndex < rolesAddresses[roleIndex].addresses.length; addressIndex++) {\\n                _grantRole(role, rolesAddresses[roleIndex].addresses[addressIndex]);\\n                _rolesAddressesIndexed[role].push(rolesAddresses[roleIndex].addresses[addressIndex]);\\n            }\\n            if (rolesAddresses[roleIndex].frozen) {\\n                _rolesFrozen[role] = true;\\n            }\\n        }\\n    }\\n\\n    function _updateRoles(RolesAddresses[] memory rolesAddresses) internal {\\n        if (rolesAddresses.length > 0) {\\n            require(hasRole(ADMIN_ROLE, msg.sender), \\\"Granular roles: only ADMIN_ROLE can change permissions\\\");\\n            for (uint256 roleIndex = 0; roleIndex < rolesAddresses.length; roleIndex++) {\\n                bytes32 role = rolesAddresses[roleIndex].role;\\n                require(_regularRoleValid(role), \\\"GranularRoles: Invalid rolesAddresses\\\");\\n                require(!_rolesFrozen[role], \\\"GranularRoles: One of roles is frozen\\\");\\n                for(uint256 addressIndex = 0; addressIndex < _rolesAddressesIndexed[role].length; addressIndex++) {\\n                    _revokeRole(role, _rolesAddressesIndexed[role][addressIndex]);\\n                }\\n                delete _rolesAddressesIndexed[role];\\n                for(uint256 addressIndex = 0; addressIndex < rolesAddresses[roleIndex].addresses.length; addressIndex++) {\\n                    _grantRole(role, rolesAddresses[roleIndex].addresses[addressIndex]);\\n                    _rolesAddressesIndexed[role].push(rolesAddresses[roleIndex].addresses[addressIndex]);\\n                }\\n                if (rolesAddresses[roleIndex].frozen) {\\n                    _rolesFrozen[role] = true;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _regularRoleValid(bytes32 role) internal returns (bool) {\\n        return \\n            role == MINT_ROLE || \\n            role == UPDATE_CONTRACT_ROLE ||\\n            role == UPDATE_TOKEN_ROLE ||\\n            role == BURN_ROLE ||\\n            role == TRANSFER_ROLE;\\n    }\\n}\",\"keccak256\":\"0x1265358bbae5af64b1cc1faeacce606efdaad32e91ffadc5030739f43a78d764\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200450138038062004501833981016040819052620000349162000996565b825160208085015182519091620000519160009185019062000569565b5080516200006790600190602084019062000569565b5050506080820151601380546001600160a01b0319166001600160a01b03909216919091179055606080830151601455602080840151600c805493870151604087015161ffff1990951692151561ff00191692909217610100921515929092029190911762ff0000191662010000931515939093029290921790915582518051620000f792601292019062000569565b50604083015162000109908262000112565b50505062000b24565b600880546001600160a01b0384166001600160a01b0319918216811790925560098054909116331790556200015890600080516020620044e1833981519152906200038f565b6009546200018090600080516020620044e1833981519152906001600160a01b03166200038f565b60005b81518110156200038a576000828281518110620001a457620001a462000aa7565b6020026020010151600001519050620001c3816200041a60201b60201c565b620002225760405162461bcd60e51b815260206004820152602560248201527f4772616e756c6172526f6c65733a20496e76616c696420726f6c657341646472604482015264657373657360d81b606482015260840160405180910390fd5b60005b8383815181106200023a576200023a62000aa7565b6020026020010151602001515181101562000332576200029d8285858151811062000269576200026962000aa7565b602002602001015160200151838151811062000289576200028962000aa7565b60200260200101516200038f60201b60201c565b6000828152600a602052604090208451859085908110620002c257620002c262000aa7565b6020026020010151602001518281518110620002e257620002e262000aa7565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580620003298162000abd565b91505062000225565b5082828151811062000348576200034862000aa7565b6020026020010151604001511562000374576000818152600b60205260409020805460ff191660011790555b5080620003818162000abd565b91505062000183565b505050565b6200039b8282620004f1565b620004165760008281526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620003d53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c36868214806200046a57507f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f582145b806200049557507f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e682145b80620004c057507fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2282145b80620004eb57507f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c82145b92915050565b600062000519600080516020620044e1833981519152836200053e60201b620017d81760201c565b806200053757506200053783836200053e60201b620017d81760201c565b9392505050565b60009182526007602090815260408084206001600160a01b0393909316845291905290205460ff1690565b828054620005779062000ae7565b90600052602060002090601f0160209004810192826200059b5760008555620005e6565b82601f10620005b657805160ff1916838001178555620005e6565b82800160010185558215620005e6579182015b82811115620005e6578251825591602001919060010190620005c9565b50620005f4929150620005f8565b5090565b5b80821115620005f45760008155600101620005f9565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156200064a576200064a6200060f565b60405290565b604051608081016001600160401b03811182821017156200064a576200064a6200060f565b604051601f8201601f191681016001600160401b0381118282101715620006a057620006a06200060f565b604052919050565b600082601f830112620006ba57600080fd5b81516001600160401b03811115620006d657620006d66200060f565b6020620006ec601f8301601f1916820162000675565b82815285828487010111156200070157600080fd5b60005b838110156200072157858101830151828201840152820162000704565b83811115620007335760008385840101525b5095945050505050565b80516001600160a01b03811681146200075557600080fd5b919050565b805180151581146200075557600080fd5b600060a082840312156200077e57600080fd5b60405160a081016001600160401b038082118383101715620007a457620007a46200060f565b816040528293508451915080821115620007bd57600080fd5b50620007cc85828601620006a8565b825250620007dd602084016200075a565b6020820152620007f0604084016200075a565b6040820152606083015160608201526200080d608084016200073d565b60808201525092915050565b60006001600160401b038211156200083557620008356200060f565b5060051b60200190565b600082601f8301126200085157600080fd5b815160206200086a620008648362000819565b62000675565b82815260059290921b840181019181810190868411156200088a57600080fd5b8286015b848110156200098b5780516001600160401b0380821115620008b05760008081fd5b908801906060828b03601f1901811315620008cb5760008081fd5b620008d562000625565b87840151815260408085015184811115620008f05760008081fd5b85019350603f84018d13620009055760008081fd5b8884015162000918620008648262000819565b81815260059190911b85018201908a8101908f831115620009395760008081fd5b958301955b82871015620009625762000952876200073d565b8252958b0195908b01906200093e565b848c0152506200097690508584016200075a565b9082015286525050509183019183016200088e565b509695505050505050565b600080600060608486031215620009ac57600080fd5b83516001600160401b0380821115620009c457600080fd5b9085019060808288031215620009d957600080fd5b620009e362000650565b825182811115620009f357600080fd5b62000a0189828601620006a8565b82525060208301518281111562000a1757600080fd5b62000a2589828601620006a8565b60208301525062000a39604084016200073d565b604082015262000a4c606084016200075a565b6060820152602087015190955091508082111562000a6957600080fd5b62000a77878388016200076b565b9350604086015191508082111562000a8e57600080fd5b5062000a9d868287016200083f565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b600060001982141562000ae057634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168062000afc57607f821691505b6020821081141562000b1e57634e487b7160e01b600052602260045260246000fd5b50919050565b6139ad8062000b346000396000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c806370a082311161015c578063b29c097a116100ce578063e3d5207211610087578063e3d52072146105f7578063e8a3d48514610609578063e985e9c514610611578063e9a9c8501461064d578063f153c2e514610674578063f2fde38b1461067c57600080fd5b8063b29c097a1461055d578063b88d4fde14610584578063b930908f14610597578063c87b56dd146105be578063d547741f146105d1578063de374d9d146105e457600080fd5b806391d148541161012057806391d148541461050b57806395d89b411461051e578063a217fddf14610526578063a22cb4651461052e578063a2f551ec14610541578063a53a84b61461055457600080fd5b806370a082311461049c57806375b238fc146104af5780637afdcdbb146104c45780638d010db3146104d75780638da5cb5b146104fa57600080fd5b80632e628b61116101f557806342842e0e116101b957806342842e0e1461043b57806342966c681461044e5780634e6f9dd6146104615780634f6ccce71461046e5780636352211e146104815780636c0360eb1461049457600080fd5b80632e628b61146103dc5780632f2ff15d146103ef5780632f745c5914610402578063328825351461041557806336568abe1461042857600080fd5b8063206b60f911610247578063206b60f91461031357806321e92d491461033a57806323b872dd1461034d578063248a9ca3146103605780632a55205a146103835780632c23b965146103b557600080fd5b806301ffc9a71461028457806306fdde03146102ac578063081812fc146102c1578063095ea7b3146102ec57806318160ddd14610301575b600080fd5b610297610292366004612e95565b61068f565b60405190151581526020015b60405180910390f35b6102b46106bb565b6040516102a39190612f0a565b6102d46102cf366004612f1d565b61074d565b6040516001600160a01b0390911681526020016102a3565b6102ff6102fa366004612f52565b6107da565b005b6010545b6040519081526020016102a3565b6103057f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c81565b6102ff610348366004612f52565b6108f0565b6102ff61035b366004612f7c565b6109a7565b61030561036e366004612f1d565b60009081526007602052604090206001015490565b610396610391366004612fb8565b6109d8565b604080516001600160a01b0390931683526020830191909152016102a3565b6103057f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f581565b6102ff6103ea36600461307e565b610a14565b6102ff6103fd36600461322d565b610bcb565b610305610410366004612f52565b610bf0565b6013546102d4906001600160a01b031681565b6102ff61043636600461322d565b610c7c565b6102ff610449366004612f7c565b610cfa565b6102ff61045c366004612f1d565b610d15565b600c546102979060ff1681565b61030561047c366004612f1d565b610e6f565b6102d461048f366004612f1d565b610ef8565b6102b4610f6f565b6103056104aa366004613259565b610ffd565b61030560008051602061395883398151915281565b6103056104d23660046132ec565b611084565b6102976104e5366004612f1d565b600d6020526000908152604090205460ff1681565b6008546001600160a01b03166102d4565b61029761051936600461322d565b6110cd565b6102b46110fe565b610305600081565b6102ff61053c366004613343565b61110d565b6102ff61054f36600461336d565b611118565b61030560145481565b6103057f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e681565b6102ff6105923660046133bb565b6113f4565b6103057fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2281565b6102b46105cc366004612f1d565b611426565b6102ff6105df36600461322d565b611590565b600c546102979062010000900460ff1681565b600c5461029790610100900460ff1681565b6102b46115b5565b61029761061f366004613437565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6103057f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c368681565b6102ff61162f565b6102ff61068a366004613259565b61167f565b600061069a82611803565b806106b557506001600160e01b0319821663152a902d60e11b145b92915050565b6060600080546106ca90613461565b80601f01602080910402602001604051908101604052809291908181526020018280546106f690613461565b80156107435780601f1061071857610100808354040283529160200191610743565b820191906000526020600020905b81548152906001019060200180831161072657829003601f168201915b5050505050905090565b600061075882611853565b6107be5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006107e582610ef8565b9050806001600160a01b0316836001600160a01b031614156108535760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016107b5565b336001600160a01b038216148061086f575061086f813361061f565b6108e15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016107b5565b6108eb8383611870565b505050565b7f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c61091a816118de565b600c5462010000900460ff1661097e5760405162461bcd60e51b8152602060048201526024808201527f4e46543a205472616e7366657273206279206f776e6572206172652064697361604482015263189b195960e21b60648201526084016107b5565b6008546040805160208101909152600081526108eb916001600160a01b031690859085906118eb565b6109b1338261191e565b6109cd5760405162461bcd60e51b81526004016107b59061349c565b6108eb838383611a07565b60135460145460009182916001600160a01b0390911690612710906109fe908690613503565b610a089190613538565b915091505b9250929050565b7f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f5610a3e816118de565b600c5460ff1680610aa757506012604051602001610a5c919061354c565b60408051601f198184030181529190528051602090910120610a7e85806135e8565b604051602001610a8f92919061362f565b60405160208183030381529060405280519060200120145b610ae85760405162461bcd60e51b815260206004820152601260248201527126b2ba30b230ba309034b990333937bd32b760711b60448201526064016107b5565b610af284806135e8565b610afe91601291612d1a565b50610b0f60a0850160808601613259565b601380546001600160a01b0319166001600160a01b0392909216919091179055606084018035601455610b45906040860161363f565b610b5657600c805462ff0000191690555b610b66604085016020860161363f565b158015610b755750600c5460ff165b15610bae57600c805460ff191690556040517fb59f45df38ec0d34114b1248c38a29cdbccbf3e745ae3ef310ac66199a4ceccf90600090a15b610bb783611bae565b8115610bc557610bc561162f565b50505050565b600082815260076020526040902060010154610be6816118de565b6108eb8383611eff565b6000610bfb83610ffd565b8210610c535760405162461bcd60e51b815260206004820152602160248201527f4552433732313a206f776e657220696e646578206f7574206f6620626f756e646044820152607360f81b60648201526084016107b5565b506001600160a01b03919091166000908152600e60209081526040808320938352929052205490565b6001600160a01b0381163314610cec5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107b5565b610cf68282611f85565b5050565b6108eb838383604051806020016040528060008152506113f4565b7fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa22610d3f816118de565b600c54610100900460ff16610d965760405162461bcd60e51b815260206004820152601f60248201527f4e46543a20746f6b656e73206275726e696e672069732064697361626c65640060448201526064016107b5565b610d9f82611853565b610deb5760405162461bcd60e51b815260206004820152601a60248201527f4275726e20666f72206e6f6e6578697374656e7420746f6b656e00000000000060448201526064016107b5565b6008546001600160a01b0316610e0083610ef8565b6001600160a01b031614610e665760405162461bcd60e51b815260206004820152602760248201527f4e46543a20746f6b656e73206d6179206265206275726e6564206279206f776e6044820152666572206f6e6c7960c81b60648201526084016107b5565b610cf682611fec565b6000610e7a60105490565b8210610ed35760405162461bcd60e51b815260206004820152602260248201527f4552433732313a20676c6f62616c20696e646578206f7574206f6620626f756e604482015261647360f01b60648201526084016107b5565b60108281548110610ee657610ee661365a565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806106b55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016107b5565b60128054610f7c90613461565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa890613461565b8015610ff55780601f10610fca57610100808354040283529160200191610ff5565b820191906000526020600020905b815481529060010190602001808311610fd857829003601f168201915b505050505081565b60006001600160a01b0382166110685760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016107b5565b506001600160a01b031660009081526003602052604090205490565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c36866110b0816118de565b6110ba858561202c565b6110c48484612046565b50919392505050565b60006110e7600080516020613958833981519152836117d8565b806110f757506110f783836117d8565b9392505050565b6060600180546106ca90613461565b610cf63383836120d1565b7f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e6611142816118de565b61114b84611853565b6111ab5760405162461bcd60e51b815260206004820152602b60248201527f4e46543a207570646174652055524920717565727920666f72206e6f6e65786960448201526a39ba32b73a103a37b5b2b760a91b60648201526084016107b5565b600c5460ff166112095760405162461bcd60e51b815260206004820152602360248201527f4e46543a20546f6b656e2075726973206172652066726f7a656e20676c6f62616044820152626c6c7960e81b60648201526084016107b5565b6000848152600d602052604090205460ff161515600114156112645760405162461bcd60e51b815260206004820152601460248201527327232a1d102a37b5b2b71034b990333937bd32b760611b60448201526064016107b5565b81806112705750825115155b6112e25760405162461bcd60e51b815260206004820152603860248201527f4e46543a20456974686572205f746f6b656e557269206f72205f69734672656560448201527f7a65546f6b656e5572693d74727565207265717569726564000000000000000060648201526084016107b5565b82511561138f576112f16121a0565b83604051602001611303929190613670565b6040516020818303038152906040528051906020012061132285611426565b8051906020012014156113855760405162461bcd60e51b815260206004820152602560248201527f4e46543a204e657720746f6b656e205552492069732073616d6520617320757060448201526419185d195960da1b60648201526084016107b5565b61138f8484612046565b8115610bc5576000848152600d60205260409020805460ff19166001179055837fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b556572076113d982611426565b6040516113e69190612f0a565b60405180910390a250505050565b6113fe338361191e565b61141a5760405162461bcd60e51b81526004016107b59061349c565b610bc5848484846118eb565b606061143182611853565b6114975760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b60648201526084016107b5565b600082815260066020526040812080546114b090613461565b80601f01602080910402602001604051908101604052809291908181526020018280546114dc90613461565b80156115295780601f106114fe57610100808354040283529160200191611529565b820191906000526020600020905b81548152906001019060200180831161150c57829003601f168201915b50505050509050600061153a6121a0565b905080516000141561154d575092915050565b81511561157f578082604051602001611567929190613670565b60405160208183030381529060405292505050919050565b611588846121af565b949350505050565b6000828152600760205260409020600101546115ab816118de565b6108eb8383611f85565b606060006116036115c7601454612279565b6013546115de906001600160a01b03166014612377565b6040516020016115ef92919061369f565b604051602081830303815290604052612513565b90506000816040516020016116189190613726565b60408051601f198184030181529190529392505050565b600080516020613958833981519152611647816118de565b60095461166c90600080516020613958833981519152906001600160a01b0316611f85565b50600980546001600160a01b0319169055565b6008546001600160a01b03828116911614156116d15760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c903a34329037bbb732b960791b60448201526064016107b5565b6008546001600160a01b031633146117355760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e207472616e73666572206f776e65727368696044820152600760fc1b60648201526084016107b5565b60085461175a90600080516020613958833981519152906001600160a01b0316611f85565b600880546001600160a01b038381166001600160a01b03198316811790935516906117949060008051602061395883398151915290611eff565b816001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60009182526007602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061183457506001600160e01b03198216635b5e139f60e01b145b806106b557506301ffc9a760e01b6001600160e01b03198316146106b5565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906118a582610ef8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6118e88133612679565b50565b6118f6848484611a07565b611902848484846126dd565b610bc55760405162461bcd60e51b81526004016107b59061376b565b600061192982611853565b61198a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107b5565b600061199583610ef8565b9050806001600160a01b0316846001600160a01b031614806119dc57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806115885750836001600160a01b03166119f58461074d565b6001600160a01b031614949350505050565b826001600160a01b0316611a1a82610ef8565b6001600160a01b031614611a7e5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016107b5565b6001600160a01b038216611ae05760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107b5565b611aeb8383836127ea565b611af6600082611870565b6001600160a01b0383166000908152600360205260408120805460019290611b1f9084906137bd565b90915550506001600160a01b0382166000908152600360205260408120805460019290611b4d9084906137d4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b8051156118e857611bcd600080516020613958833981519152336110cd565b611c385760405162461bcd60e51b815260206004820152603660248201527f4772616e756c617220726f6c65733a206f6e6c792041444d494e5f524f4c452060448201527563616e206368616e6765207065726d697373696f6e7360501b60648201526084016107b5565b60005b8151811015610cf6576000828281518110611c5857611c5861365a565b6020026020010151600001519050611c6f816128a2565b611cc95760405162461bcd60e51b815260206004820152602560248201527f4772616e756c6172526f6c65733a20496e76616c696420726f6c657341646472604482015264657373657360d81b60648201526084016107b5565b6000818152600b602052604090205460ff1615611d365760405162461bcd60e51b815260206004820152602560248201527f4772616e756c6172526f6c65733a204f6e65206f6620726f6c657320697320666044820152643937bd32b760d91b60648201526084016107b5565b60005b6000828152600a6020526040902054811015611da1576000828152600a602052604090208054611d8f91849184908110611d7557611d7561365a565b6000918252602090912001546001600160a01b0316611f85565b80611d99816137ec565b915050611d39565b506000818152600a60205260408120611db991612d9e565b60005b838381518110611dce57611dce61365a565b60200260200101516020015151811015611eae57611e2282858581518110611df857611df861365a565b6020026020010151602001518381518110611e1557611e1561365a565b6020026020010151611eff565b6000828152600a602052604090208451859085908110611e4457611e4461365a565b6020026020010151602001518281518110611e6157611e6161365a565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580611ea6816137ec565b915050611dbc565b50828281518110611ec157611ec161365a565b60200260200101516040015115611eec576000818152600b60205260409020805460ff191660011790555b5080611ef7816137ec565b915050611c3b565b611f0982826110cd565b610cf65760008281526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f413390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f8f82826110cd565b15610cf65760008281526007602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611ff581612971565b6000818152600660205260409020805461200e90613461565b1590506118e85760008181526006602052604081206118e891612dbc565b610cf6828260405180602001604052806000815250612a18565b61204f82611853565b6120b25760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016107b5565b600082815260066020908152604090912082516108eb92840190612df6565b816001600160a01b0316836001600160a01b031614156121335760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107b5565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6060601280546106ca90613461565b60606121ba82611853565b61221e5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016107b5565b60006122286121a0565b9050600081511161224857604051806020016040528060008152506110f7565b8061225284612279565b604051602001612263929190613670565b6040516020818303038152906040529392505050565b60608161229d5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156122c757806122b1816137ec565b91506122c09050600a83613538565b91506122a1565b60008167ffffffffffffffff8111156122e2576122e2612fda565b6040519080825280601f01601f19166020018201604052801561230c576020820181803683370190505b5090505b8415611588576123216001836137bd565b915061232e600a86613807565b6123399060306137d4565b60f81b81838151811061234e5761234e61365a565b60200101906001600160f81b031916908160001a905350612370600a86613538565b9450612310565b60606000612386836002613503565b6123919060026137d4565b67ffffffffffffffff8111156123a9576123a9612fda565b6040519080825280601f01601f1916602001820160405280156123d3576020820181803683370190505b509050600360fc1b816000815181106123ee576123ee61365a565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061241d5761241d61365a565b60200101906001600160f81b031916908160001a9053506000612441846002613503565b61244c9060016137d4565b90505b60018111156124c4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106124805761248061365a565b1a60f81b8282815181106124965761249661365a565b60200101906001600160f81b031916908160001a90535060049490941c936124bd8161381b565b905061244f565b5083156110f75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107b5565b805160609080612533575050604080516020810190915260008152919050565b600060036125428360026137d4565b61254c9190613538565b612557906004613503565b905060006125668260206137d4565b67ffffffffffffffff81111561257e5761257e612fda565b6040519080825280601f01601f1916602001820160405280156125a8576020820181803683370190505b5090506000604051806060016040528060408152602001613918604091399050600181016020830160005b86811015612634576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b8352600490920191016125d3565b50600386066001811461264e576002811461265f5761266b565b613d3d60f01b60011983015261266b565b603d60f81b6000198301525b505050918152949350505050565b61268382826110cd565b610cf65761269b816001600160a01b03166014612377565b6126a6836020612377565b6040516020016126b7929190613832565b60408051601f198184030181529082905262461bcd60e51b82526107b591600401612f0a565b60006001600160a01b0384163b156127df57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906127219033908990889088906004016138a7565b602060405180830381600087803b15801561273b57600080fd5b505af192505050801561276b575060408051601f3d908101601f19168201909252612768918101906138e4565b60015b6127c5573d808015612799576040519150601f19603f3d011682016040523d82523d6000602084013e61279e565b606091505b5080516127bd5760405162461bcd60e51b81526004016107b59061376b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611588565b506001949350505050565b6001600160a01b0383166128455761284081601080546000838152601160205260408120829055600182018355919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720155565b612868565b816001600160a01b0316836001600160a01b031614612868576128688382612a4b565b6001600160a01b03821661287f576108eb81612ae8565b826001600160a01b0316826001600160a01b0316146108eb576108eb8282612b97565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c36868214806128f157507f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f582145b8061291b57507f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e682145b8061294557507fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2282145b806106b55750507f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c1490565b600061297c82610ef8565b905061298a816000846127ea565b612995600083611870565b6001600160a01b03811660009081526003602052604081208054600192906129be9084906137bd565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b612a228383612bdb565b612a2f60008484846126dd565b6108eb5760405162461bcd60e51b81526004016107b59061376b565b60006001612a5884610ffd565b612a6291906137bd565b6000838152600f6020526040902054909150808214612ab5576001600160a01b0384166000908152600e602090815260408083208584528252808320548484528184208190558352600f90915290208190555b506000918252600f602090815260408084208490556001600160a01b039094168352600e81528383209183525290812055565b601054600090612afa906001906137bd565b60008381526011602052604081205460108054939450909284908110612b2257612b2261365a565b906000526020600020015490508060108381548110612b4357612b4361365a565b6000918252602080832090910192909255828152601190915260408082208490558582528120556010805480612b7b57612b7b613901565b6001900381819060005260206000200160009055905550505050565b6000612ba283610ffd565b6001600160a01b039093166000908152600e602090815260408083208684528252808320859055938252600f9052919091209190915550565b6001600160a01b038216612c315760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107b5565b612c3a81611853565b15612c875760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107b5565b612c93600083836127ea565b6001600160a01b0382166000908152600360205260408120805460019290612cbc9084906137d4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612d2690613461565b90600052602060002090601f016020900481019282612d485760008555612d8e565b82601f10612d615782800160ff19823516178555612d8e565b82800160010185558215612d8e579182015b82811115612d8e578235825591602001919060010190612d73565b50612d9a929150612e6a565b5090565b50805460008255906000526020600020908101906118e89190612e6a565b508054612dc890613461565b6000825580601f10612dd8575050565b601f0160209004906000526020600020908101906118e89190612e6a565b828054612e0290613461565b90600052602060002090601f016020900481019282612e245760008555612d8e565b82601f10612e3d57805160ff1916838001178555612d8e565b82800160010185558215612d8e579182015b82811115612d8e578251825591602001919060010190612e4f565b5b80821115612d9a5760008155600101612e6b565b6001600160e01b0319811681146118e857600080fd5b600060208284031215612ea757600080fd5b81356110f781612e7f565b60005b83811015612ecd578181015183820152602001612eb5565b83811115610bc55750506000910152565b60008151808452612ef6816020860160208601612eb2565b601f01601f19169290920160200192915050565b6020815260006110f76020830184612ede565b600060208284031215612f2f57600080fd5b5035919050565b80356001600160a01b0381168114612f4d57600080fd5b919050565b60008060408385031215612f6557600080fd5b612f6e83612f36565b946020939093013593505050565b600080600060608486031215612f9157600080fd5b612f9a84612f36565b9250612fa860208501612f36565b9150604084013590509250925092565b60008060408385031215612fcb57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561301357613013612fda565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561304257613042612fda565b604052919050565b600067ffffffffffffffff82111561306457613064612fda565b5060051b60200190565b80358015158114612f4d57600080fd5b60008060006060848603121561309357600080fd5b67ffffffffffffffff80853511156130aa57600080fd5b60a085358601870312156130bd57600080fd5b84358501935080602086013511156130d457600080fd5b6020850135850186601f8201126130ea57600080fd5b6130fc6130f7823561304a565b613019565b81358082526020808301929160051b84010189101561311a57600080fd5b602083015b6020843560051b85010181101561321157848135111561313e57600080fd5b803584016060818c03601f1901121561315657600080fd5b61315e612ff0565b60208201358152866040830135111561317657600080fd5b604082013582018c603f82011261318c57600080fd5b61319c6130f7602083013561304a565b602082810135808352908201919060051b83016040018f8111156131bf57600080fd5b6040840193505b808410156131e8576131d784612f36565b8352602093840193909201916131c6565b506020840152506131fd90506060830161306e565b60408201528452506020928301920161311f565b509450613224925050506040850161306e565b90509250925092565b6000806040838503121561324057600080fd5b8235915061325060208401612f36565b90509250929050565b60006020828403121561326b57600080fd5b6110f782612f36565b600067ffffffffffffffff83111561328e5761328e612fda565b6132a1601f8401601f1916602001613019565b90508281528383830111156132b557600080fd5b828260208301376000602084830101529392505050565b600082601f8301126132dd57600080fd5b6110f783833560208501613274565b60008060006060848603121561330157600080fd5b61330a84612f36565b925060208401359150604084013567ffffffffffffffff81111561332d57600080fd5b613339868287016132cc565b9150509250925092565b6000806040838503121561335657600080fd5b61335f83612f36565b91506132506020840161306e565b60008060006060848603121561338257600080fd5b83359250602084013567ffffffffffffffff8111156133a057600080fd5b6133ac868287016132cc565b9250506132246040850161306e565b600080600080608085870312156133d157600080fd5b6133da85612f36565b93506133e860208601612f36565b925060408501359150606085013567ffffffffffffffff81111561340b57600080fd5b8501601f8101871361341c57600080fd5b61342b87823560208401613274565b91505092959194509250565b6000806040838503121561344a57600080fd5b61345383612f36565b915061325060208401612f36565b600181811c9082168061347557607f821691505b6020821081141561349657634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561351d5761351d6134ed565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261354757613547613522565b500490565b600080835481600182811c91508083168061356857607f831692505b602080841082141561358857634e487b7160e01b86526022600452602486fd5b81801561359c57600181146135ad576135da565b60ff198616895284890196506135da565b60008a81526020902060005b868110156135d25781548b8201529085019083016135b9565b505084890196505b509498975050505050505050565b6000808335601e198436030181126135ff57600080fd5b83018035915067ffffffffffffffff82111561361a57600080fd5b602001915036819003821315610a0d57600080fd5b8183823760009101908152919050565b60006020828403121561365157600080fd5b6110f78261306e565b634e487b7160e01b600052603260045260246000fd5b60008351613682818460208801612eb2565b835190830190613696818360208801612eb2565b01949350505050565b7f7b2273656c6c65725f6665655f62617369735f706f696e7473223a20000000008152600083516136d781601c850160208801612eb2565b731610113332b2afb932b1b4b834b2b73a111d101160611b601c91840191820152835161370b816030840160208801612eb2565b61227d60f01b60309290910191820152603201949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161375e81601d850160208701612eb2565b91909101601d0192915050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000828210156137cf576137cf6134ed565b500390565b600082198211156137e7576137e76134ed565b500190565b6000600019821415613800576138006134ed565b5060010190565b60008261381657613816613522565b500690565b60008161382a5761382a6134ed565b506000190190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161386a816017850160208801612eb2565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161389b816028840160208801612eb2565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906138da90830184612ede565b9695505050505050565b6000602082840312156138f657600080fd5b81516110f781612e7f565b634e487b7160e01b600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212208a11989bc2e5830718d267c68480afa6d8d35654cb57d63c73703f56be6eb24164736f6c63430008090033a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027f5760003560e01c806370a082311161015c578063b29c097a116100ce578063e3d5207211610087578063e3d52072146105f7578063e8a3d48514610609578063e985e9c514610611578063e9a9c8501461064d578063f153c2e514610674578063f2fde38b1461067c57600080fd5b8063b29c097a1461055d578063b88d4fde14610584578063b930908f14610597578063c87b56dd146105be578063d547741f146105d1578063de374d9d146105e457600080fd5b806391d148541161012057806391d148541461050b57806395d89b411461051e578063a217fddf14610526578063a22cb4651461052e578063a2f551ec14610541578063a53a84b61461055457600080fd5b806370a082311461049c57806375b238fc146104af5780637afdcdbb146104c45780638d010db3146104d75780638da5cb5b146104fa57600080fd5b80632e628b61116101f557806342842e0e116101b957806342842e0e1461043b57806342966c681461044e5780634e6f9dd6146104615780634f6ccce71461046e5780636352211e146104815780636c0360eb1461049457600080fd5b80632e628b61146103dc5780632f2ff15d146103ef5780632f745c5914610402578063328825351461041557806336568abe1461042857600080fd5b8063206b60f911610247578063206b60f91461031357806321e92d491461033a57806323b872dd1461034d578063248a9ca3146103605780632a55205a146103835780632c23b965146103b557600080fd5b806301ffc9a71461028457806306fdde03146102ac578063081812fc146102c1578063095ea7b3146102ec57806318160ddd14610301575b600080fd5b610297610292366004612e95565b61068f565b60405190151581526020015b60405180910390f35b6102b46106bb565b6040516102a39190612f0a565b6102d46102cf366004612f1d565b61074d565b6040516001600160a01b0390911681526020016102a3565b6102ff6102fa366004612f52565b6107da565b005b6010545b6040519081526020016102a3565b6103057f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c81565b6102ff610348366004612f52565b6108f0565b6102ff61035b366004612f7c565b6109a7565b61030561036e366004612f1d565b60009081526007602052604090206001015490565b610396610391366004612fb8565b6109d8565b604080516001600160a01b0390931683526020830191909152016102a3565b6103057f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f581565b6102ff6103ea36600461307e565b610a14565b6102ff6103fd36600461322d565b610bcb565b610305610410366004612f52565b610bf0565b6013546102d4906001600160a01b031681565b6102ff61043636600461322d565b610c7c565b6102ff610449366004612f7c565b610cfa565b6102ff61045c366004612f1d565b610d15565b600c546102979060ff1681565b61030561047c366004612f1d565b610e6f565b6102d461048f366004612f1d565b610ef8565b6102b4610f6f565b6103056104aa366004613259565b610ffd565b61030560008051602061395883398151915281565b6103056104d23660046132ec565b611084565b6102976104e5366004612f1d565b600d6020526000908152604090205460ff1681565b6008546001600160a01b03166102d4565b61029761051936600461322d565b6110cd565b6102b46110fe565b610305600081565b6102ff61053c366004613343565b61110d565b6102ff61054f36600461336d565b611118565b61030560145481565b6103057f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e681565b6102ff6105923660046133bb565b6113f4565b6103057fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2281565b6102b46105cc366004612f1d565b611426565b6102ff6105df36600461322d565b611590565b600c546102979062010000900460ff1681565b600c5461029790610100900460ff1681565b6102b46115b5565b61029761061f366004613437565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6103057f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c368681565b6102ff61162f565b6102ff61068a366004613259565b61167f565b600061069a82611803565b806106b557506001600160e01b0319821663152a902d60e11b145b92915050565b6060600080546106ca90613461565b80601f01602080910402602001604051908101604052809291908181526020018280546106f690613461565b80156107435780601f1061071857610100808354040283529160200191610743565b820191906000526020600020905b81548152906001019060200180831161072657829003601f168201915b5050505050905090565b600061075882611853565b6107be5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006107e582610ef8565b9050806001600160a01b0316836001600160a01b031614156108535760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016107b5565b336001600160a01b038216148061086f575061086f813361061f565b6108e15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016107b5565b6108eb8383611870565b505050565b7f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c61091a816118de565b600c5462010000900460ff1661097e5760405162461bcd60e51b8152602060048201526024808201527f4e46543a205472616e7366657273206279206f776e6572206172652064697361604482015263189b195960e21b60648201526084016107b5565b6008546040805160208101909152600081526108eb916001600160a01b031690859085906118eb565b6109b1338261191e565b6109cd5760405162461bcd60e51b81526004016107b59061349c565b6108eb838383611a07565b60135460145460009182916001600160a01b0390911690612710906109fe908690613503565b610a089190613538565b915091505b9250929050565b7f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f5610a3e816118de565b600c5460ff1680610aa757506012604051602001610a5c919061354c565b60408051601f198184030181529190528051602090910120610a7e85806135e8565b604051602001610a8f92919061362f565b60405160208183030381529060405280519060200120145b610ae85760405162461bcd60e51b815260206004820152601260248201527126b2ba30b230ba309034b990333937bd32b760711b60448201526064016107b5565b610af284806135e8565b610afe91601291612d1a565b50610b0f60a0850160808601613259565b601380546001600160a01b0319166001600160a01b0392909216919091179055606084018035601455610b45906040860161363f565b610b5657600c805462ff0000191690555b610b66604085016020860161363f565b158015610b755750600c5460ff165b15610bae57600c805460ff191690556040517fb59f45df38ec0d34114b1248c38a29cdbccbf3e745ae3ef310ac66199a4ceccf90600090a15b610bb783611bae565b8115610bc557610bc561162f565b50505050565b600082815260076020526040902060010154610be6816118de565b6108eb8383611eff565b6000610bfb83610ffd565b8210610c535760405162461bcd60e51b815260206004820152602160248201527f4552433732313a206f776e657220696e646578206f7574206f6620626f756e646044820152607360f81b60648201526084016107b5565b506001600160a01b03919091166000908152600e60209081526040808320938352929052205490565b6001600160a01b0381163314610cec5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107b5565b610cf68282611f85565b5050565b6108eb838383604051806020016040528060008152506113f4565b7fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa22610d3f816118de565b600c54610100900460ff16610d965760405162461bcd60e51b815260206004820152601f60248201527f4e46543a20746f6b656e73206275726e696e672069732064697361626c65640060448201526064016107b5565b610d9f82611853565b610deb5760405162461bcd60e51b815260206004820152601a60248201527f4275726e20666f72206e6f6e6578697374656e7420746f6b656e00000000000060448201526064016107b5565b6008546001600160a01b0316610e0083610ef8565b6001600160a01b031614610e665760405162461bcd60e51b815260206004820152602760248201527f4e46543a20746f6b656e73206d6179206265206275726e6564206279206f776e6044820152666572206f6e6c7960c81b60648201526084016107b5565b610cf682611fec565b6000610e7a60105490565b8210610ed35760405162461bcd60e51b815260206004820152602260248201527f4552433732313a20676c6f62616c20696e646578206f7574206f6620626f756e604482015261647360f01b60648201526084016107b5565b60108281548110610ee657610ee661365a565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806106b55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016107b5565b60128054610f7c90613461565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa890613461565b8015610ff55780601f10610fca57610100808354040283529160200191610ff5565b820191906000526020600020905b815481529060010190602001808311610fd857829003601f168201915b505050505081565b60006001600160a01b0382166110685760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016107b5565b506001600160a01b031660009081526003602052604090205490565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c36866110b0816118de565b6110ba858561202c565b6110c48484612046565b50919392505050565b60006110e7600080516020613958833981519152836117d8565b806110f757506110f783836117d8565b9392505050565b6060600180546106ca90613461565b610cf63383836120d1565b7f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e6611142816118de565b61114b84611853565b6111ab5760405162461bcd60e51b815260206004820152602b60248201527f4e46543a207570646174652055524920717565727920666f72206e6f6e65786960448201526a39ba32b73a103a37b5b2b760a91b60648201526084016107b5565b600c5460ff166112095760405162461bcd60e51b815260206004820152602360248201527f4e46543a20546f6b656e2075726973206172652066726f7a656e20676c6f62616044820152626c6c7960e81b60648201526084016107b5565b6000848152600d602052604090205460ff161515600114156112645760405162461bcd60e51b815260206004820152601460248201527327232a1d102a37b5b2b71034b990333937bd32b760611b60448201526064016107b5565b81806112705750825115155b6112e25760405162461bcd60e51b815260206004820152603860248201527f4e46543a20456974686572205f746f6b656e557269206f72205f69734672656560448201527f7a65546f6b656e5572693d74727565207265717569726564000000000000000060648201526084016107b5565b82511561138f576112f16121a0565b83604051602001611303929190613670565b6040516020818303038152906040528051906020012061132285611426565b8051906020012014156113855760405162461bcd60e51b815260206004820152602560248201527f4e46543a204e657720746f6b656e205552492069732073616d6520617320757060448201526419185d195960da1b60648201526084016107b5565b61138f8484612046565b8115610bc5576000848152600d60205260409020805460ff19166001179055837fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b556572076113d982611426565b6040516113e69190612f0a565b60405180910390a250505050565b6113fe338361191e565b61141a5760405162461bcd60e51b81526004016107b59061349c565b610bc5848484846118eb565b606061143182611853565b6114975760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b60648201526084016107b5565b600082815260066020526040812080546114b090613461565b80601f01602080910402602001604051908101604052809291908181526020018280546114dc90613461565b80156115295780601f106114fe57610100808354040283529160200191611529565b820191906000526020600020905b81548152906001019060200180831161150c57829003601f168201915b50505050509050600061153a6121a0565b905080516000141561154d575092915050565b81511561157f578082604051602001611567929190613670565b60405160208183030381529060405292505050919050565b611588846121af565b949350505050565b6000828152600760205260409020600101546115ab816118de565b6108eb8383611f85565b606060006116036115c7601454612279565b6013546115de906001600160a01b03166014612377565b6040516020016115ef92919061369f565b604051602081830303815290604052612513565b90506000816040516020016116189190613726565b60408051601f198184030181529190529392505050565b600080516020613958833981519152611647816118de565b60095461166c90600080516020613958833981519152906001600160a01b0316611f85565b50600980546001600160a01b0319169055565b6008546001600160a01b03828116911614156116d15760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c903a34329037bbb732b960791b60448201526064016107b5565b6008546001600160a01b031633146117355760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e207472616e73666572206f776e65727368696044820152600760fc1b60648201526084016107b5565b60085461175a90600080516020613958833981519152906001600160a01b0316611f85565b600880546001600160a01b038381166001600160a01b03198316811790935516906117949060008051602061395883398151915290611eff565b816001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60009182526007602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061183457506001600160e01b03198216635b5e139f60e01b145b806106b557506301ffc9a760e01b6001600160e01b03198316146106b5565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906118a582610ef8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6118e88133612679565b50565b6118f6848484611a07565b611902848484846126dd565b610bc55760405162461bcd60e51b81526004016107b59061376b565b600061192982611853565b61198a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107b5565b600061199583610ef8565b9050806001600160a01b0316846001600160a01b031614806119dc57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806115885750836001600160a01b03166119f58461074d565b6001600160a01b031614949350505050565b826001600160a01b0316611a1a82610ef8565b6001600160a01b031614611a7e5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016107b5565b6001600160a01b038216611ae05760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107b5565b611aeb8383836127ea565b611af6600082611870565b6001600160a01b0383166000908152600360205260408120805460019290611b1f9084906137bd565b90915550506001600160a01b0382166000908152600360205260408120805460019290611b4d9084906137d4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b8051156118e857611bcd600080516020613958833981519152336110cd565b611c385760405162461bcd60e51b815260206004820152603660248201527f4772616e756c617220726f6c65733a206f6e6c792041444d494e5f524f4c452060448201527563616e206368616e6765207065726d697373696f6e7360501b60648201526084016107b5565b60005b8151811015610cf6576000828281518110611c5857611c5861365a565b6020026020010151600001519050611c6f816128a2565b611cc95760405162461bcd60e51b815260206004820152602560248201527f4772616e756c6172526f6c65733a20496e76616c696420726f6c657341646472604482015264657373657360d81b60648201526084016107b5565b6000818152600b602052604090205460ff1615611d365760405162461bcd60e51b815260206004820152602560248201527f4772616e756c6172526f6c65733a204f6e65206f6620726f6c657320697320666044820152643937bd32b760d91b60648201526084016107b5565b60005b6000828152600a6020526040902054811015611da1576000828152600a602052604090208054611d8f91849184908110611d7557611d7561365a565b6000918252602090912001546001600160a01b0316611f85565b80611d99816137ec565b915050611d39565b506000818152600a60205260408120611db991612d9e565b60005b838381518110611dce57611dce61365a565b60200260200101516020015151811015611eae57611e2282858581518110611df857611df861365a565b6020026020010151602001518381518110611e1557611e1561365a565b6020026020010151611eff565b6000828152600a602052604090208451859085908110611e4457611e4461365a565b6020026020010151602001518281518110611e6157611e6161365a565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580611ea6816137ec565b915050611dbc565b50828281518110611ec157611ec161365a565b60200260200101516040015115611eec576000818152600b60205260409020805460ff191660011790555b5080611ef7816137ec565b915050611c3b565b611f0982826110cd565b610cf65760008281526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f413390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f8f82826110cd565b15610cf65760008281526007602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611ff581612971565b6000818152600660205260409020805461200e90613461565b1590506118e85760008181526006602052604081206118e891612dbc565b610cf6828260405180602001604052806000815250612a18565b61204f82611853565b6120b25760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016107b5565b600082815260066020908152604090912082516108eb92840190612df6565b816001600160a01b0316836001600160a01b031614156121335760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107b5565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6060601280546106ca90613461565b60606121ba82611853565b61221e5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016107b5565b60006122286121a0565b9050600081511161224857604051806020016040528060008152506110f7565b8061225284612279565b604051602001612263929190613670565b6040516020818303038152906040529392505050565b60608161229d5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156122c757806122b1816137ec565b91506122c09050600a83613538565b91506122a1565b60008167ffffffffffffffff8111156122e2576122e2612fda565b6040519080825280601f01601f19166020018201604052801561230c576020820181803683370190505b5090505b8415611588576123216001836137bd565b915061232e600a86613807565b6123399060306137d4565b60f81b81838151811061234e5761234e61365a565b60200101906001600160f81b031916908160001a905350612370600a86613538565b9450612310565b60606000612386836002613503565b6123919060026137d4565b67ffffffffffffffff8111156123a9576123a9612fda565b6040519080825280601f01601f1916602001820160405280156123d3576020820181803683370190505b509050600360fc1b816000815181106123ee576123ee61365a565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061241d5761241d61365a565b60200101906001600160f81b031916908160001a9053506000612441846002613503565b61244c9060016137d4565b90505b60018111156124c4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106124805761248061365a565b1a60f81b8282815181106124965761249661365a565b60200101906001600160f81b031916908160001a90535060049490941c936124bd8161381b565b905061244f565b5083156110f75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107b5565b805160609080612533575050604080516020810190915260008152919050565b600060036125428360026137d4565b61254c9190613538565b612557906004613503565b905060006125668260206137d4565b67ffffffffffffffff81111561257e5761257e612fda565b6040519080825280601f01601f1916602001820160405280156125a8576020820181803683370190505b5090506000604051806060016040528060408152602001613918604091399050600181016020830160005b86811015612634576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b8352600490920191016125d3565b50600386066001811461264e576002811461265f5761266b565b613d3d60f01b60011983015261266b565b603d60f81b6000198301525b505050918152949350505050565b61268382826110cd565b610cf65761269b816001600160a01b03166014612377565b6126a6836020612377565b6040516020016126b7929190613832565b60408051601f198184030181529082905262461bcd60e51b82526107b591600401612f0a565b60006001600160a01b0384163b156127df57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906127219033908990889088906004016138a7565b602060405180830381600087803b15801561273b57600080fd5b505af192505050801561276b575060408051601f3d908101601f19168201909252612768918101906138e4565b60015b6127c5573d808015612799576040519150601f19603f3d011682016040523d82523d6000602084013e61279e565b606091505b5080516127bd5760405162461bcd60e51b81526004016107b59061376b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611588565b506001949350505050565b6001600160a01b0383166128455761284081601080546000838152601160205260408120829055600182018355919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720155565b612868565b816001600160a01b0316836001600160a01b031614612868576128688382612a4b565b6001600160a01b03821661287f576108eb81612ae8565b826001600160a01b0316826001600160a01b0316146108eb576108eb8282612b97565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c36868214806128f157507f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f582145b8061291b57507f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e682145b8061294557507fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2282145b806106b55750507f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c1490565b600061297c82610ef8565b905061298a816000846127ea565b612995600083611870565b6001600160a01b03811660009081526003602052604081208054600192906129be9084906137bd565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b612a228383612bdb565b612a2f60008484846126dd565b6108eb5760405162461bcd60e51b81526004016107b59061376b565b60006001612a5884610ffd565b612a6291906137bd565b6000838152600f6020526040902054909150808214612ab5576001600160a01b0384166000908152600e602090815260408083208584528252808320548484528184208190558352600f90915290208190555b506000918252600f602090815260408084208490556001600160a01b039094168352600e81528383209183525290812055565b601054600090612afa906001906137bd565b60008381526011602052604081205460108054939450909284908110612b2257612b2261365a565b906000526020600020015490508060108381548110612b4357612b4361365a565b6000918252602080832090910192909255828152601190915260408082208490558582528120556010805480612b7b57612b7b613901565b6001900381819060005260206000200160009055905550505050565b6000612ba283610ffd565b6001600160a01b039093166000908152600e602090815260408083208684528252808320859055938252600f9052919091209190915550565b6001600160a01b038216612c315760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107b5565b612c3a81611853565b15612c875760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107b5565b612c93600083836127ea565b6001600160a01b0382166000908152600360205260408120805460019290612cbc9084906137d4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612d2690613461565b90600052602060002090601f016020900481019282612d485760008555612d8e565b82601f10612d615782800160ff19823516178555612d8e565b82800160010185558215612d8e579182015b82811115612d8e578235825591602001919060010190612d73565b50612d9a929150612e6a565b5090565b50805460008255906000526020600020908101906118e89190612e6a565b508054612dc890613461565b6000825580601f10612dd8575050565b601f0160209004906000526020600020908101906118e89190612e6a565b828054612e0290613461565b90600052602060002090601f016020900481019282612e245760008555612d8e565b82601f10612e3d57805160ff1916838001178555612d8e565b82800160010185558215612d8e579182015b82811115612d8e578251825591602001919060010190612e4f565b5b80821115612d9a5760008155600101612e6b565b6001600160e01b0319811681146118e857600080fd5b600060208284031215612ea757600080fd5b81356110f781612e7f565b60005b83811015612ecd578181015183820152602001612eb5565b83811115610bc55750506000910152565b60008151808452612ef6816020860160208601612eb2565b601f01601f19169290920160200192915050565b6020815260006110f76020830184612ede565b600060208284031215612f2f57600080fd5b5035919050565b80356001600160a01b0381168114612f4d57600080fd5b919050565b60008060408385031215612f6557600080fd5b612f6e83612f36565b946020939093013593505050565b600080600060608486031215612f9157600080fd5b612f9a84612f36565b9250612fa860208501612f36565b9150604084013590509250925092565b60008060408385031215612fcb57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561301357613013612fda565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561304257613042612fda565b604052919050565b600067ffffffffffffffff82111561306457613064612fda565b5060051b60200190565b80358015158114612f4d57600080fd5b60008060006060848603121561309357600080fd5b67ffffffffffffffff80853511156130aa57600080fd5b60a085358601870312156130bd57600080fd5b84358501935080602086013511156130d457600080fd5b6020850135850186601f8201126130ea57600080fd5b6130fc6130f7823561304a565b613019565b81358082526020808301929160051b84010189101561311a57600080fd5b602083015b6020843560051b85010181101561321157848135111561313e57600080fd5b803584016060818c03601f1901121561315657600080fd5b61315e612ff0565b60208201358152866040830135111561317657600080fd5b604082013582018c603f82011261318c57600080fd5b61319c6130f7602083013561304a565b602082810135808352908201919060051b83016040018f8111156131bf57600080fd5b6040840193505b808410156131e8576131d784612f36565b8352602093840193909201916131c6565b506020840152506131fd90506060830161306e565b60408201528452506020928301920161311f565b509450613224925050506040850161306e565b90509250925092565b6000806040838503121561324057600080fd5b8235915061325060208401612f36565b90509250929050565b60006020828403121561326b57600080fd5b6110f782612f36565b600067ffffffffffffffff83111561328e5761328e612fda565b6132a1601f8401601f1916602001613019565b90508281528383830111156132b557600080fd5b828260208301376000602084830101529392505050565b600082601f8301126132dd57600080fd5b6110f783833560208501613274565b60008060006060848603121561330157600080fd5b61330a84612f36565b925060208401359150604084013567ffffffffffffffff81111561332d57600080fd5b613339868287016132cc565b9150509250925092565b6000806040838503121561335657600080fd5b61335f83612f36565b91506132506020840161306e565b60008060006060848603121561338257600080fd5b83359250602084013567ffffffffffffffff8111156133a057600080fd5b6133ac868287016132cc565b9250506132246040850161306e565b600080600080608085870312156133d157600080fd5b6133da85612f36565b93506133e860208601612f36565b925060408501359150606085013567ffffffffffffffff81111561340b57600080fd5b8501601f8101871361341c57600080fd5b61342b87823560208401613274565b91505092959194509250565b6000806040838503121561344a57600080fd5b61345383612f36565b915061325060208401612f36565b600181811c9082168061347557607f821691505b6020821081141561349657634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561351d5761351d6134ed565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261354757613547613522565b500490565b600080835481600182811c91508083168061356857607f831692505b602080841082141561358857634e487b7160e01b86526022600452602486fd5b81801561359c57600181146135ad576135da565b60ff198616895284890196506135da565b60008a81526020902060005b868110156135d25781548b8201529085019083016135b9565b505084890196505b509498975050505050505050565b6000808335601e198436030181126135ff57600080fd5b83018035915067ffffffffffffffff82111561361a57600080fd5b602001915036819003821315610a0d57600080fd5b8183823760009101908152919050565b60006020828403121561365157600080fd5b6110f78261306e565b634e487b7160e01b600052603260045260246000fd5b60008351613682818460208801612eb2565b835190830190613696818360208801612eb2565b01949350505050565b7f7b2273656c6c65725f6665655f62617369735f706f696e7473223a20000000008152600083516136d781601c850160208801612eb2565b731610113332b2afb932b1b4b834b2b73a111d101160611b601c91840191820152835161370b816030840160208801612eb2565b61227d60f01b60309290910191820152603201949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161375e81601d850160208701612eb2565b91909101601d0192915050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000828210156137cf576137cf6134ed565b500390565b600082198211156137e7576137e76134ed565b500190565b6000600019821415613800576138006134ed565b5060010190565b60008261381657613816613522565b500690565b60008161382a5761382a6134ed565b506000190190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161386a816017850160208801612eb2565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161389b816028840160208801612eb2565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906138da90830184612ede565b9695505050505050565b6000602082840312156138f657600080fd5b81516110f781612e7f565b634e487b7160e01b600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212208a11989bc2e5830718d267c68480afa6d8d35654cb57d63c73703f56be6eb24164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2085,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2087,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2091,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2095,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2099,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2105,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3410,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 24,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_roles",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 8284,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 8286,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_nftPort",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 8291,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_rolesAddressesIndexed",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 8295,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_rolesFrozen",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 5709,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "metadataUpdatable",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 5711,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "tokensBurnable",
        "offset": 1,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 5713,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "tokensTransferable",
        "offset": 2,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 5717,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "freezeTokenUris",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 5723,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5727,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5730,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_allTokens",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 5734,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5736,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "baseURI",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 5738,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "royaltiesAddress",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 5740,
        "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
        "label": "royaltiesBasisPoints",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/ERC721NftCustom.sol:ERC721NFTCustom",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}