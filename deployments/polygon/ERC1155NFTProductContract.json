{
  "address": "0xcD29022cdd501C2f7Ee0f97a7Ea3e3EE87F22706",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "tokensBurnable",
              "type": "bool"
            }
          ],
          "internalType": "struct Config.Deployment",
          "name": "deploymentConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "metadataUpdatable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "tokensTransferable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Config.Runtime",
          "name": "runtimeConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address[]",
              "name": "addresses",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "frozen",
              "type": "bool"
            }
          ],
          "internalType": "struct GranularRoles.RolesAddresses[]",
          "name": "rolesAddresses",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "PermanentURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PermanentURIGlobal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROYALTIES_BASIS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_CONTRACT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_TOKEN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "freezeTokenUris",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "tokensBurnable",
              "type": "bool"
            }
          ],
          "internalType": "struct Config.Deployment",
          "name": "deploymentConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "metadataUpdatable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "tokensTransferable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Config.Runtime",
          "name": "runtimeConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address[]",
              "name": "addresses",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "frozen",
              "type": "bool"
            }
          ],
          "internalType": "struct GranularRoles.RolesAddresses[]",
          "name": "rolesAddresses",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataUpdatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        }
      ],
      "name": "mintByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        }
      ],
      "name": "mintByOwnerBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeNFTPortPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensBurnable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensTransferable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "transferByOwnerBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "metadataUpdatable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "tokensTransferable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Config.Runtime",
          "name": "newConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address[]",
              "name": "addresses",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "frozen",
              "type": "bool"
            }
          ],
          "internalType": "struct GranularRoles.RolesAddresses[]",
          "name": "rolesAddresses",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "isRevokeNFTPortPermissions",
          "type": "bool"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newUri",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isFreezeTokenUri",
          "type": "bool"
        }
      ],
      "name": "updateTokenUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x248ca8fb4d2f2716dd2df40a8075b462de78c3f30b67205ba4cb30d008511a1f",
  "receipt": {
    "to": null,
    "from": "0xd39Ec8F40acF251c092CE64A9db5EA428abC7E72",
    "contractAddress": "0xcD29022cdd501C2f7Ee0f97a7Ea3e3EE87F22706",
    "transactionIndex": 30,
    "gasUsed": "4673918",
    "logsBloom": "0x
    "blockHash": "0x0bad87f30059b33b0bb97a8eaefd5fa607c85b7f1eb9bdb62f11e2f3d46ed442",
    "transactionHash": "0x248ca8fb4d2f2716dd2df40a8075b462de78c3f30b67205ba4cb30d008511a1f",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 37903842,
        "transactionHash": "0x248ca8fb4d2f2716dd2df40a8075b462de78c3f30b67205ba4cb30d008511a1f",
        "address": "0xcD29022cdd501C2f7Ee0f97a7Ea3e3EE87F22706",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 104,
        "blockHash": "0x0bad87f30059b33b0bb97a8eaefd5fa607c85b7f1eb9bdb62f11e2f3d46ed442"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 37903842,
        "transactionHash": "0x248ca8fb4d2f2716dd2df40a8075b462de78c3f30b67205ba4cb30d008511a1f",
        "address": "0xcD29022cdd501C2f7Ee0f97a7Ea3e3EE87F22706",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 105,
        "blockHash": "0x0bad87f30059b33b0bb97a8eaefd5fa607c85b7f1eb9bdb62f11e2f3d46ed442"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 37903842,
        "transactionHash": "0x248ca8fb4d2f2716dd2df40a8075b462de78c3f30b67205ba4cb30d008511a1f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d39ec8f40acf251c092ce64a9db5ea428abc7e72",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002b54ab209a24f6c0000000000000000000000000000000000000000000000002323c7114776032a0000000000000000000000000000000000000000000008d8968988d27451f1a3000000000000000000000000000000000000000000000000206e7c5f3dd3b3be0000000000000000000000000000000000000000000008d8993ed3847df4410f",
        "logIndex": 106,
        "blockHash": "0x0bad87f30059b33b0bb97a8eaefd5fa607c85b7f1eb9bdb62f11e2f3d46ed442"
      }
    ],
    "blockNumber": 37903842,
    "cumulativeGasUsed": "9302106",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "name": "NFTPort",
      "symbol": "NFT",
      "owner": "0xd39Ec8F40acF251c092CE64A9db5EA428abC7E72",
      "tokensBurnable": true
    },
    {
      "baseURI": "ipfs://baseURI",
      "metadataUpdatable": true,
      "tokensTransferable": true,
      "royaltiesBps": 250,
      "royaltiesAddress": "0xd39Ec8F40acF251c092CE64A9db5EA428abC7E72"
    },
    []
  ],
  "numDeployments": 1,
  "solcInputHash": "1e300b8e19558e2a4c02af65df638f3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"tokensBurnable\",\"type\":\"bool\"}],\"internalType\":\"struct Config.Deployment\",\"name\":\"deploymentConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tokensTransferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct Config.Runtime\",\"name\":\"runtimeConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"internalType\":\"struct GranularRoles.RolesAddresses[]\",\"name\":\"rolesAddresses\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PermanentURIGlobal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROYALTIES_BASIS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_CONTRACT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_TOKEN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezeTokenUris\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"tokensBurnable\",\"type\":\"bool\"}],\"internalType\":\"struct Config.Deployment\",\"name\":\"deploymentConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tokensTransferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct Config.Runtime\",\"name\":\"runtimeConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"internalType\":\"struct GranularRoles.RolesAddresses[]\",\"name\":\"rolesAddresses\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataUpdatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"mintByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"mintByOwnerBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeNFTPortPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensBurnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferByOwnerBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tokensTransferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct Config.Runtime\",\"name\":\"newConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"internalType\":\"struct GranularRoles.RolesAddresses[]\",\"name\":\"rolesAddresses\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isRevokeNFTPortPermissions\",\"type\":\"bool\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newUri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isFreezeTokenUri\",\"type\":\"bool\"}],\"name\":\"updateTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"contractURI()\":{\"details\":\"OpenSea contract metadata, returns a base64 encoded JSON string containing royalties basis points and royalties address\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/standalone/ERC1155NFTProductContract.sol\":\"ERC1155NFTProductContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xe9208ac0602174f0ed30fb10c6292193308424dfa375a8270027d65878d4a812\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/lib/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant _TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = _TABLE;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n                // solhint-disable-previous-line no-empty-blocks\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n                )\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0x48822add7a355a6d6c04679ecba55383d0490eedd1c02915871c36f9e1683185\",\"license\":\"MIT\"},\"contracts/lib/Config.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Config {\\n    /// Fixed at deployment time\\n    struct Deployment {\\n        // Name of the NFT contract.\\n        string name;\\n        // Symbol of the NFT contract.\\n        string symbol;\\n        // The contract owner address. If you wish to own the contract, then set it as your wallet address.\\n        // This is also the wallet that can manage the contract on NFT marketplaces.\\n        address owner;\\n        // If true, tokens may be burned by owner. Cannot be changed later.\\n        bool tokensBurnable;\\n    }\\n\\n    /// Updatable by admins and owner\\n    struct Runtime {\\n        // Metadata base URI for tokens, NFTs minted in this contract will have metadata URI of `baseURI` + `tokenID`.\\n        // Set this to reveal token metadata.\\n        string baseURI;\\n        // If true, the base URI of the NFTs minted in the specified contract can be updated after minting (token URIs\\n        // are not frozen on the contract level). This is useful for revealing NFTs after the drop. If false, all the\\n        // NFTs minted in this contract are frozen by default which means token URIs are non-updatable.\\n        bool metadataUpdatable;\\n        // If true, tokens may be transferred by owner. Default is true. Can be only changed to false.\\n        bool tokensTransferable;\\n        // Secondary market royalties in basis points (100 bps = 1%)\\n        uint256 royaltiesBps;\\n        // Address for royalties\\n        address royaltiesAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x5d34e33120817203948d5ac07093553a3546ed02e6289345017fc06d057ea9be\",\"license\":\"MIT\"},\"contracts/lib/GranularRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/*\\n * Custom roles handling abstract contract.\\n * Used for fine-grained access controls to contracts.\\n * Supported roles are:\\n * - `ADMIN_ROLE`, is granted to the initializer and one other account specified during intialization\\n * - `MINT_ROLE`, is used for minting tokens\\n * - `UPDATE_CONTRACT_ROLE`, is used for updating the contract\\n * - `BURN_ROLE`, is used for burning tokens\\n * - `TRANSFER_ROLE`, is used for transferring tokens\\n * `ADMIN_ROLE` has all the access rights for all the roles.\\n *\\n * Each role besides the `ADMIN_ROLE` can have any amount of addresses and can be made immutable.\\n */\\nabstract contract GranularRoles is AccessControlUpgradeable {\\n    // Roles list\\n    // Admin role can have 2 addresses:\\n    // one address same as (_owner) which can be changed\\n    // one for NFTPort API access which can only be revoked\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    // Following roles can have multiple addresses, can be changed by admin or update contract role\\n    bytes32 public constant MINT_ROLE = keccak256(\\\"MINT_ROLE\\\");\\n    bytes32 public constant UPDATE_CONTRACT_ROLE =\\n        keccak256(\\\"UPDATE_CONTRACT_ROLE\\\");\\n    bytes32 public constant UPDATE_TOKEN_ROLE = keccak256(\\\"UPDATE_TOKEN_ROLE\\\");\\n    bytes32 public constant BURN_ROLE = keccak256(\\\"BURN_ROLE\\\");\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n\\n    /*\\n     * Used for intializing and updating roles\\n     * Each role can have any number of addresses attached to it and can be frozen separately,\\n     * meaning any further updates to it are disabled.\\n     * Cannot be used to update or initialize `ADMIN_ROLE`.\\n     */\\n    struct RolesAddresses {\\n        bytes32 role;\\n        address[] addresses;\\n        bool frozen;\\n    }\\n\\n    // Contract owner address, this address can edit the contract on OpenSea and has `ADMIN_ROLE`\\n    address internal _owner;\\n    // Initialized as the address that initializes the contract.\\n    address internal _nftPort;\\n\\n    // Used to get roles enumeration\\n    mapping(bytes32 => address[]) internal _rolesAddressesIndexed;\\n    // Mapping from role to boolean that shows if role can be updated\\n    mapping(bytes32 => bool) internal _rolesFrozen;\\n\\n    // Event emitted when `transferOwnership` called by current owner.\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /*\\n     * Contract owner address\\n     * @dev Required for easy integration with OpenSea, the owner address can edit the collection there\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    // Transfer contract ownership, only callable by the current owner\\n    function transferOwnership(address newOwner) public {\\n        require(newOwner != _owner, \\\"GranularRoles: already the owner\\\");\\n        require(msg.sender == _owner, \\\"GranularRoles: not the owner\\\");\\n        _revokeRole(ADMIN_ROLE, _owner);\\n        address previousOwner = _owner;\\n        _owner = newOwner;\\n        _grantRole(ADMIN_ROLE, _owner);\\n        emit OwnershipTransferred(previousOwner, newOwner);\\n    }\\n\\n    // Removes `ADMIN_ROLE` from the account that initialized the contract\\n    function revokeNFTPortPermissions() public onlyRole(ADMIN_ROLE) {\\n        _revokeRole(ADMIN_ROLE, _nftPort);\\n        _nftPort = address(0);\\n    }\\n\\n    // Admin role has all access granted by default\\n    function hasRole(bytes32 role, address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        // Contract owner has all access rights\\n        if (account == _owner) return true;\\n        // Anyone else cannot have DEFAULT_ADMIN_ROLE\\n        if (role == DEFAULT_ADMIN_ROLE) return false;\\n        // ADMIN_ROLE inherits any other roles\\n        return\\n            super.hasRole(ADMIN_ROLE, account) || super.hasRole(role, account);\\n    }\\n\\n    /**\\n     * Initialize roles, should only be called once, for updating `_updateRoles` is used.\\n     * Can only be used to set the `_owner` and `_nftport` addresses,\\n     * or any amount of accounts for any supported role.\\n     */\\n    function _initRoles(address owner_, RolesAddresses[] memory rolesAddresses)\\n        internal\\n    {\\n        require(owner_ != address(0), \\\"Contract must have an owner\\\");\\n        _owner = owner_;\\n        _nftPort = msg.sender;\\n        _grantRole(ADMIN_ROLE, _owner);\\n        _grantRole(ADMIN_ROLE, _nftPort);\\n\\n        // Loop through all roles from the input\\n        for (\\n            uint256 roleIndex = 0;\\n            roleIndex < rolesAddresses.length;\\n            roleIndex++\\n        ) {\\n            bytes32 role = rolesAddresses[roleIndex].role;\\n            // Check if the role is supported and is not `ADMIN_ROLE`\\n            require(\\n                _regularRoleValid(role),\\n                string(\\n                    abi.encodePacked(\\n                        \\\"GranularRoles: invalid role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n            // Loop through all the addresses for the role being processed\\n            // Grant the given role to all the specified addresses\\n            // and add them to the roles enumaration `_rolesAddressesIndexed`\\n            for (\\n                uint256 addressIndex = 0;\\n                addressIndex < rolesAddresses[roleIndex].addresses.length;\\n                addressIndex++\\n            ) {\\n                _grantRole(\\n                    role,\\n                    rolesAddresses[roleIndex].addresses[addressIndex]\\n                );\\n                _rolesAddressesIndexed[role].push(\\n                    rolesAddresses[roleIndex].addresses[addressIndex]\\n                );\\n            }\\n            // If the given role is frozen then further updates to it are disabled\\n            if (rolesAddresses[roleIndex].frozen) {\\n                _rolesFrozen[role] = true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Used for updating and/or freezing roles.\\n     * Only callable by accounts with the `ADMIN_ROLE`\\n     * and cannot be used to update `ADMIN_ROLE`\\n     */\\n    function _updateRoles(RolesAddresses[] memory rolesAddresses) internal {\\n        if (rolesAddresses.length > 0) {\\n            require(\\n                hasRole(ADMIN_ROLE, msg.sender),\\n                \\\"GranularRoles: not an admin\\\"\\n            );\\n\\n            // Loop through all roles from the input\\n            for (\\n                uint256 roleIndex = 0;\\n                roleIndex < rolesAddresses.length;\\n                roleIndex++\\n            ) {\\n                bytes32 role = rolesAddresses[roleIndex].role;\\n                // Check if the role is supported and is not `ADMIN_ROLE`\\n                require(\\n                    _regularRoleValid(role),\\n                    string(\\n                        abi.encodePacked(\\n                            \\\"GranularRoles: invalid role \\\",\\n                            StringsUpgradeable.toHexString(uint256(role), 32)\\n                        )\\n                    )\\n                );\\n                // If given role is frozen then it cannot be updated\\n                require(\\n                    !_rolesFrozen[role],\\n                    string(\\n                        abi.encodePacked(\\n                            \\\"GranularRoles: role \\\",\\n                            StringsUpgradeable.toHexString(uint256(role), 32),\\n                            \\\" is frozen\\\"\\n                        )\\n                    )\\n                );\\n                // Loop through all the addresses for the given role\\n                // Remove all accounts from the role being processed to add new ones from the input\\n                for (\\n                    uint256 addressIndex = 0;\\n                    addressIndex < _rolesAddressesIndexed[role].length;\\n                    addressIndex++\\n                ) {\\n                    _revokeRole(\\n                        role,\\n                        _rolesAddressesIndexed[role][addressIndex]\\n                    );\\n                }\\n                delete _rolesAddressesIndexed[role];\\n                // Loop through all the addresses for the given role from the input.\\n                // Grant roles to given addresses for the role being processed\\n                // and add the accounts to the role enumeration.\\n                for (\\n                    uint256 addressIndex = 0;\\n                    addressIndex < rolesAddresses[roleIndex].addresses.length;\\n                    addressIndex++\\n                ) {\\n                    _grantRole(\\n                        role,\\n                        rolesAddresses[roleIndex].addresses[addressIndex]\\n                    );\\n                    _rolesAddressesIndexed[role].push(\\n                        rolesAddresses[roleIndex].addresses[addressIndex]\\n                    );\\n                }\\n                if (rolesAddresses[roleIndex].frozen) {\\n                    _rolesFrozen[role] = true;\\n                }\\n            }\\n        }\\n    }\\n\\n    // Checks if role is valid, does not contain the `ADMIN_ROLE`\\n    function _regularRoleValid(bytes32 role) internal pure returns (bool) {\\n        return\\n            role == MINT_ROLE ||\\n            role == UPDATE_CONTRACT_ROLE ||\\n            role == UPDATE_TOKEN_ROLE ||\\n            role == BURN_ROLE ||\\n            role == TRANSFER_ROLE;\\n    }\\n}\\n\",\"keccak256\":\"0x353e8fd619cc2dd340a8923d9fc763abbd410b4f47bd3da1e5611ac97a05e96b\",\"license\":\"MIT\"},\"contracts/lib/ITemplate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n * Template interface, used by factory contracts to get the name and version of a contract,\\n * that extends this interface.\\n */\\ninterface ITemplate {\\n    function NAME() external view returns (string memory);\\n\\n    function VERSION() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbf583f0046bf96a84fc2bc5cef21d433c838a7f701f7c93229d9faf026014e20\",\"license\":\"MIT\"},\"contracts/standalone/ERC1155NFTProductContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../templates/ERC1155NFTProduct.sol\\\";\\n\\ncontract ERC1155NFTProductContract is ERC1155NFTProduct {\\n    constructor(\\n        Config.Deployment memory deploymentConfig,\\n        Config.Runtime memory runtimeConfig,\\n        RolesAddresses[] memory rolesAddresses\\n    ) initializer {\\n        initialize(deploymentConfig, runtimeConfig, rolesAddresses);\\n    }\\n}\",\"keccak256\":\"0x7a8ecb42a4912eb2ea1cde5c730ef74681a8498ef8c6b0003dd79c317ce6a9e9\",\"license\":\"MIT\"},\"contracts/templates/ERC1155NFTProduct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../lib/GranularRoles.sol\\\";\\nimport \\\"../lib/Base64.sol\\\";\\nimport \\\"../lib/Config.sol\\\";\\nimport \\\"../lib/ITemplate.sol\\\";\\n\\n/*\\n * ERC-1155 proxy contract, meaning it does not make use of a constructor,\\n * but rather uses `initialize` with `initializer` modifier, see {Initializable}\\n *\\n * Minting and other write transactions only supported for accounts with relevant access rights.\\n */\\ncontract ERC1155NFTProduct is\\n    ERC1155Upgradeable,\\n    GranularRoles,\\n    ITemplate,\\n    ReentrancyGuardUpgradeable\\n{\\n    /*******************************\\n     * Extensions, structs, events *\\n     *******************************/\\n\\n    using Strings for uint256;\\n\\n    /*\\n     * Event emitted to show opensea that metadata of a token is frozen,\\n     * see https://docs.opensea.io/docs/metadata-standards\\n     */\\n    event PermanentURI(string _value, uint256 indexed _id);\\n    // Event emitted to show that all tokens have their metadata frozen\\n    event PermanentURIGlobal();\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    // Template name\\n    string public constant NAME = \\\"ERC1155NFTProduct\\\";\\n    // Template version\\n    uint256 public constant VERSION = 1_00_01;\\n\\n    // Basis for calculating royalties.\\n    // This has to be 10k for royaltiesBps to be in basis points.\\n    uint16 public constant ROYALTIES_BASIS = 10000;\\n    // Default URI for tokens, each minted token will have a token URI, so default URI is empty\\n    string public constant DEFAULT_URI = \\\"\\\";\\n\\n    /********************\\n     * Public variables *\\n     ********************/\\n\\n    // If true then tokens metadata can be updated\\n    bool public metadataUpdatable;\\n    // If true then tokens can be burned by their owners\\n    bool public tokensBurnable;\\n    // If true then tokens can be transferred by having the correct access rights {GranularRoles-TRANSFER_ROLE}\\n    // if the token is owned by {GranularRoles-_owner} address\\n    bool public tokensTransferable;\\n\\n    // Token name\\n    string public name;\\n    // Token symbol\\n    string public symbol;\\n    // Token IDs are returned as `baseURI` + `tokenURI`\\n    string public baseURI;\\n\\n    // Address where royalties will be transferred to\\n    address public royaltiesAddress;\\n    // Secondary market royalties in basis points (100 bps = 1%). Royalties use ERC2981 standard and support\\n    // OpenSea standard.\\n    uint256 public royaltiesBasisPoints;\\n\\n    // Mapping of individually frozen tokens\\n    mapping(uint256 => bool) public freezeTokenUris;\\n    // Mapping of token ID to supply\\n    mapping(uint256 => uint256) public tokenSupply;\\n\\n    /***************************\\n     * Contract initialization *\\n     ***************************/\\n\\n    constructor() initializer {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    // Can only be called once, used because constructors cannot be used for proxy contracts\\n    function initialize(\\n        Config.Deployment memory deploymentConfig,\\n        Config.Runtime memory runtimeConfig,\\n        RolesAddresses[] memory rolesAddresses\\n    ) public initializer {\\n        __ERC1155_init(DEFAULT_URI);\\n        __ReentrancyGuard_init();\\n\\n        _setRoyalties(\\n            runtimeConfig.royaltiesAddress,\\n            runtimeConfig.royaltiesBps\\n        );\\n\\n        metadataUpdatable = runtimeConfig.metadataUpdatable;\\n        tokensBurnable = deploymentConfig.tokensBurnable;\\n        tokensTransferable = runtimeConfig.tokensTransferable;\\n\\n        name = deploymentConfig.name;\\n        symbol = deploymentConfig.symbol;\\n        baseURI = runtimeConfig.baseURI;\\n\\n        _initRoles(deploymentConfig.owner, rolesAddresses);\\n    }\\n\\n    /*******************\\n     * Write functions *\\n     *******************/\\n\\n    // Allows to set a default URI for tokens, which is only returned if token URI does not exist for given token ID\\n    function setURI(string memory _newURI)\\n        public\\n        onlyRole(UPDATE_CONTRACT_ROLE)\\n    {\\n        _setURI(_newURI);\\n    }\\n\\n    /*\\n     * Allows to update token URI for given `_tokenId` and freeze it.\\n     * For the transaction to succeed either `_newUri` or `_isFreezeTokenUri` as true must be specified, or both.\\n     * The `_newURI` cannot be the same as the current URI for the token.\\n     *\\n     * Token ID must exist, `metadataUpdatable` must be true and token URI for given token cannot be frozen.\\n     * Only callable by accounts with `UPDATE_TOKEN_ROLE` or `ADMIN_ROLE`.\\n     */\\n    function updateTokenUri(\\n        uint256 _tokenId,\\n        string memory _newUri,\\n        bool _isFreezeTokenUri\\n    ) public onlyRole(UPDATE_TOKEN_ROLE) {\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\n        require(metadataUpdatable, \\\"Metadata is frozen\\\");\\n        require(freezeTokenUris[_tokenId] != true, \\\"Token is frozen\\\");\\n        require(\\n            _isFreezeTokenUri || (bytes(_newUri).length != 0),\\n            \\\"Either _newUri or _isFreezeTokenUri=true required\\\"\\n        );\\n\\n        if (bytes(_newUri).length != 0) {\\n            require(\\n                keccak256(bytes(_tokenURIs[_tokenId])) !=\\n                    keccak256(bytes(string(abi.encodePacked(_newUri)))),\\n                \\\"New token URI is same as updated\\\"\\n            );\\n            _tokenURIs[_tokenId] = _newUri;\\n            emit URI(_newUri, _tokenId);\\n        }\\n        if (_isFreezeTokenUri) {\\n            freezeTokenUris[_tokenId] = true;\\n            emit PermanentURI(_tokenURIs[_tokenId], _tokenId);\\n        }\\n    }\\n\\n    /*\\n     * Allows to burn given `value` amount of tokens with `id`.\\n     * `tokensBurnable` must be true in order for the transaction to succeed and\\n     * at least `value` amount of tokens must exist.\\n     * Only callable by accounts with `BURN_ROLE` or `ADMIN_ROLE`.\\n     */\\n    function burn(uint256 id, uint256 value) public onlyRole(BURN_ROLE) {\\n        require(tokensBurnable, \\\"Burns are disabled\\\");\\n\\n        _burn(_owner, id, value);\\n        tokenSupply[id] -= value;\\n    }\\n\\n    /*\\n     * Same functionality as `burn` but for a batch of tokens.\\n     * Input `ids` and `values` must be in direct correlation,\\n     * an index in both lists referring to the same token.\\n     */\\n    function burnBatch(uint256[] memory ids, uint256[] memory values)\\n        public\\n        onlyRole(BURN_ROLE)\\n    {\\n        require(tokensBurnable, \\\"Burns are disabled\\\");\\n        _burnBatch(_owner, ids, values);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            tokenSupply[ids[i]] -= values[i];\\n        }\\n    }\\n\\n    /*\\n     * Allows to transfer given `value` amount of tokens with `id`.\\n     * `tokensTransferable` must be true and the tokens to be transferred must be owned by the `_owner`,\\n     * at least `value` amount of tokens must exist.\\n     * Only callable by accounts with `TRANSFER_ROLE` or `ADMIN_ROLE`.\\n     */\\n    function transferByOwner(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyRole(TRANSFER_ROLE) {\\n        require(tokensTransferable, \\\"Transfers are disabled\\\");\\n        _safeTransferFrom(_owner, to, id, amount, \\\"\\\");\\n    }\\n\\n    /*\\n     * Same functionality as `transferByOwner` but for a batch of tokens.\\n     * Input `ids` and `values` must be in direct correlation,\\n     * an index in both lists referring to the same token.\\n     */\\n    function transferByOwnerBatch(\\n        address[] memory to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) public onlyRole(TRANSFER_ROLE) {\\n        require(tokensTransferable, \\\"Transfers are disabled\\\");\\n        require(\\n            to.length == ids.length && ids.length == amounts.length,\\n            \\\"Mismatched input arrays\\\"\\n        );\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _safeTransferFrom(_owner, to[i], ids[i], amounts[i], \\\"\\\");\\n        }\\n    }\\n\\n    /*\\n     * Allows to update contract configuration and revoke NFTPort's access to the contract.\\n     * `baseURI` can only be updated if  `metadataUpdatable` is true.\\n     * Tokens can only be made to not be transferable or updatable, not vice-versa.\\n     * Only callable by accounts with `UPDATE_CONTRACT_ROLE` or `ADMIN_ROLE`.\\n     */\\n    function update(\\n        Config.Runtime calldata newConfig,\\n        RolesAddresses[] memory rolesAddresses,\\n        bool isRevokeNFTPortPermissions\\n    ) public onlyRole(UPDATE_CONTRACT_ROLE) {\\n        // If metadata is frozen, baseURI cannot be updated\\n        require(\\n            metadataUpdatable ||\\n                (keccak256(abi.encodePacked(newConfig.baseURI)) ==\\n                    keccak256(abi.encodePacked(baseURI))),\\n            \\\"Metadata is frozen\\\"\\n        );\\n\\n        baseURI = newConfig.baseURI;\\n        _setRoyalties(newConfig.royaltiesAddress, newConfig.royaltiesBps);\\n\\n        if (!newConfig.tokensTransferable) {\\n            tokensTransferable = false;\\n        }\\n        if (!newConfig.metadataUpdatable && metadataUpdatable) {\\n            metadataUpdatable = false;\\n            emit PermanentURIGlobal();\\n        }\\n\\n        _updateRoles(rolesAddresses);\\n\\n        if (isRevokeNFTPortPermissions) {\\n            revokeNFTPortPermissions();\\n        }\\n    }\\n\\n    /*\\n     * Allows to mint tokens by the contract `_owner`.\\n     * Only callable by accounts with `MINT_ROLE` or `ADMIN_ROLE`.\\n     */\\n    function mintByOwner(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        string memory tokenUri\\n    ) public onlyRole(MINT_ROLE) nonReentrant {\\n        require(!_exists(id), \\\"NFT: token already minted\\\");\\n        if (bytes(tokenUri).length > 0) {\\n            _tokenURIs[id] = tokenUri;\\n            emit URI(tokenUri, id);\\n        }\\n        tokenSupply[id] += amount;\\n        _mint(account, id, amount, \\\"\\\");\\n    }\\n\\n    /*\\n     * Same functionality as `mintByOwner` but for a batch of tokens.\\n     * Input `ids` and `values` must be in direct correlation,\\n     * an index in both lists referring to the same token.\\n     */\\n    function mintByOwnerBatch(\\n        address[] memory to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        string[] memory uris\\n    ) public onlyRole(MINT_ROLE) nonReentrant {\\n        require(\\n            to.length == ids.length &&\\n                ids.length == amounts.length &&\\n                amounts.length == uris.length,\\n            \\\"Mismatched input arrays\\\"\\n        );\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(!_exists(ids[i]), \\\"One of tokens is already minted\\\");\\n            require(\\n                to[i] == address(to[i]),\\n                \\\"NFT: one of addresses is invalid\\\"\\n            );\\n            require(amounts[i] > 0, \\\"NFT: all amounts must be > 0\\\");\\n            tokenSupply[ids[i]] += amounts[i];\\n            if (bytes(uris[i]).length > 0) {\\n                _tokenURIs[ids[i]] = uris[i];\\n                emit URI(uris[i], ids[i]);\\n            }\\n            _mint(to[i], ids[i], amounts[i], \\\"\\\");\\n        }\\n    }\\n\\n    /******************\\n     * View functions *\\n     ******************/\\n\\n    // Returns total supply for the given token ID\\n    function totalSupply(uint256 _id) public view returns (uint256) {\\n        return tokenSupply[_id];\\n    }\\n\\n    /*\\n     * Returns token URI for the given token ID.\\n     * If token URI is not empty and base URI is not empty then returns base URI + token URI,\\n     * if base URI is empty and token URI is not empty then returns just token URI.\\n     * If the token URI for the given token ID is empty then returns the default token URI.\\n     */\\n    function uri(uint256 _id) public view override returns (string memory) {\\n        if (bytes(_tokenURIs[_id]).length > 0) {\\n            if (bytes(baseURI).length > 0) {\\n                return string(abi.encodePacked(baseURI, _tokenURIs[_id]));\\n            } else {\\n                return _tokenURIs[_id];\\n            }\\n        } else {\\n            return super.uri(_id);\\n        }\\n    }\\n\\n    // @dev ERC2981 token royalty info\\n    function royaltyInfo(uint256, uint256 salePrice)\\n        external\\n        view\\n        returns (address, uint256)\\n    {\\n        return (\\n            royaltiesAddress,\\n            (royaltiesBasisPoints * salePrice) / ROYALTIES_BASIS\\n        );\\n    }\\n\\n    /**\\n     * @dev OpenSea contract metadata, returns a base64 encoded JSON string containing royalties basis points\\n     * and royalties address\\n     */\\n    function contractURI() external view returns (string memory) {\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        // solium-disable-next-line quotes\\n                        '{\\\"seller_fee_basis_points\\\": ', // solhint-disable-line\\n                        royaltiesBasisPoints.toString(),\\n                        // solium-disable-next-line quotes\\n                        ', \\\"fee_recipient\\\": \\\"', // solhint-disable-line\\n                        uint256(uint160(royaltiesAddress)).toHexString(20),\\n                        // solium-disable-next-line quotes\\n                        '\\\"}' // solhint-disable-line\\n                    )\\n                )\\n            )\\n        );\\n\\n        string memory output = string(\\n            abi.encodePacked(\\\"data:application/json;base64,\\\", json)\\n        );\\n\\n        return output;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC1155Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            ERC1155Upgradeable.supportsInterface(interfaceId) ||\\n            interfaceId == type(IERC2981).interfaceId;\\n    }\\n\\n    /*************\\n     * Internals *\\n     *************/\\n\\n    // Mapping of token ID to URI\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    // Used for checking if token with given ID exists\\n    function _exists(uint256 _tokenId) internal view virtual returns (bool) {\\n        return tokenSupply[_tokenId] > 0;\\n    }\\n\\n    function _setRoyalties(address newAddress, uint256 newBps) internal {\\n        require(newBps <= ROYALTIES_BASIS, \\\"Cannot set royalties to over 100%\\\");\\n\\n        royaltiesAddress = newAddress;\\n        royaltiesBasisPoints = newBps;\\n    }\\n}\\n\",\"keccak256\":\"0x96e7912dbb93038eb197c392111045626207d861bf3ffdea1d1af73307d20f29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200627138038062006271833981016040819052620000349162001083565b600054610100900460ff1615808015620000555750600054600160ff909116105b8062000085575062000072306200024e60201b62001eab1760201c565b15801562000085575060005460ff166001145b620000dd5760405162461bcd60e51b815260206004820152602e6024820152600080516020620061f183398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000101576000805461ff0019166101001790555b801562000137576000805461ff001916905560405160018152600080516020620062318339815191529060200160405180910390a15b50600054610100900460ff1615808015620001595750600054600160ff909116105b8062000189575062000176306200024e60201b62001eab1760201c565b15801562000189575060005460ff166001145b620001dd5760405162461bcd60e51b815260206004820152602e6024820152600080516020620061f183398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000d4565b6000805460ff19166001179055801562000201576000805461ff0019166101001790555b6200020e8484846200025d565b801562000244576000805461ff001916905560405160018152600080516020620062318339815191529060200160405180910390a15b5050505062001409565b6001600160a01b03163b151590565b600054610100900460ff16158080156200027e5750600054600160ff909116105b80620002ae57506200029b306200024e60201b62001eab1760201c565b158015620002ae575060005460ff166001145b620003025760405162461bcd60e51b815260206004820152602e6024820152600080516020620061f183398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000d4565b6000805460ff19166001179055801562000326576000805461ff0019166101001790555b60408051602081019091526000815262000340906200042c565b6200034a62000496565b6200036483608001518460600151620004fe60201b60201c565b602083015160ff80546060870151604087015161ffff1990921693151561ff0019169390931761010093151584021762ff0000191662010000911515919091021790558451620003b5908262001222565b50602084015161010190620003cb908262001222565b50825161010290620003de908262001222565b506040840151620003f0908362000584565b801562000426576000805461ff001916905560405160018152600080516020620062318339815191529060200160405180910390a15b50505050565b600054610100900460ff16620004885760405162461bcd60e51b815260206004820152602b60248201526000805160206200621183398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000d4565b620004938162000853565b50565b600054610100900460ff16620004f25760405162461bcd60e51b815260206004820152602b60248201526000805160206200621183398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000d4565b620004fc620008ba565b565b6127108111156200055c5760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f742073657420726f79616c7469657320746f206f766572203130306044820152602560f81b6064820152608401620000d4565b61010380546001600160a01b0319166001600160a01b03939093169290921790915561010455565b6001600160a01b038216620005dc5760405162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374206d757374206861766520616e206f776e657200000000006044820152606401620000d4565b60c980546001600160a01b0384166001600160a01b0319918216811790925560ca805490911633179055620006229060008051602062006251833981519152906200091d565b60ca546200064a9060008051602062006251833981519152906001600160a01b03166200091d565b60005b81518110156200084e5760008282815181106200066e576200066e620012ee565b60200260200101516000015190506200068d81620009a860201b60201c565b620006a382602062001eba62000a7f821b17811c565b604051602001620006b5919062001304565b60405160208183030381529060405290620006e55760405162461bcd60e51b8152600401620000d491906200134b565b5060005b838381518110620006fe57620006fe620012ee565b60200260200101516020015151811015620007f65762000761828585815181106200072d576200072d620012ee565b60200260200101516020015183815181106200074d576200074d620012ee565b60200260200101516200091d60201b60201c565b600082815260cb602052604090208451859085908110620007865762000786620012ee565b6020026020010151602001518281518110620007a657620007a6620012ee565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580620007ed8162001396565b915050620006e9565b508282815181106200080c576200080c620012ee565b602002602001015160400151156200083857600081815260cc60205260409020805460ff191660011790555b5080620008458162001396565b9150506200064d565b505050565b600054610100900460ff16620008af5760405162461bcd60e51b815260206004820152602b60248201526000805160206200621183398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000d4565b620004938162000c3f565b600054610100900460ff16620009165760405162461bcd60e51b815260206004820152602b60248201526000805160206200621183398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000d4565b600160cd55565b62000929828262000c4d565b620009a45760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620009633390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c3686821480620009f857507f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f582145b8062000a2357507f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e682145b8062000a4e57507fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2282145b8062000a7957507f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c82145b92915050565b6060600062000a90836002620013b2565b62000a9d906002620013d4565b6001600160401b0381111562000ab75762000ab762000cee565b6040519080825280601f01601f19166020018201604052801562000ae2576020820181803683370190505b509050600360fc1b8160008151811062000b005762000b00620012ee565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062000b325762000b32620012ee565b60200101906001600160f81b031916908160001a905350600062000b58846002620013b2565b62000b65906001620013d4565b90505b600181111562000be7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062000b9d5762000b9d620012ee565b1a60f81b82828151811062000bb65762000bb6620012ee565b60200101906001600160f81b031916908160001a90535060049490941c9362000bdf81620013ef565b905062000b68565b50831562000c385760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620000d4565b9392505050565b6067620009a4828262001222565b60c9546000906001600160a01b039081169083160362000c705750600162000a79565b8262000c7f5750600062000a79565b62000ca5600080516020620062518339815191528362000cc360201b620020551760201c565b8062000c38575062000c38838362000cc360201b620020551760201c565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171562000d295762000d2962000cee565b60405290565b604051608081016001600160401b038111828210171562000d295762000d2962000cee565b604051601f8201601f191681016001600160401b038111828210171562000d7f5762000d7f62000cee565b604052919050565b60005b8381101562000da457818101518382015260200162000d8a565b83811115620004265750506000910152565b600082601f83011262000dc857600080fd5b81516001600160401b0381111562000de45762000de462000cee565b62000df9601f8201601f191660200162000d54565b81815284602083860101111562000e0f57600080fd5b62000e2282602083016020870162000d87565b949350505050565b80516001600160a01b038116811462000e4257600080fd5b919050565b8051801515811462000e4257600080fd5b600060a0828403121562000e6b57600080fd5b60405160a081016001600160401b03808211838310171562000e915762000e9162000cee565b81604052829350845191508082111562000eaa57600080fd5b5062000eb98582860162000db6565b82525062000eca6020840162000e47565b602082015262000edd6040840162000e47565b60408201526060830151606082015262000efa6080840162000e2a565b60808201525092915050565b60006001600160401b0382111562000f225762000f2262000cee565b5060051b60200190565b600082601f83011262000f3e57600080fd5b8151602062000f5762000f518362000f06565b62000d54565b82815260059290921b8401810191818101908684111562000f7757600080fd5b8286015b84811015620010785780516001600160401b038082111562000f9d5760008081fd5b908801906060828b03601f190181131562000fb85760008081fd5b62000fc262000d04565b8784015181526040808501518481111562000fdd5760008081fd5b85019350603f84018d1362000ff25760008081fd5b888401516200100562000f518262000f06565b81815260059190911b85018201908a8101908f831115620010265760008081fd5b958301955b828710156200104f576200103f8762000e2a565b8252958b0195908b01906200102b565b848c01525062001063905085840162000e47565b90820152865250505091830191830162000f7b565b509695505050505050565b6000806000606084860312156200109957600080fd5b83516001600160401b0380821115620010b157600080fd5b9085019060808288031215620010c657600080fd5b620010d062000d2f565b825182811115620010e057600080fd5b620010ee8982860162000db6565b8252506020830151828111156200110457600080fd5b620011128982860162000db6565b602083015250620011266040840162000e2a565b6040820152620011396060840162000e47565b606082015260208701519095509150808211156200115657600080fd5b620011648783880162000e58565b935060408601519150808211156200117b57600080fd5b506200118a8682870162000f2c565b9150509250925092565b600181811c90821680620011a957607f821691505b602082108103620011ca57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200084e57600081815260208120601f850160051c81016020861015620011f95750805b601f850160051c820191505b818110156200121a5782815560010162001205565b505050505050565b81516001600160401b038111156200123e576200123e62000cee565b62001256816200124f845462001194565b84620011d0565b602080601f8311600181146200128e5760008415620012755750858301515b600019600386901b1c1916600185901b1785556200121a565b600085815260208120601f198616915b82811015620012bf578886015182559484019460019091019084016200129e565b5085821015620012de5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b7f4772616e756c6172526f6c65733a20696e76616c696420726f6c6520000000008152600082516200133e81601c85016020870162000d87565b91909101601c0192915050565b60208152600082518060208401526200136c81604085016020870162000d87565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b600060018201620013ab57620013ab62001380565b5060010190565b6000816000190483118215151615620013cf57620013cf62001380565b500290565b60008219821115620013ea57620013ea62001380565b500190565b60008162001401576200140162001380565b506000190190565b614dd880620014196000396000f3fe608060405234801561001057600080fd5b50600436106102d55760003560e01c80638d010db311610182578063b930908f116100e9578063e985e9c5116100a2578063f242432a1161007c578063f242432a14610713578063f2fde38b14610726578063ff0a9f5114610739578063ffa1ad741461074c57600080fd5b8063e985e9c5146106ba578063e9a9c850146106f6578063f153c2e51461070b57600080fd5b8063b930908f14610644578063bd85b03914610659578063d547741f1461067a578063de374d9d1461068d578063e3d52072146106a0578063e8a3d485146106b257600080fd5b8063a22cb4651161013b578063a22cb465146105aa578063a2f551ec146105bd578063a3f4df7e146105d0578063a53a84b614610600578063b29c097a1461060a578063b390c0ab1461063157600080fd5b80638d010db3146105365780638da5cb5b1461055a57806391d148541461056b57806395d89b411461057e5780639da5b0a514610586578063a217fddf146105a257600080fd5b80632c23b965116102415780634e1273f4116101fa5780636f8b1495116101d45780636f8b1495146104e557806375b238fc146104fb5780637e712f381461051057806383ca4b6f1461052357600080fd5b80634e1273f4146104b15780634e6f9dd6146104d15780636c0360eb146104dd57600080fd5b80632c23b965146104245780632e628b61146104395780632eb2c2d61461044c5780632f2ff15d1461045f578063328825351461047257806336568abe1461049e57600080fd5b8063206b60f911610293578063206b60f914610373578063224a177514610388578063248a9ca31461039b57806325d22c8e146103be5780632693ebf2146103d15780632a55205a146103f257600080fd5b8062fdd58e146102da57806301ffc9a71461030057806302fe53051461032357806306fdde03146103385780630e89341c1461034d57806320333b1314610360575b600080fd5b6102ed6102e836600461373f565b610755565b6040519081526020015b60405180910390f35b61031361030e36600461377f565b6107f0565b60405190151581526020016102f7565b610336610331366004613895565b61081b565b005b610340610840565b6040516102f79190613921565b61034061035b366004613934565b6108cf565b61033661036e36600461394d565b6109f9565b6102ed600080516020614cc383398151915281565b6103366103963660046139ad565b610b6c565b6102ed6103a9366004613934565b60009081526097602052604090206001015490565b6103366103cc366004613c17565b610c05565b6102ed6103df366004613934565b6101066020526000908152604090205481565b610405610400366004613d16565b610dc5565b604080516001600160a01b0390931683526020830191909152016102f7565b6102ed600080516020614ce383398151915281565b610336610447366004613d38565b610e03565b61033661045a366004613e19565b610f8b565b61033661046d366004613ec2565b610fd7565b61010354610486906001600160a01b031681565b6040516001600160a01b0390911681526020016102f7565b6103366104ac366004613ec2565b611001565b6104c46104bf366004613eee565b61107b565b6040516102f79190613f8c565b60ff8054610313911681565b6103406111a4565b6103406040518060200160405280600081525081565b6102ed600080516020614d6383398151915281565b61033661051e366004613f9f565b6111b2565b61033661053136600461401c565b611306565b610313610544366004613934565b6101056020526000908152604090205460ff1681565b60c9546001600160a01b0316610486565b610313610579366004613ec2565b6113fa565b610340611457565b61058f61271081565b60405161ffff90911681526020016102f7565b6102ed600081565b6103366105b8366004614052565b611465565b6103366105cb36600461407c565b611470565b61034060405180604001604052806011815260200170115490cc4c4d4d539195141c9bd91d58dd607a1b81525081565b6102ed6101045481565b6102ed7f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e681565b61033661063f366004613d16565b611758565b6102ed600080516020614d8383398151915281565b6102ed610667366004613934565b6000908152610106602052604090205490565b610336610688366004613ec2565b6117fb565b60ff805461031391620100009091041681565b60ff8054610313916101009091041681565b610340611820565b6103136106c83660046140ba565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6102ed600080516020614d4383398151915281565b61033661189c565b6103366107213660046140e4565b6118ec565b610336610734366004614148565b611931565b610336610747366004614163565b611a8c565b6102ed61271181565b60006001600160a01b0383166107c55760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60006107fb82612080565b806107ea57506001600160e01b0319821663152a902d60e11b1492915050565b600080516020614ce3833981519152610833816120d0565b61083c826120dd565b5050565b610100805461084e90614287565b80601f016020809104026020016040519081016040528092919081815260200182805461087a90614287565b80156108c75780601f1061089c576101008083540402835291602001916108c7565b820191906000526020600020905b8154815290600101906020018083116108aa57829003601f168201915b505050505081565b600081815261010760205260408120805460609291906108ee90614287565b905011156109eb576000610102805461090690614287565b9050111561094c576101026101076000848152602001908152602001600020604051602001610936929190614334565b6040516020818303038152906040529050919050565b600082815261010760205260409020805461096690614287565b80601f016020809104026020016040519081016040528092919081815260200182805461099290614287565b80156109df5780601f106109b4576101008083540402835291602001916109df565b820191906000526020600020905b8154815290600101906020018083116109c257829003601f168201915b50505050509050919050565b6107ea826120e9565b919050565b600080516020614d43833981519152610a11816120d0565b600260cd5403610a635760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107bc565b600260cd556000848152610106602052604090205415610ac55760405162461bcd60e51b815260206004820152601960248201527f4e46543a20746f6b656e20616c7265616479206d696e7465640000000000000060448201526064016107bc565b815115610b1f57600084815261010760205260409020610ae5838261438f565b50837f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b83604051610b169190613921565b60405180910390a25b6000848152610106602052604081208054859290610b3e908490614464565b92505081905550610b60858585604051806020016040528060008152506120f8565b5050600160cd55505050565b600080516020614cc3833981519152610b84816120d0565b60ff805462010000900416610bd45760405162461bcd60e51b8152602060048201526016602482015275151c985b9cd9995c9cc8185c9948191a5cd8589b195960521b60448201526064016107bc565b60c954604080516020810190915260008152610bff916001600160a01b03169086908690869061220e565b50505050565b600054610100900460ff1615808015610c255750600054600160ff909116105b80610c3f5750303b158015610c3f575060005460ff166001145b610ca25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107bc565b6000805460ff191660011790558015610cc5576000805461ff0019166101001790555b610cdd6040518060200160405280600081525061233c565b610ce561236c565b610cf78360800151846060015161239d565b602083015160ff80546060870151604087015161ffff1990921693151561ff0019169390931761010093151584021762ff0000191662010000911515919091021790558451610d46908261438f565b50602084015161010190610d5a908261438f565b50825161010290610d6b908261438f565b50610d7a846040015183612421565b8015610bff576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b610103546101045460009182916001600160a01b039091169061271090610ded90869061447c565b610df791906144b1565b915091505b9250929050565b600080516020614ce3833981519152610e1b816120d0565b60ff80541680610e845750610102604051602001610e3991906144c5565b60408051601f198184030181529190528051602090910120610e5b85806144d1565b604051602001610e6c929190614517565b60405160208183030381529060405280519060200120145b610ec55760405162461bcd60e51b815260206004820152601260248201527126b2ba30b230ba309034b990333937bd32b760711b60448201526064016107bc565b610ecf84806144d1565b61010291610ede919083614527565b50610efc610ef260a0860160808701614148565b856060013561239d565b610f0c60608501604086016145e6565b610f1d5760ff805462ff0000191690555b610f2d60408501602086016145e6565b158015610f3b575060ff8054165b15610f745760ff805460ff191690556040517fb59f45df38ec0d34114b1248c38a29cdbccbf3e745ae3ef310ac66199a4ceccf90600090a15b610f7d836126a5565b8115610bff57610bff61189c565b6001600160a01b038516331480610fa75750610fa785336106c8565b610fc35760405162461bcd60e51b81526004016107bc90614601565b610fd0858585858561298f565b5050505050565b600082815260976020526040902060010154610ff2816120d0565b610ffc8383612b2e565b505050565b6001600160a01b03811633146110715760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107bc565b61083c8282612bb4565b606081518351146110e05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016107bc565b600083516001600160401b038111156110fb576110fb61379c565b604051908082528060200260200182016040528015611124578160200160208202803683370190505b50905060005b845181101561119c5761116f85828151811061114857611148614650565b602002602001015185838151811061116257611162614650565b6020026020010151610755565b82828151811061118157611181614650565b602090810291909101015261119581614666565b905061112a565b509392505050565b610102805461084e90614287565b600080516020614cc38339815191526111ca816120d0565b60ff80546201000090041661121a5760405162461bcd60e51b8152602060048201526016602482015275151c985b9cd9995c9cc8185c9948191a5cd8589b195960521b60448201526064016107bc565b8251845114801561122c575081518351145b6112725760405162461bcd60e51b81526020600482015260176024820152764d69736d61746368656420696e7075742061727261797360481b60448201526064016107bc565b60005b8351811015610fd05760c95485516112f4916001600160a01b0316908790849081106112a3576112a3614650565b60200260200101518684815181106112bd576112bd614650565b60200260200101518685815181106112d7576112d7614650565b60200260200101516040518060200160405280600081525061220e565b806112fe81614666565b915050611275565b600080516020614d8383398151915261131e816120d0565b60ff80546101009004166113695760405162461bcd60e51b8152602060048201526012602482015271109d5c9b9cc8185c9948191a5cd8589b195960721b60448201526064016107bc565b60c954611380906001600160a01b03168484612c1b565b60005b8351811015610bff5782818151811061139e5761139e614650565b602002602001015161010660008684815181106113bd576113bd614650565b6020026020010151815260200190815260200160002060008282546113e2919061467f565b909155508190506113f281614666565b915050611383565b60c9546000906001600160a01b039081169083160361141b575060016107ea565b82611428575060006107ea565b611440600080516020614d6383398151915283612055565b8061145057506114508383612055565b9392505050565b610101805461084e90614287565b61083c338383612da8565b7f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e661149a816120d0565b600084815261010660205260409020546114ed5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016107bc565b60ff8054166115335760405162461bcd60e51b815260206004820152601260248201527126b2ba30b230ba309034b990333937bd32b760711b60448201526064016107bc565b6000848152610105602052604090205460ff1615156001036115895760405162461bcd60e51b815260206004820152600f60248201526e2a37b5b2b71034b990333937bd32b760891b60448201526064016107bc565b81806115955750825115155b6115fb5760405162461bcd60e51b815260206004820152603160248201527f456974686572205f6e6577557269206f72205f6973467265657a65546f6b656e604482015270155c9a4f5d1c9d59481c995c5d5a5c9959607a1b60648201526084016107bc565b8251156116ed57826040516020016116139190614696565b60408051601f1981840301815282825280516020918201206000888152610107909252919020909161164591906144c5565b60405180910390200361169a5760405162461bcd60e51b815260206004820181905260248201527f4e657720746f6b656e205552492069732073616d65206173207570646174656460448201526064016107bc565b6000848152610107602052604090206116b3848261438f565b50837f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b846040516116e49190613921565b60405180910390a25b8115610bff57600084815261010560209081526040808320805460ff1916600117905561010790915290819020905185917fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b556572079161174a91906146b2565b60405180910390a250505050565b600080516020614d83833981519152611770816120d0565b60ff80546101009004166117bb5760405162461bcd60e51b8152602060048201526012602482015271109d5c9b9cc8185c9948191a5cd8589b195960721b60448201526064016107bc565b60c9546117d2906001600160a01b03168484612e88565b60008381526101066020526040812080548492906117f190849061467f565b9091555050505050565b600082815260976020526040902060010154611816816120d0565b610ffc8383612bb4565b6060600061187061183361010454612f8f565b6101035461184b906001600160a01b03166014613097565b60405160200161185c92919061473d565b6040516020818303038152906040526131e3565b905060008160405160200161188591906147c4565b60408051601f198184030181529190529392505050565b600080516020614d638339815191526118b4816120d0565b60ca546118d990600080516020614d63833981519152906001600160a01b0316612bb4565b5060ca80546001600160a01b0319169055565b6001600160a01b038516331480611908575061190885336106c8565b6119245760405162461bcd60e51b81526004016107bc90614601565b610fd0858585858561220e565b60c9546001600160a01b039081169082160361198f5760405162461bcd60e51b815260206004820181905260248201527f4772616e756c6172526f6c65733a20616c726561647920746865206f776e657260448201526064016107bc565b60c9546001600160a01b031633146119e95760405162461bcd60e51b815260206004820152601c60248201527f4772616e756c6172526f6c65733a206e6f7420746865206f776e65720000000060448201526064016107bc565b60c954611a0e90600080516020614d63833981519152906001600160a01b0316612bb4565b60c980546001600160a01b038381166001600160a01b0319831681179093551690611a4890600080516020614d6383398151915290612b2e565b816001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080516020614d43833981519152611aa4816120d0565b600260cd5403611af65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107bc565b600260cd5583518551148015611b0d575082518451145b8015611b1a575081518351145b611b605760405162461bcd60e51b81526020600482015260176024820152764d69736d61746368656420696e7075742061727261797360481b60448201526064016107bc565b60005b8451811015611e9e57611b9e858281518110611b8157611b81614650565b602002602001015160009081526101066020526040902054151590565b15611beb5760405162461bcd60e51b815260206004820152601f60248201527f4f6e65206f6620746f6b656e7320697320616c7265616479206d696e7465640060448201526064016107bc565b858181518110611bfd57611bfd614650565b60200260200101516001600160a01b0316868281518110611c2057611c20614650565b60200260200101516001600160a01b031614611c7e5760405162461bcd60e51b815260206004820181905260248201527f4e46543a206f6e65206f662061646472657373657320697320696e76616c696460448201526064016107bc565b6000848281518110611c9257611c92614650565b602002602001015111611ce75760405162461bcd60e51b815260206004820152601c60248201527f4e46543a20616c6c20616d6f756e7473206d757374206265203e20300000000060448201526064016107bc565b838181518110611cf957611cf9614650565b60200260200101516101066000878481518110611d1857611d18614650565b602002602001015181526020019081526020016000206000828254611d3d9190614464565b925050819055506000838281518110611d5857611d58614650565b6020026020010151511115611e2657828181518110611d7957611d79614650565b60200260200101516101076000878481518110611d9857611d98614650565b602002602001015181526020019081526020016000209081611dba919061438f565b50848181518110611dcd57611dcd614650565b60200260200101517f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b848381518110611e0857611e08614650565b6020026020010151604051611e1d9190613921565b60405180910390a25b611e8c868281518110611e3b57611e3b614650565b6020026020010151868381518110611e5557611e55614650565b6020026020010151868481518110611e6f57611e6f614650565b6020026020010151604051806020016040528060008152506120f8565b80611e9681614666565b915050611b63565b5050600160cd5550505050565b6001600160a01b03163b151590565b60606000611ec983600261447c565b611ed4906002614464565b6001600160401b03811115611eeb57611eeb61379c565b6040519080825280601f01601f191660200182016040528015611f15576020820181803683370190505b509050600360fc1b81600081518110611f3057611f30614650565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f5f57611f5f614650565b60200101906001600160f81b031916908160001a9053506000611f8384600261447c565b611f8e906001614464565b90505b6001811115612006576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611fc257611fc2614650565b1a60f81b828281518110611fd857611fd8614650565b60200101906001600160f81b031916908160001a90535060049490941c93611fff81614809565b9050611f91565b5083156114505760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107bc565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006001600160e01b03198216636cdb3d1360e11b14806120b157506001600160e01b031982166303a24d0760e21b145b806107ea57506301ffc9a760e01b6001600160e01b03198316146107ea565b6120da813361334c565b50565b606761083c828261438f565b60606067805461096690614287565b6001600160a01b0384166121585760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016107bc565b336000612164856133b0565b90506000612171856133b0565b905060008681526065602090815260408083206001600160a01b038b168452909152812080548792906121a5908490614464565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612205836000898989896133fb565b50505050505050565b6001600160a01b0384166122345760405162461bcd60e51b81526004016107bc90614820565b336000612240856133b0565b9050600061224d856133b0565b905060008681526065602090815260408083206001600160a01b038c168452909152902054858110156122925760405162461bcd60e51b81526004016107bc90614865565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906122d1908490614464565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612331848a8a8a8a8a6133fb565b505050505050505050565b600054610100900460ff166123635760405162461bcd60e51b81526004016107bc906148af565b6120da81613556565b600054610100900460ff166123935760405162461bcd60e51b81526004016107bc906148af565b61239b613586565b565b6127108111156123f95760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f742073657420726f79616c7469657320746f206f766572203130306044820152602560f81b60648201526084016107bc565b61010380546001600160a01b0319166001600160a01b03939093169290921790915561010455565b6001600160a01b0382166124775760405162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374206d757374206861766520616e206f776e6572000000000060448201526064016107bc565b60c980546001600160a01b0384166001600160a01b0319918216811790925560ca8054909116331790556124ba90600080516020614d6383398151915290612b2e565b60ca546124df90600080516020614d63833981519152906001600160a01b0316612b2e565b60005b8151811015610ffc5760008282815181106124ff576124ff614650565b6020026020010151600001519050612516816135b4565b612521826020611eba565b60405160200161253191906148fa565b6040516020818303038152906040529061255e5760405162461bcd60e51b81526004016107bc9190613921565b5060005b83838151811061257457612574614650565b60200260200101516020015151811015612654576125c88285858151811061259e5761259e614650565b60200260200101516020015183815181106125bb576125bb614650565b6020026020010151612b2e565b600082815260cb6020526040902084518590859081106125ea576125ea614650565b602002602001015160200151828151811061260757612607614650565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558061264c81614666565b915050612562565b5082828151811061266757612667614650565b6020026020010151604001511561269257600081815260cc60205260409020805460ff191660011790555b508061269d81614666565b9150506124e2565b8051156120da576126c4600080516020614d63833981519152336113fa565b6127105760405162461bcd60e51b815260206004820152601b60248201527f4772616e756c6172526f6c65733a206e6f7420616e2061646d696e000000000060448201526064016107bc565b60005b815181101561083c57600082828151811061273057612730614650565b6020026020010151600001519050612747816135b4565b612752826020611eba565b60405160200161276291906148fa565b6040516020818303038152906040529061278f5760405162461bcd60e51b81526004016107bc9190613921565b50600081815260cc602090815260409091205460ff1615906127b2908390611eba565b6040516020016127c2919061493f565b604051602081830303815290604052906127ef5760405162461bcd60e51b81526004016107bc9190613921565b5060005b600082815260cb602052604090205481101561285b57600082815260cb6020526040902080546128499184918490811061282f5761282f614650565b6000918252602090912001546001600160a01b0316612bb4565b8061285381614666565b9150506127f3565b50600081815260cb60205260408120612873916136f6565b60005b83838151811061288857612888614650565b6020026020010151602001515181101561293e576128b28285858151811061259e5761259e614650565b600082815260cb6020526040902084518590859081106128d4576128d4614650565b60200260200101516020015182815181106128f1576128f1614650565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558061293681614666565b915050612876565b5082828151811061295157612951614650565b6020026020010151604001511561297c57600081815260cc60205260409020805460ff191660011790555b508061298781614666565b915050612713565b81518351146129b05760405162461bcd60e51b81526004016107bc9061498f565b6001600160a01b0384166129d65760405162461bcd60e51b81526004016107bc90614820565b3360005b8451811015612ac05760008582815181106129f7576129f7614650565b602002602001015190506000858381518110612a1557612a15614650565b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015612a665760405162461bcd60e51b81526004016107bc90614865565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612aa5908490614464565b9250508190555050505080612ab990614666565b90506129da565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612b109291906149d7565b60405180910390a4612b2681878787878761363b565b505050505050565b612b3882826113fa565b61083c5760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612b703390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612bbe82826113fa565b1561083c5760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b038316612c415760405162461bcd60e51b81526004016107bc90614a05565b8051825114612c625760405162461bcd60e51b81526004016107bc9061498f565b604080516020810190915260009081905233905b8351811015612d3b576000848281518110612c9357612c93614650565b602002602001015190506000848381518110612cb157612cb1614650565b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015612d025760405162461bcd60e51b81526004016107bc90614a48565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580612d3381614666565b915050612c76565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612d8c9291906149d7565b60405180910390a4604080516020810190915260009052610bff565b816001600160a01b0316836001600160a01b031603612e1b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016107bc565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038316612eae5760405162461bcd60e51b81526004016107bc90614a05565b336000612eba846133b0565b90506000612ec7846133b0565b6040805160208082018352600091829052888252606581528282206001600160a01b038b1683529052205490915084811015612f155760405162461bcd60e51b81526004016107bc90614a48565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052612205565b606081600003612fb65750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612fe05780612fca81614666565b9150612fd99050600a836144b1565b9150612fba565b6000816001600160401b03811115612ffa57612ffa61379c565b6040519080825280601f01601f191660200182016040528015613024576020820181803683370190505b5090505b841561308f5761303960018361467f565b9150613046600a86614a8c565b613051906030614464565b60f81b81838151811061306657613066614650565b60200101906001600160f81b031916908160001a905350613088600a866144b1565b9450613028565b949350505050565b606060006130a683600261447c565b6130b1906002614464565b6001600160401b038111156130c8576130c861379c565b6040519080825280601f01601f1916602001820160405280156130f2576020820181803683370190505b509050600360fc1b8160008151811061310d5761310d614650565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061313c5761313c614650565b60200101906001600160f81b031916908160001a905350600061316084600261447c565b61316b906001614464565b90505b6001811115612006576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061319f5761319f614650565b1a60f81b8282815181106131b5576131b5614650565b60200101906001600160f81b031916908160001a90535060049490941c936131dc81614809565b905061316e565b80516060906000819003613207575050604080516020810190915260008152919050565b60006003613216836002614464565b61322091906144b1565b61322b90600461447c565b9050600061323a826020614464565b6001600160401b038111156132515761325161379c565b6040519080825280601f01601f19166020018201604052801561327b576020820181803683370190505b5090506000604051806060016040528060408152602001614d03604091399050600181016020830160005b86811015613307576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b8352600490920191016132a6565b50600386066001811461332157600281146133325761333e565b613d3d60f01b60011983015261333e565b603d60f81b6000198301525b505050918152949350505050565b61335682826113fa565b61083c5761336e816001600160a01b03166014611eba565b613379836020611eba565b60405160200161338a929190614aa0565b60408051601f198184030181529082905262461bcd60e51b82526107bc91600401613921565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106133ea576133ea614650565b602090810291909101015292915050565b6001600160a01b0384163b15612b265760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061343f9089908990889088908890600401614b15565b6020604051808303816000875af192505050801561347a575060408051601f3d908101601f1916820190925261347791810190614b5a565b60015b61352657613486614b77565b806308c379a0036134bf575061349a614b93565b806134a557506134c1565b8060405162461bcd60e51b81526004016107bc9190613921565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016107bc565b6001600160e01b0319811663f23a6e6160e01b146122055760405162461bcd60e51b81526004016107bc90614c1c565b600054610100900460ff1661357d5760405162461bcd60e51b81526004016107bc906148af565b6120da816120dd565b600054610100900460ff166135ad5760405162461bcd60e51b81526004016107bc906148af565b600160cd55565b6000600080516020614d438339815191528214806135df5750600080516020614ce383398151915282145b8061360957507f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e682145b806136215750600080516020614d8383398151915282145b806107ea575050600080516020614cc38339815191521490565b6001600160a01b0384163b15612b265760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061367f9089908990889088908890600401614c64565b6020604051808303816000875af19250505080156136ba575060408051601f3d908101601f191682019092526136b791810190614b5a565b60015b6136c657613486614b77565b6001600160e01b0319811663bc197c8160e01b146122055760405162461bcd60e51b81526004016107bc90614c1c565b50805460008255906000526020600020908101906120da91905b808211156137245760008155600101613710565b5090565b80356001600160a01b03811681146109f457600080fd5b6000806040838503121561375257600080fd5b61375b83613728565b946020939093013593505050565b6001600160e01b0319811681146120da57600080fd5b60006020828403121561379157600080fd5b813561145081613769565b634e487b7160e01b600052604160045260246000fd5b606081018181106001600160401b03821117156137d1576137d161379c565b60405250565b608081018181106001600160401b03821117156137d1576137d161379c565b601f8201601f191681016001600160401b038111828210171561381b5761381b61379c565b6040525050565b600082601f83011261383357600080fd5b81356001600160401b0381111561384c5761384c61379c565b604051613863601f8301601f1916602001826137f6565b81815284602083860101111561387857600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156138a757600080fd5b81356001600160401b038111156138bd57600080fd5b61308f84828501613822565b60005b838110156138e45781810151838201526020016138cc565b83811115610bff5750506000910152565b6000815180845261390d8160208601602086016138c9565b601f01601f19169290920160200192915050565b60208152600061145060208301846138f5565b60006020828403121561394657600080fd5b5035919050565b6000806000806080858703121561396357600080fd5b61396c85613728565b9350602085013592506040850135915060608501356001600160401b0381111561399557600080fd5b6139a187828801613822565b91505092959194509250565b6000806000606084860312156139c257600080fd5b6139cb84613728565b95602085013595506040909401359392505050565b803580151581146109f457600080fd5b600060a08284031215613a0257600080fd5b60405160a081016001600160401b038282108183111715613a2557613a2561379c565b816040528293508435915080821115613a3d57600080fd5b50613a4a85828601613822565b825250613a59602084016139e0565b6020820152613a6a604084016139e0565b604082015260608301356060820152613a8560808401613728565b60808201525092915050565b60006001600160401b03821115613aaa57613aaa61379c565b5060051b60200190565b600082601f830112613ac557600080fd5b81356020613ad282613a91565b604051613adf82826137f6565b83815260059390931b8501820192828101915086841115613aff57600080fd5b8286015b84811015613b2157613b1481613728565b8352918301918301613b03565b509695505050505050565b600082601f830112613b3d57600080fd5b81356020613b4a82613a91565b60408051613b5883826137f6565b84815260059490941b8601830193838101925087851115613b7857600080fd5b8387015b85811015613c0b5780356001600160401b0380821115613b9c5760008081fd5b908901906060828c03601f1901811315613bb65760008081fd5b8551613bc1816137b2565b8884013581528684013583811115613bd95760008081fd5b613be78e8b83880101613ab4565b8a83015250613bf78285016139e0565b818801528752505050928401928401613b7c565b50979650505050505050565b600080600060608486031215613c2c57600080fd5b83356001600160401b0380821115613c4357600080fd5b9085019060808288031215613c5757600080fd5b604051613c63816137d7565b823582811115613c7257600080fd5b613c7e89828601613822565b825250602083013582811115613c9357600080fd5b613c9f89828601613822565b602083015250613cb160408401613728565b6040820152613cc2606084016139e0565b606082015294506020860135915080821115613cdd57600080fd5b613ce9878388016139f0565b93506040860135915080821115613cff57600080fd5b50613d0c86828701613b2c565b9150509250925092565b60008060408385031215613d2957600080fd5b50508035926020909101359150565b600080600060608486031215613d4d57600080fd5b83356001600160401b0380821115613d6457600080fd5b9085019060a08288031215613d7857600080fd5b90935060208501359080821115613d8e57600080fd5b50613d9b86828701613b2c565b925050613daa604085016139e0565b90509250925092565b600082601f830112613dc457600080fd5b81356020613dd182613a91565b604051613dde82826137f6565b83815260059390931b8501820192828101915086841115613dfe57600080fd5b8286015b84811015613b215780358352918301918301613e02565b600080600080600060a08688031215613e3157600080fd5b613e3a86613728565b9450613e4860208701613728565b935060408601356001600160401b0380821115613e6457600080fd5b613e7089838a01613db3565b94506060880135915080821115613e8657600080fd5b613e9289838a01613db3565b93506080880135915080821115613ea857600080fd5b50613eb588828901613822565b9150509295509295909350565b60008060408385031215613ed557600080fd5b82359150613ee560208401613728565b90509250929050565b60008060408385031215613f0157600080fd5b82356001600160401b0380821115613f1857600080fd5b613f2486838701613ab4565b93506020850135915080821115613f3a57600080fd5b50613f4785828601613db3565b9150509250929050565b600081518084526020808501945080840160005b83811015613f8157815187529582019590820190600101613f65565b509495945050505050565b6020815260006114506020830184613f51565b600080600060608486031215613fb457600080fd5b83356001600160401b0380821115613fcb57600080fd5b613fd787838801613ab4565b94506020860135915080821115613fed57600080fd5b613ff987838801613db3565b9350604086013591508082111561400f57600080fd5b50613d0c86828701613db3565b6000806040838503121561402f57600080fd5b82356001600160401b038082111561404657600080fd5b613f2486838701613db3565b6000806040838503121561406557600080fd5b61406e83613728565b9150613ee5602084016139e0565b60008060006060848603121561409157600080fd5b8335925060208401356001600160401b038111156140ae57600080fd5b613d9b86828701613822565b600080604083850312156140cd57600080fd5b6140d683613728565b9150613ee560208401613728565b600080600080600060a086880312156140fc57600080fd5b61410586613728565b945061411360208701613728565b9350604086013592506060860135915060808601356001600160401b0381111561413c57600080fd5b613eb588828901613822565b60006020828403121561415a57600080fd5b61145082613728565b6000806000806080858703121561417957600080fd5b84356001600160401b038082111561419057600080fd5b61419c88838901613ab4565b95506020915081870135818111156141b357600080fd5b6141bf89828a01613db3565b9550506040870135818111156141d457600080fd5b6141e089828a01613db3565b9450506060870135818111156141f557600080fd5b8701601f8101891361420657600080fd5b803561421181613a91565b60405161421e82826137f6565b82815260059290921b830185019185810191508b83111561423e57600080fd5b8584015b838110156142765780358681111561425a5760008081fd5b6142688e8983890101613822565b845250918601918601614242565b50989b979a50959850505050505050565b600181811c9082168061429b57607f821691505b6020821081036142bb57634e487b7160e01b600052602260045260246000fd5b50919050565b600081546142ce81614287565b600182811680156142e657600181146142fb5761432a565b60ff198416875282151583028701945061432a565b8560005260208060002060005b858110156143215781548a820152908401908201614308565b50505082870194505b5050505092915050565b600061308f61434383866142c1565b846142c1565b601f821115610ffc57600081815260208120601f850160051c810160208610156143705750805b601f850160051c820191505b81811015612b265782815560010161437c565b81516001600160401b038111156143a8576143a861379c565b6143bc816143b68454614287565b84614349565b602080601f8311600181146143f157600084156143d95750858301515b600019600386901b1c1916600185901b178555612b26565b600085815260208120601f198616915b8281101561442057888601518255948401946001909101908401614401565b508582101561443e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600082198211156144775761447761444e565b500190565b60008160001904831182151516156144965761449661444e565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826144c0576144c061449b565b500490565b600061145082846142c1565b6000808335601e198436030181126144e857600080fd5b8301803591506001600160401b0382111561450257600080fd5b602001915036819003821315610dfc57600080fd5b8183823760009101908152919050565b6001600160401b0383111561453e5761453e61379c565b6145528361454c8354614287565b83614349565b6000601f841160018114614586576000851561456e5750838201355b600019600387901b1c1916600186901b178355610fd0565b600083815260209020601f19861690835b828110156145b75786850135825560209485019460019092019101614597565b50868210156145d45760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000602082840312156145f857600080fd5b611450826139e0565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600182016146785761467861444e565b5060010190565b6000828210156146915761469161444e565b500390565b600082516146a88184602087016138c9565b9190910192915050565b60006020808352600084546146c681614287565b808487015260406001808416600081146146e757600181146147015761472f565b60ff1985168984015283151560051b89018301955061472f565b896000528660002060005b858110156147275781548b820186015290830190880161470c565b8a0184019650505b509398975050505050505050565b7f7b2273656c6c65725f6665655f62617369735f706f696e7473223a200000000081526000835161477581601c8501602088016138c9565b731610113332b2afb932b1b4b834b2b73a111d101160611b601c9184019182015283516147a98160308401602088016138c9565b61227d60f01b60309290910191820152603201949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516147fc81601d8501602087016138c9565b91909101601d0192915050565b6000816148185761481861444e565b506000190190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f4772616e756c6172526f6c65733a20696e76616c696420726f6c65200000000081526000825161493281601c8501602087016138c9565b91909101601c0192915050565b73023b930b73ab630b92937b632b99d103937b632960651b81526000825161496e8160148501602087016138c9565b691034b990333937bd32b760b11b6014939091019283015250601e01919050565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b6040815260006149ea6040830185613f51565b82810360208401526149fc8185613f51565b95945050505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b600082614a9b57614a9b61449b565b500690565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614ad88160178501602088016138c9565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614b098160288401602088016138c9565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614b4f908301846138f5565b979650505050505050565b600060208284031215614b6c57600080fd5b815161145081613769565b600060033d1115614b905760046000803e5060005160e01c5b90565b600060443d1015614ba15790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715614bd057505050505090565b8285019150815181811115614be85750505050505090565b843d8701016020828501011115614c025750505050505090565b614c11602082860101876137f6565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090614c9090830186613f51565b8281036060840152614ca28186613f51565b90508281036080840152614cb681856138f5565b9897505050505050505056fe8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f54142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c3686a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775e97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa22a264697066735822122043d512217255bcebb0e1db488835b9314a498aa33849668034565649d75aac7a64736f6c634300080f0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420697f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d55760003560e01c80638d010db311610182578063b930908f116100e9578063e985e9c5116100a2578063f242432a1161007c578063f242432a14610713578063f2fde38b14610726578063ff0a9f5114610739578063ffa1ad741461074c57600080fd5b8063e985e9c5146106ba578063e9a9c850146106f6578063f153c2e51461070b57600080fd5b8063b930908f14610644578063bd85b03914610659578063d547741f1461067a578063de374d9d1461068d578063e3d52072146106a0578063e8a3d485146106b257600080fd5b8063a22cb4651161013b578063a22cb465146105aa578063a2f551ec146105bd578063a3f4df7e146105d0578063a53a84b614610600578063b29c097a1461060a578063b390c0ab1461063157600080fd5b80638d010db3146105365780638da5cb5b1461055a57806391d148541461056b57806395d89b411461057e5780639da5b0a514610586578063a217fddf146105a257600080fd5b80632c23b965116102415780634e1273f4116101fa5780636f8b1495116101d45780636f8b1495146104e557806375b238fc146104fb5780637e712f381461051057806383ca4b6f1461052357600080fd5b80634e1273f4146104b15780634e6f9dd6146104d15780636c0360eb146104dd57600080fd5b80632c23b965146104245780632e628b61146104395780632eb2c2d61461044c5780632f2ff15d1461045f578063328825351461047257806336568abe1461049e57600080fd5b8063206b60f911610293578063206b60f914610373578063224a177514610388578063248a9ca31461039b57806325d22c8e146103be5780632693ebf2146103d15780632a55205a146103f257600080fd5b8062fdd58e146102da57806301ffc9a71461030057806302fe53051461032357806306fdde03146103385780630e89341c1461034d57806320333b1314610360575b600080fd5b6102ed6102e836600461373f565b610755565b6040519081526020015b60405180910390f35b61031361030e36600461377f565b6107f0565b60405190151581526020016102f7565b610336610331366004613895565b61081b565b005b610340610840565b6040516102f79190613921565b61034061035b366004613934565b6108cf565b61033661036e36600461394d565b6109f9565b6102ed600080516020614cc383398151915281565b6103366103963660046139ad565b610b6c565b6102ed6103a9366004613934565b60009081526097602052604090206001015490565b6103366103cc366004613c17565b610c05565b6102ed6103df366004613934565b6101066020526000908152604090205481565b610405610400366004613d16565b610dc5565b604080516001600160a01b0390931683526020830191909152016102f7565b6102ed600080516020614ce383398151915281565b610336610447366004613d38565b610e03565b61033661045a366004613e19565b610f8b565b61033661046d366004613ec2565b610fd7565b61010354610486906001600160a01b031681565b6040516001600160a01b0390911681526020016102f7565b6103366104ac366004613ec2565b611001565b6104c46104bf366004613eee565b61107b565b6040516102f79190613f8c565b60ff8054610313911681565b6103406111a4565b6103406040518060200160405280600081525081565b6102ed600080516020614d6383398151915281565b61033661051e366004613f9f565b6111b2565b61033661053136600461401c565b611306565b610313610544366004613934565b6101056020526000908152604090205460ff1681565b60c9546001600160a01b0316610486565b610313610579366004613ec2565b6113fa565b610340611457565b61058f61271081565b60405161ffff90911681526020016102f7565b6102ed600081565b6103366105b8366004614052565b611465565b6103366105cb36600461407c565b611470565b61034060405180604001604052806011815260200170115490cc4c4d4d539195141c9bd91d58dd607a1b81525081565b6102ed6101045481565b6102ed7f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e681565b61033661063f366004613d16565b611758565b6102ed600080516020614d8383398151915281565b6102ed610667366004613934565b6000908152610106602052604090205490565b610336610688366004613ec2565b6117fb565b60ff805461031391620100009091041681565b60ff8054610313916101009091041681565b610340611820565b6103136106c83660046140ba565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6102ed600080516020614d4383398151915281565b61033661189c565b6103366107213660046140e4565b6118ec565b610336610734366004614148565b611931565b610336610747366004614163565b611a8c565b6102ed61271181565b60006001600160a01b0383166107c55760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60006107fb82612080565b806107ea57506001600160e01b0319821663152a902d60e11b1492915050565b600080516020614ce3833981519152610833816120d0565b61083c826120dd565b5050565b610100805461084e90614287565b80601f016020809104026020016040519081016040528092919081815260200182805461087a90614287565b80156108c75780601f1061089c576101008083540402835291602001916108c7565b820191906000526020600020905b8154815290600101906020018083116108aa57829003601f168201915b505050505081565b600081815261010760205260408120805460609291906108ee90614287565b905011156109eb576000610102805461090690614287565b9050111561094c576101026101076000848152602001908152602001600020604051602001610936929190614334565b6040516020818303038152906040529050919050565b600082815261010760205260409020805461096690614287565b80601f016020809104026020016040519081016040528092919081815260200182805461099290614287565b80156109df5780601f106109b4576101008083540402835291602001916109df565b820191906000526020600020905b8154815290600101906020018083116109c257829003601f168201915b50505050509050919050565b6107ea826120e9565b919050565b600080516020614d43833981519152610a11816120d0565b600260cd5403610a635760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107bc565b600260cd556000848152610106602052604090205415610ac55760405162461bcd60e51b815260206004820152601960248201527f4e46543a20746f6b656e20616c7265616479206d696e7465640000000000000060448201526064016107bc565b815115610b1f57600084815261010760205260409020610ae5838261438f565b50837f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b83604051610b169190613921565b60405180910390a25b6000848152610106602052604081208054859290610b3e908490614464565b92505081905550610b60858585604051806020016040528060008152506120f8565b5050600160cd55505050565b600080516020614cc3833981519152610b84816120d0565b60ff805462010000900416610bd45760405162461bcd60e51b8152602060048201526016602482015275151c985b9cd9995c9cc8185c9948191a5cd8589b195960521b60448201526064016107bc565b60c954604080516020810190915260008152610bff916001600160a01b03169086908690869061220e565b50505050565b600054610100900460ff1615808015610c255750600054600160ff909116105b80610c3f5750303b158015610c3f575060005460ff166001145b610ca25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107bc565b6000805460ff191660011790558015610cc5576000805461ff0019166101001790555b610cdd6040518060200160405280600081525061233c565b610ce561236c565b610cf78360800151846060015161239d565b602083015160ff80546060870151604087015161ffff1990921693151561ff0019169390931761010093151584021762ff0000191662010000911515919091021790558451610d46908261438f565b50602084015161010190610d5a908261438f565b50825161010290610d6b908261438f565b50610d7a846040015183612421565b8015610bff576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b610103546101045460009182916001600160a01b039091169061271090610ded90869061447c565b610df791906144b1565b915091505b9250929050565b600080516020614ce3833981519152610e1b816120d0565b60ff80541680610e845750610102604051602001610e3991906144c5565b60408051601f198184030181529190528051602090910120610e5b85806144d1565b604051602001610e6c929190614517565b60405160208183030381529060405280519060200120145b610ec55760405162461bcd60e51b815260206004820152601260248201527126b2ba30b230ba309034b990333937bd32b760711b60448201526064016107bc565b610ecf84806144d1565b61010291610ede919083614527565b50610efc610ef260a0860160808701614148565b856060013561239d565b610f0c60608501604086016145e6565b610f1d5760ff805462ff0000191690555b610f2d60408501602086016145e6565b158015610f3b575060ff8054165b15610f745760ff805460ff191690556040517fb59f45df38ec0d34114b1248c38a29cdbccbf3e745ae3ef310ac66199a4ceccf90600090a15b610f7d836126a5565b8115610bff57610bff61189c565b6001600160a01b038516331480610fa75750610fa785336106c8565b610fc35760405162461bcd60e51b81526004016107bc90614601565b610fd0858585858561298f565b5050505050565b600082815260976020526040902060010154610ff2816120d0565b610ffc8383612b2e565b505050565b6001600160a01b03811633146110715760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107bc565b61083c8282612bb4565b606081518351146110e05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016107bc565b600083516001600160401b038111156110fb576110fb61379c565b604051908082528060200260200182016040528015611124578160200160208202803683370190505b50905060005b845181101561119c5761116f85828151811061114857611148614650565b602002602001015185838151811061116257611162614650565b6020026020010151610755565b82828151811061118157611181614650565b602090810291909101015261119581614666565b905061112a565b509392505050565b610102805461084e90614287565b600080516020614cc38339815191526111ca816120d0565b60ff80546201000090041661121a5760405162461bcd60e51b8152602060048201526016602482015275151c985b9cd9995c9cc8185c9948191a5cd8589b195960521b60448201526064016107bc565b8251845114801561122c575081518351145b6112725760405162461bcd60e51b81526020600482015260176024820152764d69736d61746368656420696e7075742061727261797360481b60448201526064016107bc565b60005b8351811015610fd05760c95485516112f4916001600160a01b0316908790849081106112a3576112a3614650565b60200260200101518684815181106112bd576112bd614650565b60200260200101518685815181106112d7576112d7614650565b60200260200101516040518060200160405280600081525061220e565b806112fe81614666565b915050611275565b600080516020614d8383398151915261131e816120d0565b60ff80546101009004166113695760405162461bcd60e51b8152602060048201526012602482015271109d5c9b9cc8185c9948191a5cd8589b195960721b60448201526064016107bc565b60c954611380906001600160a01b03168484612c1b565b60005b8351811015610bff5782818151811061139e5761139e614650565b602002602001015161010660008684815181106113bd576113bd614650565b6020026020010151815260200190815260200160002060008282546113e2919061467f565b909155508190506113f281614666565b915050611383565b60c9546000906001600160a01b039081169083160361141b575060016107ea565b82611428575060006107ea565b611440600080516020614d6383398151915283612055565b8061145057506114508383612055565b9392505050565b610101805461084e90614287565b61083c338383612da8565b7f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e661149a816120d0565b600084815261010660205260409020546114ed5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016107bc565b60ff8054166115335760405162461bcd60e51b815260206004820152601260248201527126b2ba30b230ba309034b990333937bd32b760711b60448201526064016107bc565b6000848152610105602052604090205460ff1615156001036115895760405162461bcd60e51b815260206004820152600f60248201526e2a37b5b2b71034b990333937bd32b760891b60448201526064016107bc565b81806115955750825115155b6115fb5760405162461bcd60e51b815260206004820152603160248201527f456974686572205f6e6577557269206f72205f6973467265657a65546f6b656e604482015270155c9a4f5d1c9d59481c995c5d5a5c9959607a1b60648201526084016107bc565b8251156116ed57826040516020016116139190614696565b60408051601f1981840301815282825280516020918201206000888152610107909252919020909161164591906144c5565b60405180910390200361169a5760405162461bcd60e51b815260206004820181905260248201527f4e657720746f6b656e205552492069732073616d65206173207570646174656460448201526064016107bc565b6000848152610107602052604090206116b3848261438f565b50837f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b846040516116e49190613921565b60405180910390a25b8115610bff57600084815261010560209081526040808320805460ff1916600117905561010790915290819020905185917fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b556572079161174a91906146b2565b60405180910390a250505050565b600080516020614d83833981519152611770816120d0565b60ff80546101009004166117bb5760405162461bcd60e51b8152602060048201526012602482015271109d5c9b9cc8185c9948191a5cd8589b195960721b60448201526064016107bc565b60c9546117d2906001600160a01b03168484612e88565b60008381526101066020526040812080548492906117f190849061467f565b9091555050505050565b600082815260976020526040902060010154611816816120d0565b610ffc8383612bb4565b6060600061187061183361010454612f8f565b6101035461184b906001600160a01b03166014613097565b60405160200161185c92919061473d565b6040516020818303038152906040526131e3565b905060008160405160200161188591906147c4565b60408051601f198184030181529190529392505050565b600080516020614d638339815191526118b4816120d0565b60ca546118d990600080516020614d63833981519152906001600160a01b0316612bb4565b5060ca80546001600160a01b0319169055565b6001600160a01b038516331480611908575061190885336106c8565b6119245760405162461bcd60e51b81526004016107bc90614601565b610fd0858585858561220e565b60c9546001600160a01b039081169082160361198f5760405162461bcd60e51b815260206004820181905260248201527f4772616e756c6172526f6c65733a20616c726561647920746865206f776e657260448201526064016107bc565b60c9546001600160a01b031633146119e95760405162461bcd60e51b815260206004820152601c60248201527f4772616e756c6172526f6c65733a206e6f7420746865206f776e65720000000060448201526064016107bc565b60c954611a0e90600080516020614d63833981519152906001600160a01b0316612bb4565b60c980546001600160a01b038381166001600160a01b0319831681179093551690611a4890600080516020614d6383398151915290612b2e565b816001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080516020614d43833981519152611aa4816120d0565b600260cd5403611af65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107bc565b600260cd5583518551148015611b0d575082518451145b8015611b1a575081518351145b611b605760405162461bcd60e51b81526020600482015260176024820152764d69736d61746368656420696e7075742061727261797360481b60448201526064016107bc565b60005b8451811015611e9e57611b9e858281518110611b8157611b81614650565b602002602001015160009081526101066020526040902054151590565b15611beb5760405162461bcd60e51b815260206004820152601f60248201527f4f6e65206f6620746f6b656e7320697320616c7265616479206d696e7465640060448201526064016107bc565b858181518110611bfd57611bfd614650565b60200260200101516001600160a01b0316868281518110611c2057611c20614650565b60200260200101516001600160a01b031614611c7e5760405162461bcd60e51b815260206004820181905260248201527f4e46543a206f6e65206f662061646472657373657320697320696e76616c696460448201526064016107bc565b6000848281518110611c9257611c92614650565b602002602001015111611ce75760405162461bcd60e51b815260206004820152601c60248201527f4e46543a20616c6c20616d6f756e7473206d757374206265203e20300000000060448201526064016107bc565b838181518110611cf957611cf9614650565b60200260200101516101066000878481518110611d1857611d18614650565b602002602001015181526020019081526020016000206000828254611d3d9190614464565b925050819055506000838281518110611d5857611d58614650565b6020026020010151511115611e2657828181518110611d7957611d79614650565b60200260200101516101076000878481518110611d9857611d98614650565b602002602001015181526020019081526020016000209081611dba919061438f565b50848181518110611dcd57611dcd614650565b60200260200101517f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b848381518110611e0857611e08614650565b6020026020010151604051611e1d9190613921565b60405180910390a25b611e8c868281518110611e3b57611e3b614650565b6020026020010151868381518110611e5557611e55614650565b6020026020010151868481518110611e6f57611e6f614650565b6020026020010151604051806020016040528060008152506120f8565b80611e9681614666565b915050611b63565b5050600160cd5550505050565b6001600160a01b03163b151590565b60606000611ec983600261447c565b611ed4906002614464565b6001600160401b03811115611eeb57611eeb61379c565b6040519080825280601f01601f191660200182016040528015611f15576020820181803683370190505b509050600360fc1b81600081518110611f3057611f30614650565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f5f57611f5f614650565b60200101906001600160f81b031916908160001a9053506000611f8384600261447c565b611f8e906001614464565b90505b6001811115612006576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611fc257611fc2614650565b1a60f81b828281518110611fd857611fd8614650565b60200101906001600160f81b031916908160001a90535060049490941c93611fff81614809565b9050611f91565b5083156114505760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107bc565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006001600160e01b03198216636cdb3d1360e11b14806120b157506001600160e01b031982166303a24d0760e21b145b806107ea57506301ffc9a760e01b6001600160e01b03198316146107ea565b6120da813361334c565b50565b606761083c828261438f565b60606067805461096690614287565b6001600160a01b0384166121585760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016107bc565b336000612164856133b0565b90506000612171856133b0565b905060008681526065602090815260408083206001600160a01b038b168452909152812080548792906121a5908490614464565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612205836000898989896133fb565b50505050505050565b6001600160a01b0384166122345760405162461bcd60e51b81526004016107bc90614820565b336000612240856133b0565b9050600061224d856133b0565b905060008681526065602090815260408083206001600160a01b038c168452909152902054858110156122925760405162461bcd60e51b81526004016107bc90614865565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906122d1908490614464565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612331848a8a8a8a8a6133fb565b505050505050505050565b600054610100900460ff166123635760405162461bcd60e51b81526004016107bc906148af565b6120da81613556565b600054610100900460ff166123935760405162461bcd60e51b81526004016107bc906148af565b61239b613586565b565b6127108111156123f95760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f742073657420726f79616c7469657320746f206f766572203130306044820152602560f81b60648201526084016107bc565b61010380546001600160a01b0319166001600160a01b03939093169290921790915561010455565b6001600160a01b0382166124775760405162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374206d757374206861766520616e206f776e6572000000000060448201526064016107bc565b60c980546001600160a01b0384166001600160a01b0319918216811790925560ca8054909116331790556124ba90600080516020614d6383398151915290612b2e565b60ca546124df90600080516020614d63833981519152906001600160a01b0316612b2e565b60005b8151811015610ffc5760008282815181106124ff576124ff614650565b6020026020010151600001519050612516816135b4565b612521826020611eba565b60405160200161253191906148fa565b6040516020818303038152906040529061255e5760405162461bcd60e51b81526004016107bc9190613921565b5060005b83838151811061257457612574614650565b60200260200101516020015151811015612654576125c88285858151811061259e5761259e614650565b60200260200101516020015183815181106125bb576125bb614650565b6020026020010151612b2e565b600082815260cb6020526040902084518590859081106125ea576125ea614650565b602002602001015160200151828151811061260757612607614650565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558061264c81614666565b915050612562565b5082828151811061266757612667614650565b6020026020010151604001511561269257600081815260cc60205260409020805460ff191660011790555b508061269d81614666565b9150506124e2565b8051156120da576126c4600080516020614d63833981519152336113fa565b6127105760405162461bcd60e51b815260206004820152601b60248201527f4772616e756c6172526f6c65733a206e6f7420616e2061646d696e000000000060448201526064016107bc565b60005b815181101561083c57600082828151811061273057612730614650565b6020026020010151600001519050612747816135b4565b612752826020611eba565b60405160200161276291906148fa565b6040516020818303038152906040529061278f5760405162461bcd60e51b81526004016107bc9190613921565b50600081815260cc602090815260409091205460ff1615906127b2908390611eba565b6040516020016127c2919061493f565b604051602081830303815290604052906127ef5760405162461bcd60e51b81526004016107bc9190613921565b5060005b600082815260cb602052604090205481101561285b57600082815260cb6020526040902080546128499184918490811061282f5761282f614650565b6000918252602090912001546001600160a01b0316612bb4565b8061285381614666565b9150506127f3565b50600081815260cb60205260408120612873916136f6565b60005b83838151811061288857612888614650565b6020026020010151602001515181101561293e576128b28285858151811061259e5761259e614650565b600082815260cb6020526040902084518590859081106128d4576128d4614650565b60200260200101516020015182815181106128f1576128f1614650565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558061293681614666565b915050612876565b5082828151811061295157612951614650565b6020026020010151604001511561297c57600081815260cc60205260409020805460ff191660011790555b508061298781614666565b915050612713565b81518351146129b05760405162461bcd60e51b81526004016107bc9061498f565b6001600160a01b0384166129d65760405162461bcd60e51b81526004016107bc90614820565b3360005b8451811015612ac05760008582815181106129f7576129f7614650565b602002602001015190506000858381518110612a1557612a15614650565b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015612a665760405162461bcd60e51b81526004016107bc90614865565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612aa5908490614464565b9250508190555050505080612ab990614666565b90506129da565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612b109291906149d7565b60405180910390a4612b2681878787878761363b565b505050505050565b612b3882826113fa565b61083c5760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612b703390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612bbe82826113fa565b1561083c5760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b038316612c415760405162461bcd60e51b81526004016107bc90614a05565b8051825114612c625760405162461bcd60e51b81526004016107bc9061498f565b604080516020810190915260009081905233905b8351811015612d3b576000848281518110612c9357612c93614650565b602002602001015190506000848381518110612cb157612cb1614650565b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015612d025760405162461bcd60e51b81526004016107bc90614a48565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580612d3381614666565b915050612c76565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612d8c9291906149d7565b60405180910390a4604080516020810190915260009052610bff565b816001600160a01b0316836001600160a01b031603612e1b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016107bc565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038316612eae5760405162461bcd60e51b81526004016107bc90614a05565b336000612eba846133b0565b90506000612ec7846133b0565b6040805160208082018352600091829052888252606581528282206001600160a01b038b1683529052205490915084811015612f155760405162461bcd60e51b81526004016107bc90614a48565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052612205565b606081600003612fb65750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612fe05780612fca81614666565b9150612fd99050600a836144b1565b9150612fba565b6000816001600160401b03811115612ffa57612ffa61379c565b6040519080825280601f01601f191660200182016040528015613024576020820181803683370190505b5090505b841561308f5761303960018361467f565b9150613046600a86614a8c565b613051906030614464565b60f81b81838151811061306657613066614650565b60200101906001600160f81b031916908160001a905350613088600a866144b1565b9450613028565b949350505050565b606060006130a683600261447c565b6130b1906002614464565b6001600160401b038111156130c8576130c861379c565b6040519080825280601f01601f1916602001820160405280156130f2576020820181803683370190505b509050600360fc1b8160008151811061310d5761310d614650565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061313c5761313c614650565b60200101906001600160f81b031916908160001a905350600061316084600261447c565b61316b906001614464565b90505b6001811115612006576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061319f5761319f614650565b1a60f81b8282815181106131b5576131b5614650565b60200101906001600160f81b031916908160001a90535060049490941c936131dc81614809565b905061316e565b80516060906000819003613207575050604080516020810190915260008152919050565b60006003613216836002614464565b61322091906144b1565b61322b90600461447c565b9050600061323a826020614464565b6001600160401b038111156132515761325161379c565b6040519080825280601f01601f19166020018201604052801561327b576020820181803683370190505b5090506000604051806060016040528060408152602001614d03604091399050600181016020830160005b86811015613307576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b8352600490920191016132a6565b50600386066001811461332157600281146133325761333e565b613d3d60f01b60011983015261333e565b603d60f81b6000198301525b505050918152949350505050565b61335682826113fa565b61083c5761336e816001600160a01b03166014611eba565b613379836020611eba565b60405160200161338a929190614aa0565b60408051601f198184030181529082905262461bcd60e51b82526107bc91600401613921565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106133ea576133ea614650565b602090810291909101015292915050565b6001600160a01b0384163b15612b265760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061343f9089908990889088908890600401614b15565b6020604051808303816000875af192505050801561347a575060408051601f3d908101601f1916820190925261347791810190614b5a565b60015b61352657613486614b77565b806308c379a0036134bf575061349a614b93565b806134a557506134c1565b8060405162461bcd60e51b81526004016107bc9190613921565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016107bc565b6001600160e01b0319811663f23a6e6160e01b146122055760405162461bcd60e51b81526004016107bc90614c1c565b600054610100900460ff1661357d5760405162461bcd60e51b81526004016107bc906148af565b6120da816120dd565b600054610100900460ff166135ad5760405162461bcd60e51b81526004016107bc906148af565b600160cd55565b6000600080516020614d438339815191528214806135df5750600080516020614ce383398151915282145b8061360957507f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e682145b806136215750600080516020614d8383398151915282145b806107ea575050600080516020614cc38339815191521490565b6001600160a01b0384163b15612b265760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061367f9089908990889088908890600401614c64565b6020604051808303816000875af19250505080156136ba575060408051601f3d908101601f191682019092526136b791810190614b5a565b60015b6136c657613486614b77565b6001600160e01b0319811663bc197c8160e01b146122055760405162461bcd60e51b81526004016107bc90614c1c565b50805460008255906000526020600020908101906120da91905b808211156137245760008155600101613710565b5090565b80356001600160a01b03811681146109f457600080fd5b6000806040838503121561375257600080fd5b61375b83613728565b946020939093013593505050565b6001600160e01b0319811681146120da57600080fd5b60006020828403121561379157600080fd5b813561145081613769565b634e487b7160e01b600052604160045260246000fd5b606081018181106001600160401b03821117156137d1576137d161379c565b60405250565b608081018181106001600160401b03821117156137d1576137d161379c565b601f8201601f191681016001600160401b038111828210171561381b5761381b61379c565b6040525050565b600082601f83011261383357600080fd5b81356001600160401b0381111561384c5761384c61379c565b604051613863601f8301601f1916602001826137f6565b81815284602083860101111561387857600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156138a757600080fd5b81356001600160401b038111156138bd57600080fd5b61308f84828501613822565b60005b838110156138e45781810151838201526020016138cc565b83811115610bff5750506000910152565b6000815180845261390d8160208601602086016138c9565b601f01601f19169290920160200192915050565b60208152600061145060208301846138f5565b60006020828403121561394657600080fd5b5035919050565b6000806000806080858703121561396357600080fd5b61396c85613728565b9350602085013592506040850135915060608501356001600160401b0381111561399557600080fd5b6139a187828801613822565b91505092959194509250565b6000806000606084860312156139c257600080fd5b6139cb84613728565b95602085013595506040909401359392505050565b803580151581146109f457600080fd5b600060a08284031215613a0257600080fd5b60405160a081016001600160401b038282108183111715613a2557613a2561379c565b816040528293508435915080821115613a3d57600080fd5b50613a4a85828601613822565b825250613a59602084016139e0565b6020820152613a6a604084016139e0565b604082015260608301356060820152613a8560808401613728565b60808201525092915050565b60006001600160401b03821115613aaa57613aaa61379c565b5060051b60200190565b600082601f830112613ac557600080fd5b81356020613ad282613a91565b604051613adf82826137f6565b83815260059390931b8501820192828101915086841115613aff57600080fd5b8286015b84811015613b2157613b1481613728565b8352918301918301613b03565b509695505050505050565b600082601f830112613b3d57600080fd5b81356020613b4a82613a91565b60408051613b5883826137f6565b84815260059490941b8601830193838101925087851115613b7857600080fd5b8387015b85811015613c0b5780356001600160401b0380821115613b9c5760008081fd5b908901906060828c03601f1901811315613bb65760008081fd5b8551613bc1816137b2565b8884013581528684013583811115613bd95760008081fd5b613be78e8b83880101613ab4565b8a83015250613bf78285016139e0565b818801528752505050928401928401613b7c565b50979650505050505050565b600080600060608486031215613c2c57600080fd5b83356001600160401b0380821115613c4357600080fd5b9085019060808288031215613c5757600080fd5b604051613c63816137d7565b823582811115613c7257600080fd5b613c7e89828601613822565b825250602083013582811115613c9357600080fd5b613c9f89828601613822565b602083015250613cb160408401613728565b6040820152613cc2606084016139e0565b606082015294506020860135915080821115613cdd57600080fd5b613ce9878388016139f0565b93506040860135915080821115613cff57600080fd5b50613d0c86828701613b2c565b9150509250925092565b60008060408385031215613d2957600080fd5b50508035926020909101359150565b600080600060608486031215613d4d57600080fd5b83356001600160401b0380821115613d6457600080fd5b9085019060a08288031215613d7857600080fd5b90935060208501359080821115613d8e57600080fd5b50613d9b86828701613b2c565b925050613daa604085016139e0565b90509250925092565b600082601f830112613dc457600080fd5b81356020613dd182613a91565b604051613dde82826137f6565b83815260059390931b8501820192828101915086841115613dfe57600080fd5b8286015b84811015613b215780358352918301918301613e02565b600080600080600060a08688031215613e3157600080fd5b613e3a86613728565b9450613e4860208701613728565b935060408601356001600160401b0380821115613e6457600080fd5b613e7089838a01613db3565b94506060880135915080821115613e8657600080fd5b613e9289838a01613db3565b93506080880135915080821115613ea857600080fd5b50613eb588828901613822565b9150509295509295909350565b60008060408385031215613ed557600080fd5b82359150613ee560208401613728565b90509250929050565b60008060408385031215613f0157600080fd5b82356001600160401b0380821115613f1857600080fd5b613f2486838701613ab4565b93506020850135915080821115613f3a57600080fd5b50613f4785828601613db3565b9150509250929050565b600081518084526020808501945080840160005b83811015613f8157815187529582019590820190600101613f65565b509495945050505050565b6020815260006114506020830184613f51565b600080600060608486031215613fb457600080fd5b83356001600160401b0380821115613fcb57600080fd5b613fd787838801613ab4565b94506020860135915080821115613fed57600080fd5b613ff987838801613db3565b9350604086013591508082111561400f57600080fd5b50613d0c86828701613db3565b6000806040838503121561402f57600080fd5b82356001600160401b038082111561404657600080fd5b613f2486838701613db3565b6000806040838503121561406557600080fd5b61406e83613728565b9150613ee5602084016139e0565b60008060006060848603121561409157600080fd5b8335925060208401356001600160401b038111156140ae57600080fd5b613d9b86828701613822565b600080604083850312156140cd57600080fd5b6140d683613728565b9150613ee560208401613728565b600080600080600060a086880312156140fc57600080fd5b61410586613728565b945061411360208701613728565b9350604086013592506060860135915060808601356001600160401b0381111561413c57600080fd5b613eb588828901613822565b60006020828403121561415a57600080fd5b61145082613728565b6000806000806080858703121561417957600080fd5b84356001600160401b038082111561419057600080fd5b61419c88838901613ab4565b95506020915081870135818111156141b357600080fd5b6141bf89828a01613db3565b9550506040870135818111156141d457600080fd5b6141e089828a01613db3565b9450506060870135818111156141f557600080fd5b8701601f8101891361420657600080fd5b803561421181613a91565b60405161421e82826137f6565b82815260059290921b830185019185810191508b83111561423e57600080fd5b8584015b838110156142765780358681111561425a5760008081fd5b6142688e8983890101613822565b845250918601918601614242565b50989b979a50959850505050505050565b600181811c9082168061429b57607f821691505b6020821081036142bb57634e487b7160e01b600052602260045260246000fd5b50919050565b600081546142ce81614287565b600182811680156142e657600181146142fb5761432a565b60ff198416875282151583028701945061432a565b8560005260208060002060005b858110156143215781548a820152908401908201614308565b50505082870194505b5050505092915050565b600061308f61434383866142c1565b846142c1565b601f821115610ffc57600081815260208120601f850160051c810160208610156143705750805b601f850160051c820191505b81811015612b265782815560010161437c565b81516001600160401b038111156143a8576143a861379c565b6143bc816143b68454614287565b84614349565b602080601f8311600181146143f157600084156143d95750858301515b600019600386901b1c1916600185901b178555612b26565b600085815260208120601f198616915b8281101561442057888601518255948401946001909101908401614401565b508582101561443e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600082198211156144775761447761444e565b500190565b60008160001904831182151516156144965761449661444e565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826144c0576144c061449b565b500490565b600061145082846142c1565b6000808335601e198436030181126144e857600080fd5b8301803591506001600160401b0382111561450257600080fd5b602001915036819003821315610dfc57600080fd5b8183823760009101908152919050565b6001600160401b0383111561453e5761453e61379c565b6145528361454c8354614287565b83614349565b6000601f841160018114614586576000851561456e5750838201355b600019600387901b1c1916600186901b178355610fd0565b600083815260209020601f19861690835b828110156145b75786850135825560209485019460019092019101614597565b50868210156145d45760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000602082840312156145f857600080fd5b611450826139e0565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600182016146785761467861444e565b5060010190565b6000828210156146915761469161444e565b500390565b600082516146a88184602087016138c9565b9190910192915050565b60006020808352600084546146c681614287565b808487015260406001808416600081146146e757600181146147015761472f565b60ff1985168984015283151560051b89018301955061472f565b896000528660002060005b858110156147275781548b820186015290830190880161470c565b8a0184019650505b509398975050505050505050565b7f7b2273656c6c65725f6665655f62617369735f706f696e7473223a200000000081526000835161477581601c8501602088016138c9565b731610113332b2afb932b1b4b834b2b73a111d101160611b601c9184019182015283516147a98160308401602088016138c9565b61227d60f01b60309290910191820152603201949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516147fc81601d8501602087016138c9565b91909101601d0192915050565b6000816148185761481861444e565b506000190190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f4772616e756c6172526f6c65733a20696e76616c696420726f6c65200000000081526000825161493281601c8501602087016138c9565b91909101601c0192915050565b73023b930b73ab630b92937b632b99d103937b632960651b81526000825161496e8160148501602087016138c9565b691034b990333937bd32b760b11b6014939091019283015250601e01919050565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b6040815260006149ea6040830185613f51565b82810360208401526149fc8185613f51565b95945050505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b600082614a9b57614a9b61449b565b500690565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614ad88160178501602088016138c9565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614b098160288401602088016138c9565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614b4f908301846138f5565b979650505050505050565b600060208284031215614b6c57600080fd5b815161145081613769565b600060033d1115614b905760046000803e5060005160e01c5b90565b600060443d1015614ba15790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715614bd057505050505090565b8285019150815181811115614be85750505050505090565b843d8701016020828501011115614c025750505050505090565b614c11602082860101876137f6565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090614c9090830186613f51565b8281036060840152614ca28186613f51565b90508281036080840152614cb681856138f5565b9897505050505050505056fe8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f54142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c3686a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775e97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa22a264697066735822122043d512217255bcebb0e1db488835b9314a498aa33849668034565649d75aac7a64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "contractURI()": {
        "details": "OpenSea contract metadata, returns a base64 encoded JSON string containing royalties basis points and royalties address"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 419,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 422,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3527,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3797,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 651,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 657,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 659,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1866,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6742,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 6744,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "_nftPort",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 6749,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "_rolesAddressesIndexed",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 6753,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "_rolesFrozen",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 577,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "_status",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 621,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7328,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "metadataUpdatable",
        "offset": 0,
        "slot": "255",
        "type": "t_bool"
      },
      {
        "astId": 7330,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "tokensBurnable",
        "offset": 1,
        "slot": "255",
        "type": "t_bool"
      },
      {
        "astId": 7332,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "tokensTransferable",
        "offset": 2,
        "slot": "255",
        "type": "t_bool"
      },
      {
        "astId": 7334,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "name",
        "offset": 0,
        "slot": "256",
        "type": "t_string_storage"
      },
      {
        "astId": 7336,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "symbol",
        "offset": 0,
        "slot": "257",
        "type": "t_string_storage"
      },
      {
        "astId": 7338,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "baseURI",
        "offset": 0,
        "slot": "258",
        "type": "t_string_storage"
      },
      {
        "astId": 7340,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "royaltiesAddress",
        "offset": 0,
        "slot": "259",
        "type": "t_address"
      },
      {
        "astId": 7342,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "royaltiesBasisPoints",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 7346,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "freezeTokenUris",
        "offset": 0,
        "slot": "261",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 7350,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "tokenSupply",
        "offset": 0,
        "slot": "262",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8151,
        "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "263",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/standalone/ERC1155NFTProductContract.sol:ERC1155NFTProductContract",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}