{
  "address": "0x65b0e4113378CE48BB931A03bbBADF663ba59aDb",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "OperatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "TemplateAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "TemplateDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CODE_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "instance",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "expiration",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Factory.RequestMetadata",
              "name": "metadata",
              "type": "tuple"
            }
          ],
          "internalType": "struct Factory.CallRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "call",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "template",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initData",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "expiration",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Factory.RequestMetadata",
              "name": "metadata",
              "type": "tuple"
            }
          ],
          "internalType": "struct Factory.DeploymentRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "templateVersion",
          "type": "uint256"
        }
      ],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factorySigner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "latestImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "latestVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementationAddress",
          "type": "address"
        }
      ],
      "name": "registerTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        }
      ],
      "name": "setWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "templates",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "templateNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        }
      ],
      "name": "versions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "templateVersions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6e76b3dac73b35d8fa01118ae73301a5697a566e3f33279e2ecac2a2abecdae",
  "receipt": {
    "to": null,
    "from": "0xE7D7696C8f11278124f39fB7cDd39fD9442D5026",
    "contractAddress": "0x65b0e4113378CE48BB931A03bbBADF663ba59aDb",
    "transactionIndex": 76,
    "gasUsed": "2238107",
    "logsBloom": "0x
    "blockHash": "0xc900ee3d8820eceb2467b2c3082540e553af7ebd4229ff90dc76666aae4fa3af",
    "transactionHash": "0xc6e76b3dac73b35d8fa01118ae73301a5697a566e3f33279e2ecac2a2abecdae",
    "logs": [
      {
        "transactionIndex": 76,
        "blockNumber": 16083208,
        "transactionHash": "0xc6e76b3dac73b35d8fa01118ae73301a5697a566e3f33279e2ecac2a2abecdae",
        "address": "0x65b0e4113378CE48BB931A03bbBADF663ba59aDb",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 148,
        "blockHash": "0xc900ee3d8820eceb2467b2c3082540e553af7ebd4229ff90dc76666aae4fa3af"
      }
    ],
    "blockNumber": 16083208,
    "cumulativeGasUsed": "8162968",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "1e300b8e19558e2a4c02af65df638f3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"TemplateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"TemplateDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CODE_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"internalType\":\"struct Factory.RequestMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"internalType\":\"struct Factory.CallRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"template\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"internalType\":\"struct Factory.RequestMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"internalType\":\"struct Factory.DeploymentRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"templateVersion\",\"type\":\"uint256\"}],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factorySigner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"latestImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"latestVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"}],\"name\":\"registerTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"setWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templates\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"templateNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"}],\"name\":\"versions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"templateVersions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"OPERATOR_ROLE(address)\":{\"params\":{\"instance\":\"Address of the template instance that the role will be operating on\"},\"returns\":{\"_0\":\"Operator role identifier\"}},\"call((address,bytes,(address,uint256)),bytes)\":{\"details\":\"Requires a signature of the call payload (caller, instance address and call data) by a `SIGNER_ROLE` wallet\",\"params\":{\"request\":\"The struct containing the call request\",\"signature\":\"EIP712 signature of the request\"}},\"constructor\":{\"details\":\"Empty constructor to disable direct initialization of this contract\"},\"deploy((string,uint256,bytes,(address,uint256)),bytes)\":{\"details\":\"Requires a signature of the deployment payload (caller, template name and initialization data) by a `SIGNER_ROLE` wallet\",\"params\":{\"request\":\"The struct containing the deployment request\",\"signature\":\"EIP712 signature of the request\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"implementation(string,uint256)\":{\"params\":{\"templateName\":\"Name of the template\",\"templateVersion\":\"Version of the implementation\"},\"returns\":{\"_0\":\"Address of the implementation contract\"}},\"initialize(address,address)\":{\"details\":\"Callable only once\",\"params\":{\"factoryOwner\":\"The address that should be assigned ADMIN_ROLE\",\"factorySigner\":\"The address that should be assigned SIGNER_ROLE\"}},\"isOperator(address,address)\":{\"params\":{\"instance\":\"Address of the template instance\",\"operator\":\"Address of the operator\"}},\"registerTemplate(address)\":{\"details\":\"Implementation details will be read and validated on-chain\",\"params\":{\"implementationAddress\":\"Address of the template implementation contract\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setOperator(address,address,bool)\":{\"params\":{\"allowed\":\"New operator status\",\"instance\":\"The template instance that will be operated on\",\"operator\":\"The address of the operator that we want to update the status of\"}},\"setWhitelisted(address,bool)\":{\"details\":\"For security reasons, we don't allow arbitrary contracts to be called via Factory. Contracts deployed via the Factory will be automatically whitelisted. This function is intended to allow us to disable any contracts that turn out to be vulnerable or malicious.\",\"params\":{\"instance\":\"Contract address\",\"newStatus\":\"New whitelist status\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"templates()\":{\"returns\":{\"templateNames\":\"List of all template names that have been registered\"}},\"upgrade()\":{\"details\":\"Callable by anyone but in practice will get called atomically when the Factory implementation is updated.\"},\"versions(string)\":{\"params\":{\"templateName\":\"Name of the template\"},\"returns\":{\"templateVersions\":\"List of all version numbers that have been registered for that template\"}}},\"stateVariables\":{\"CODE_VERSION\":{\"details\":\"Should follow semver-like format of `MAJOR_MINOR_PATCH`\"}},\"title\":\"Factory\",\"version\":1},\"userdoc\":{\"events\":{\"OperatorChanged(address,address,bool)\":{\"notice\":\"Permissions for address `operator` to operate contract `instance` have changed to `allowed`\"},\"TemplateAdded(string,uint256,address)\":{\"notice\":\"A new version of a template implementation has been added to the Factory\"},\"TemplateDeployed(string,uint256,address)\":{\"notice\":\"An instance of a template has been deployed\"}},\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"Contract administrator role\"},\"CODE_VERSION()\":{\"notice\":\"Contract code version\"},\"OPERATOR_ROLE(address)\":{\"notice\":\"Get the operator role for the specified instance\"},\"SIGNER_ROLE()\":{\"notice\":\"Transaction signer role\"},\"call((address,bytes,(address,uint256)),bytes)\":{\"notice\":\"Call a deployed template instance\"},\"deploy((string,uint256,bytes,(address,uint256)),bytes)\":{\"notice\":\"Deploy a specific version of the specified template\"},\"implementation(string,uint256)\":{\"notice\":\"Get the implementation address of a specific version of a template\"},\"initialize(address,address)\":{\"notice\":\"Initialize the Factory\"},\"isOperator(address,address)\":{\"notice\":\"Check if the `operator` address is allowed to operate on template instance `instance`\"},\"latestImplementation(string)\":{\"notice\":\"Latest template implementations for `_templateNames`\"},\"latestVersion(string)\":{\"notice\":\"Latest template versions for `_templateNames`\"},\"registerTemplate(address)\":{\"notice\":\"Register a new implementation with the Factory\"},\"setOperator(address,address,bool)\":{\"notice\":\"Update the operator status of `instance` for `operator`\"},\"setWhitelisted(address,bool)\":{\"notice\":\"Update contract whitelist status\"},\"templates()\":{\"notice\":\"Get a list of all templates registered with the factory\"},\"upgrade()\":{\"notice\":\"Perform any necessary state migrations between Factory versions\"},\"version()\":{\"notice\":\"Current contract version\"},\"versions(string)\":{\"notice\":\"Get a list of all registered versions of a template\"},\"whitelisted(address)\":{\"notice\":\"Contracts that are whitelisted for proxy calls\"}},\"notice\":\"Contract for managing contract templates, their implementations and deploying and calling template instances. Uses {Clones} to deploy https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] compliant proxy contracts Upgradable contract, meaning it does not make use of a constructor but rather uses `initialize` with `initializer` modifier, see {Initializable} Allows for registering new templates and delegating calls to deployed proxies. Saves versions and names for each clone that can be deployed using this factory. Proxies can be deployed with a signature from an address with `SIGNER_ROLE` or by paying `deploymentFee` Proxies can be called with a signature from an address with `SIGNER_ROLE` or by paying `callFee`\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae614c6b103b743c62e9544632f7ef4fc8950de4e9c783d2e765a3b86701dda3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"./lib/ITemplate.sol\\\";\\n\\n/**\\n * @title Factory\\n * @notice Contract for managing contract templates, their implementations and deploying and calling template instances.\\n * Uses {Clones} to deploy https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] compliant proxy contracts\\n *\\n * Upgradable contract, meaning it does not make use of a constructor but rather uses `initialize` with `initializer`\\n * modifier, see {Initializable}\\n *\\n * Allows for registering new templates and delegating calls to deployed proxies.\\n * Saves versions and names for each clone that can be deployed using this factory.\\n *\\n * Proxies can be deployed with a signature from an address with `SIGNER_ROLE` or by paying `deploymentFee`\\n * Proxies can be called with a signature from an address with `SIGNER_ROLE` or by paying `callFee`\\n */\\ncontract Factory is AccessControlUpgradeable {\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    /// Contract code version\\n    /// @dev Should follow semver-like format of `MAJOR_MINOR_PATCH`\\n    uint256 public constant CODE_VERSION = 1_02_00;\\n\\n    /// Contract administrator role\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    /// Transaction signer role\\n    bytes32 public constant SIGNER_ROLE = keccak256(\\\"SIGNER_ROLE\\\");\\n\\n    /// EIP721Domain typehash\\n    bytes32 private constant _DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n    /// DeploymentRequest typehash\\n    bytes32 private constant _DEPLOYMENT_REQUEST_TYPEHASH =\\n        keccak256(\\n            \\\"DeploymentRequest(string template,uint256 version,bytes initData,RequestMetadata metadata)RequestMetadata(address caller,uint256 expiration)\\\"\\n        );\\n    /// CallRequest typehash\\n    bytes32 private constant _CALL_REQUEST_TYPEHASH =\\n        keccak256(\\n            \\\"CallRequest(address instance,bytes callData,RequestMetadata metadata)RequestMetadata(address caller,uint256 expiration)\\\"\\n        );\\n    /// RequestMetadata typehash\\n    bytes32 private constant _REQUEST_METADATA_TYPEHASH =\\n        keccak256(\\\"RequestMetadata(address caller,uint256 expiration)\\\");\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// A new version of a template implementation has been added to the Factory\\n    event TemplateAdded(string name, uint256 version, address implementation);\\n\\n    /// An instance of a template has been deployed\\n    event TemplateDeployed(string name, uint256 version, address destination);\\n\\n    /// Permissions for address `operator` to operate contract `instance` have changed to `allowed`\\n    event OperatorChanged(address instance, address operator, bool allowed);\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct RequestMetadata {\\n        address caller;\\n        uint256 expiration;\\n    }\\n\\n    struct DeploymentRequest {\\n        string template;\\n        uint256 version;\\n        bytes initData;\\n        RequestMetadata metadata;\\n    }\\n\\n    struct CallRequest {\\n        address instance;\\n        bytes callData;\\n        RequestMetadata metadata;\\n    }\\n\\n    /***********\\n     * Storage *\\n     ***********/\\n\\n    /// Template names\\n    string[] private _templateNames;\\n\\n    /// Latest template implementations for `_templateNames`\\n    mapping(string => address) public latestImplementation;\\n\\n    /// Contracts that are whitelisted for proxy calls\\n    mapping(address => bool) public whitelisted;\\n\\n    /// Two storage slots that were previously used for fee-related variables.\\n    /// Need to keep them here because Factory is a deployed upgradeable contract\\n    /// so we can't reorder storage layout.\\n    uint256 _unusedSlot1;\\n    uint256 _unusedSlot2;\\n\\n    /// Current contract version\\n    uint256 public version;\\n\\n    /// Latest template versions for `_templateNames`\\n    mapping(string => uint256) public latestVersion;\\n\\n    /// All template versions for `_templateNames`\\n    mapping(string => uint256[]) private _templateVersions;\\n\\n    /// Implementation addresses for all template versions\\n    mapping(string => mapping(uint256 => address))\\n        private _templateImplementations;\\n\\n    /****************************\\n     * Contract init & upgrades *\\n     ****************************/\\n\\n    /**\\n     * @dev Empty constructor to disable direct initialization of this contract\\n     */\\n    constructor() initializer {}\\n\\n    /**\\n     * Initialize the Factory\\n     * @dev Callable only once\\n     * @param factoryOwner The address that should be assigned ADMIN_ROLE\\n     * @param factorySigner The address that should be assigned SIGNER_ROLE\\n     */\\n    function initialize(address factoryOwner, address factorySigner)\\n        public\\n        initializer\\n    {\\n        _grantRole(ADMIN_ROLE, factoryOwner);\\n        _grantRole(SIGNER_ROLE, factorySigner);\\n\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(SIGNER_ROLE, ADMIN_ROLE);\\n    }\\n\\n    /**\\n     * Perform any necessary state migrations between Factory versions\\n     * @dev Callable by anyone but in practice will get called atomically when the Factory implementation is updated.\\n     */\\n    function upgrade() external {\\n        require(version < CODE_VERSION, \\\"Already upgraded\\\");\\n\\n        /* Start migration code */\\n        delete _unusedSlot1;\\n        delete _unusedSlot2;\\n        /* End migration code */\\n\\n        version = CODE_VERSION;\\n    }\\n\\n    /***********\\n     * Actions *\\n     ***********/\\n\\n    /**\\n     * Deploy a specific version of the specified template\\n     * @dev Requires a signature of the deployment payload (caller, template name and initialization data) by a `SIGNER_ROLE` wallet\\n     * @param request The struct containing the deployment request\\n     * @param signature EIP712 signature of the request\\n     */\\n    function deploy(\\n        DeploymentRequest calldata request,\\n        bytes calldata signature\\n    )\\n        external\\n        payable\\n        validRequestOnly(request.metadata)\\n        signedOnly(_hash(request), signature)\\n    {\\n        _deploy(request.template, request.version, request.initData);\\n    }\\n\\n    /**\\n     * Call a deployed template instance\\n     * @dev Requires a signature of the call payload (caller, instance address and call data) by a `SIGNER_ROLE` wallet\\n     * @param request The struct containing the call request\\n     * @param signature EIP712 signature of the request\\n     */\\n    function call(CallRequest calldata request, bytes calldata signature)\\n        external\\n        payable\\n        operatorOnly(request.instance)\\n        validRequestOnly(request.metadata)\\n        signedOnly(_hash(request), signature)\\n    {\\n        _call(request.instance, request.callData, msg.value);\\n    }\\n\\n    /******************\\n     * View functions *\\n     ******************/\\n\\n    /**\\n     * Get a list of all templates registered with the factory\\n     * @return templateNames List of all template names that have been registered\\n     */\\n    function templates() external view returns (string[] memory templateNames) {\\n        uint256 count = _templateNames.length;\\n        templateNames = new string[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            templateNames[i] = _templateNames[i];\\n        }\\n    }\\n\\n    /**\\n     * Get a list of all registered versions of a template\\n     * @param templateName Name of the template\\n     * @return templateVersions List of all version numbers that have been registered for that template\\n     */\\n    function versions(string memory templateName)\\n        external\\n        view\\n        returns (uint256[] memory templateVersions)\\n    {\\n        uint256 count = _templateVersions[templateName].length;\\n        templateVersions = new uint256[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            templateVersions[i] = _templateVersions[templateName][i];\\n        }\\n    }\\n\\n    /**\\n     * Get the implementation address of a specific version of a template\\n     * @param templateName Name of the template\\n     * @param templateVersion Version of the implementation\\n     * @return Address of the implementation contract\\n     */\\n    function implementation(string memory templateName, uint256 templateVersion)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _templateImplementations[templateName][templateVersion];\\n    }\\n\\n    /**\\n     * Check if the `operator` address is allowed to operate on template instance `instance`\\n     * @param instance Address of the template instance\\n     * @param operator Address of the operator\\n     */\\n    function isOperator(address instance, address operator)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return hasRole(OPERATOR_ROLE(instance), operator);\\n    }\\n\\n    /**\\n     * Get the operator role for the specified instance\\n     * @param instance Address of the template instance that the role will be operating on\\n     * @return Operator role identifier\\n     */\\n    function OPERATOR_ROLE(address instance) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(instance, \\\"OPERATOR\\\"));\\n    }\\n\\n    /*******************\\n     * Admin functions *\\n     *******************/\\n\\n    /**\\n     * Register a new implementation with the Factory\\n     * @dev Implementation details will be read and validated on-chain\\n     * @param implementationAddress Address of the template implementation contract\\n     */\\n    function registerTemplate(address implementationAddress)\\n        public\\n        onlyRole(ADMIN_ROLE)\\n    {\\n        require(\\n            Address.isContract(implementationAddress),\\n            \\\"Not a valid contract\\\"\\n        );\\n\\n        // Read template information from the implementation contract\\n        ITemplate templateImplementation = ITemplate(implementationAddress);\\n        string memory templateName = templateImplementation.NAME();\\n        uint256 templateVersion = templateImplementation.VERSION();\\n\\n        // Template version must be non-zero for correct registration\\n        require(templateVersion > 0, \\\"Template version must be >0\\\");\\n\\n        // Store the template information\\n        _setTemplate(templateName, templateVersion, implementationAddress);\\n    }\\n\\n    /**\\n     * Update contract whitelist status\\n     * @dev For security reasons, we don't allow arbitrary contracts to be called via Factory. Contracts deployed via the Factory will be automatically whitelisted. This function is intended to allow us to disable any contracts that turn out to be vulnerable or malicious.\\n     * @param instance Contract address\\n     * @param newStatus New whitelist status\\n     */\\n    function setWhitelisted(address instance, bool newStatus)\\n        external\\n        onlyRole(ADMIN_ROLE)\\n    {\\n        _setWhitelisted(instance, newStatus);\\n    }\\n\\n    /**\\n     * Update the operator status of `instance` for `operator`\\n     * @param instance The template instance that will be operated on\\n     * @param operator The address of the operator that we want to update the status of\\n     * @param allowed New operator status\\n     */\\n    function setOperator(\\n        address instance,\\n        address operator,\\n        bool allowed\\n    ) external onlyRole(ADMIN_ROLE) {\\n        _setOperator(instance, operator, allowed);\\n    }\\n\\n    /*************\\n     * Internals *\\n     *************/\\n\\n    /**\\n     * @dev Internal function without access rights checks for storing template implemetation details\\n     * @param templateName Name of the template\\n     * @param templateVersion Template version\\n     * @param implementationAddress Address of the implementation contract\\n     */\\n    function _setTemplate(\\n        string memory templateName,\\n        uint256 templateVersion,\\n        address implementationAddress\\n    ) internal {\\n        require(\\n            _templateImplementations[templateName][templateVersion] ==\\n                address(0),\\n            \\\"Version already exists\\\"\\n        );\\n\\n        // Store the template implementation address\\n        _templateImplementations[templateName][\\n            templateVersion\\n        ] = implementationAddress;\\n\\n        // Update the list of available versions for a template\\n        _templateVersions[templateName].push(templateVersion);\\n\\n        // Check if we're adding a new template and update template list if needed\\n        if (latestImplementation[templateName] == address(0)) {\\n            _templateNames.push(templateName);\\n        }\\n\\n        // Update the current implementation version & address if needed\\n        if (templateVersion > latestVersion[templateName]) {\\n            latestVersion[templateName] = templateVersion;\\n            latestImplementation[templateName] = implementationAddress;\\n        }\\n\\n        emit TemplateAdded(\\n            templateName,\\n            templateVersion,\\n            implementationAddress\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function for updating whitelist status\\n     * @param instance Contract address\\n     * @param newStatus New whitelist status\\n     */\\n    function _setWhitelisted(address instance, bool newStatus) internal {\\n        whitelisted[instance] = newStatus;\\n    }\\n\\n    /**\\n     * @dev Internal function for granting or revoking contract operator role from an address\\n     * @param instance Contract address\\n     * @param operator Operator address\\n     * @param allowed New operator status\\n     */\\n    function _setOperator(\\n        address instance,\\n        address operator,\\n        bool allowed\\n    ) internal {\\n        if (allowed) {\\n            _grantRole(OPERATOR_ROLE(instance), operator);\\n        } else {\\n            _revokeRole(OPERATOR_ROLE(instance), operator);\\n        }\\n\\n        emit OperatorChanged(instance, operator, allowed);\\n    }\\n\\n    /**\\n     * @dev Internal function for deploying a template instance\\n     * @param templateName Name of the template to be deployed\\n     * @param templateVersion Version of the template implementation\\n     * @param initdata Initialization data for the newly deployed instance\\n     */\\n    function _deploy(\\n        string calldata templateName,\\n        uint256 templateVersion,\\n        bytes calldata initdata\\n    ) internal {\\n        address implementationAddress = _templateImplementations[templateName][\\n            templateVersion\\n        ];\\n        require(implementationAddress != address(0), \\\"Missing implementation\\\");\\n\\n        address clone = Clones.clone(implementationAddress);\\n        emit TemplateDeployed(templateName, templateVersion, clone);\\n\\n        _setOperator(clone, msg.sender, true);\\n        _setWhitelisted(clone, true);\\n\\n        _call(clone, initdata, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function for calling a template instance\\n     * @param instance Address of the template instance\\n     * @param data Call data to be forwarded to the instance\\n     * @param value Fees to be forwarded with the call\\n     */\\n    function _call(\\n        address instance,\\n        bytes calldata data,\\n        uint256 value\\n    ) internal {\\n        require(whitelisted[instance], \\\"Contract not whitelisted\\\");\\n\\n        assembly {\\n            let _calldata := mload(0x40)\\n            calldatacopy(_calldata, data.offset, data.length)\\n\\n            let result := call(\\n                gas(),\\n                instance,\\n                value,\\n                _calldata,\\n                data.length,\\n                0,\\n                0\\n            )\\n\\n            let returndata := mload(0x40)\\n            let size := returndatasize()\\n            returndatacopy(returndata, 0, size)\\n\\n            switch result\\n            case 0 {\\n                revert(returndata, size)\\n            }\\n            default {\\n                return(returndata, size)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hash function for the EIP712 domain separator\\n     */\\n    function _eip712domainSeparator() internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _DOMAIN_TYPEHASH,\\n                    keccak256(\\\"Factory\\\"),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Hash function for DeploymentRequest structs\\n     */\\n    function _hash(DeploymentRequest calldata request)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _DEPLOYMENT_REQUEST_TYPEHASH,\\n                    keccak256(bytes(request.template)),\\n                    request.version,\\n                    keccak256(request.initData),\\n                    _hash(request.metadata)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Hash function for RequestMetadata structs\\n     */\\n    function _hash(RequestMetadata calldata metadata)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _REQUEST_METADATA_TYPEHASH,\\n                    metadata.caller,\\n                    metadata.expiration\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Hash function for CallRequest structs\\n     */\\n    function _hash(CallRequest calldata request)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _CALL_REQUEST_TYPEHASH,\\n                    request.instance,\\n                    keccak256(request.callData),\\n                    _hash(request.metadata)\\n                )\\n            );\\n    }\\n\\n    /*************\\n     * Modifiers *\\n     *************/\\n\\n    /**\\n     * @dev Modifier for restricting the caller to be an operator of contract at address `instance`\\n     */\\n    modifier operatorOnly(address instance) {\\n        require(isOperator(instance, msg.sender), \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier for checking if `signature` is a valid signature of `message` by a `SIGNER_ROLE` wallet\\n     */\\n    modifier signedOnly(bytes32 structHash, bytes calldata signature) {\\n        bytes32 digest = ECDSA.toTypedDataHash(\\n            _eip712domainSeparator(),\\n            structHash\\n        );\\n        address signer = ECDSA.recover(digest, signature);\\n\\n        require(hasRole(SIGNER_ROLE, signer), \\\"Signer not recognized\\\");\\n\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier for validating request metadata for instance deployments and calls\\n     */\\n    modifier validRequestOnly(RequestMetadata calldata metadata) {\\n        require(msg.sender == metadata.caller, \\\"Wrong caller\\\");\\n        require(block.timestamp < metadata.expiration, \\\"Request expired\\\");\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd05568fca61362b2765760b7330f222af877b08f702b73a54213dcd249373257\",\"license\":\"MIT\"},\"contracts/lib/ITemplate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n * Template interface, used by factory contracts to get the name and version of a contract,\\n * that extends this interface.\\n */\\ninterface ITemplate {\\n    function NAME() external view returns (string memory);\\n\\n    function VERSION() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbf583f0046bf96a84fc2bc5cef21d433c838a7f701f7c93229d9faf026014e20\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff1615808015620000335750600054600160ff909116105b8062000063575062000050306200013d60201b620010911760201c565b15801562000063575060005460ff166001145b620000cb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000ef576000805461ff0019166101001790555b801562000136576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b506200014c565b6001600160a01b03163b151590565b612702806200015c6000396000f3fe6080604052600436106101815760003560e01c8063636169d8116100d1578063a1ebf35d1161008a578063bc735d9011610064578063bc735d90146104a6578063d547741f146104c6578063d55ec697146104e6578063d936547e146104fb57600080fd5b8063a1ebf35d1461044f578063a217fddf14610471578063b6363cf21461048657600080fd5b8063636169d81461039757806368aec8e2146103b757806375b238fc146103cd578063860a871f146103ef57806391d148541461040f5780639281aa0b1461042f57600080fd5b80632f2ff15d1161013e578063485cc95511610118578063485cc955146103145780635107f34814610334578063539ac4721461036157806354fd4d501461038157600080fd5b80632f2ff15d146102b257806336568abe146102d25780633a283d7d146102f257600080fd5b806301ffc9a714610186578063070f8f5a146101bb5780630c1ace3b146102015780631f1097e514610216578063248a9ca31461026f5780632cc9d7111461029f575b600080fd5b34801561019257600080fd5b506101a66101a1366004611e1d565b61052b565b60405190151581526020015b60405180910390f35b3480156101c757600080fd5b506101f36101d6366004611f0a565b8051602081830181018051609d8252928201919093012091525481565b6040519081526020016101b2565b61021461020f366004611f87565b610562565b005b34801561022257600080fd5b50610257610231366004611f0a565b80516020818301810180516098825292820191909301209152546001600160a01b031681565b6040516001600160a01b0390911681526020016101b2565b34801561027b57600080fd5b506101f361028a366004611ff7565b60009081526065602052604090206001015490565b6102146102ad366004612010565b610736565b3480156102be57600080fd5b506102146102cd366004612067565b610917565b3480156102de57600080fd5b506102146102ed366004612067565b610941565b3480156102fe57600080fd5b506103076109bf565b6040516101b291906120eb565b34801561032057600080fd5b5061021461032f36600461214d565b610af9565b34801561034057600080fd5b5061035461034f366004611f0a565b610c72565b6040516101b29190612177565b34801561036d57600080fd5b5061021461037c3660046121bb565b610d57565b34801561038d57600080fd5b506101f3609c5481565b3480156103a357600080fd5b506101f36103b23660046121bb565b610ef4565b3480156103c357600080fd5b506101f36127d881565b3480156103d957600080fd5b506101f36000805160206126ad83398151915281565b3480156103fb57600080fd5b5061025761040a3660046121d6565b610f45565b34801561041b57600080fd5b506101a661042a366004612067565b610f83565b34801561043b57600080fd5b5061021461044a36600461222a565b610fae565b34801561045b57600080fd5b506101f360008051602061268d83398151915281565b34801561047d57600080fd5b506101f3600081565b34801561049257600080fd5b506101a66104a136600461214d565b610fd0565b3480156104b257600080fd5b506102146104c1366004612254565b610feb565b3480156104d257600080fd5b506102146104e1366004612067565b611014565b3480156104f257600080fd5b50610214611039565b34801561050757600080fd5b506101a66105163660046121bb565b60996020526000908152604090205460ff1681565b60006001600160e01b03198216637965db0b60e01b148061055c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060830161057360808501826121bb565b6001600160a01b0316336001600160a01b0316146105c75760405162461bcd60e51b815260206004820152600c60248201526b2bb937b7339031b0b63632b960a11b60448201526064015b60405180910390fd5b8060200135421061060c5760405162461bcd60e51b815260206004820152600f60248201526e14995c5d595cdd08195e1c1a5c9959608a1b60448201526064016105be565b610615846110a0565b83836000610665610624611146565b8560405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b905060006106a98285858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111eb92505050565b90506106c360008051602061268d83398151915282610f83565b6107075760405162461bcd60e51b815260206004820152601560248201527414da59db995c881b9bdd081c9958dbd9db9a5e9959605a1b60448201526064016105be565b61072b6107148a80612297565b60208c013561072660408e018e612297565b61120f565b505050505050505050565b61074360208401846121bb565b61074d8133610fd0565b6107895760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b60448201526064016105be565b6040840161079a60608601826121bb565b6001600160a01b0316336001600160a01b0316146107e95760405162461bcd60e51b815260206004820152600c60248201526b2bb937b7339031b0b63632b960a11b60448201526064016105be565b8060200135421061082e5760405162461bcd60e51b815260206004820152600f60248201526e14995c5d595cdd08195e1c1a5c9959608a1b60448201526064016105be565b61083785611306565b84846000610846610624611146565b9050600061088a8285858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111eb92505050565b90506108a460008051602061268d83398151915282610f83565b6108e85760405162461bcd60e51b815260206004820152601560248201527414da59db995c881b9bdd081c9958dbd9db9a5e9959605a1b60448201526064016105be565b61090b6108f860208c018c6121bb565b61090560208d018d612297565b34611395565b50505050505050505050565b60008281526065602052604090206001015461093281611427565b61093c8383611434565b505050565b6001600160a01b03811633146109b15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105be565b6109bb82826114ba565b5050565b609754606090806001600160401b038111156109dd576109dd611e47565b604051908082528060200260200182016040528015610a1057816020015b60608152602001906001900390816109fb5790505b50915060005b81811015610af45760978181548110610a3157610a316122dd565b906000526020600020018054610a46906122f3565b80601f0160208091040260200160405190810160405280929190818152602001828054610a72906122f3565b8015610abf5780601f10610a9457610100808354040283529160200191610abf565b820191906000526020600020905b815481529060010190602001808311610aa257829003601f168201915b5050505050838281518110610ad657610ad66122dd565b60200260200101819052508080610aec90612343565b915050610a16565b505090565b600054610100900460ff1615808015610b195750600054600160ff909116105b80610b335750303b158015610b33575060005460ff166001145b610b965760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105be565b6000805460ff191660011790558015610bb9576000805461ff0019166101001790555b610bd16000805160206126ad83398151915284611434565b610be960008051602061268d83398151915283611434565b610c016000805160206126ad83398151915280611521565b610c2760008051602061268d8339815191526000805160206126ad833981519152611521565b801561093c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a1505050565b60606000609e83604051610c86919061235c565b908152604051908190036020019020549050806001600160401b03811115610cb057610cb0611e47565b604051908082528060200260200182016040528015610cd9578160200160208202803683370190505b50915060005b81811015610d5057609e84604051610cf7919061235c565b90815260200160405180910390208181548110610d1657610d166122dd565b9060005260206000200154838281518110610d3357610d336122dd565b602090810291909101015280610d4881612343565b915050610cdf565b5050919050565b6000805160206126ad833981519152610d6f81611427565b6001600160a01b0382163b610dbd5760405162461bcd60e51b8152602060048201526014602482015273139bdd0818481d985b1a590818dbdb9d1c9858dd60621b60448201526064016105be565b60008290506000816001600160a01b031663a3f4df7e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e02573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e2a9190810190612378565b90506000826001600160a01b031663ffa1ad746040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9091906123ee565b905060008111610ee25760405162461bcd60e51b815260206004820152601b60248201527f54656d706c6174652076657273696f6e206d757374206265203e30000000000060448201526064016105be565b610eed82828761156c565b5050505050565b6040516bffffffffffffffffffffffff19606083901b1660208201526727a822a920aa27a960c11b6034820152600090603c015b604051602081830303815290604052805190602001209050919050565b6000609f83604051610f57919061235c565b90815260408051602092819003830190206000948552909152909120546001600160a01b031692915050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206126ad833981519152610fc681611427565b61093c8383611796565b6000610fe4610fde84610ef4565b83610f83565b9392505050565b6000805160206126ad83398151915261100381611427565b61100e8484846117c1565b50505050565b60008281526065602052604090206001015461102f81611427565b61093c83836114ba565b6127d8609c541061107f5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481d5c19dc9859195960821b60448201526064016105be565b6000609a819055609b556127d8609c55565b6001600160a01b03163b151590565b60007ff4430ae2760c5d71a4354b544f7b4566d42c89483bac5264a894a119c0fc9bb86110cd8380612297565b6040516110db929190612407565b604051809103902083602001358480604001906110f89190612297565b604051611106929190612407565b604051809103902061111a8660600161183c565b6040805160208101969096528501939093526060840191909152608083015260a082015260c001610f28565b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f992f90ffb92c5ad86f1df6829115f18aaea41d6094dadc8955c35086081a7bb9918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60008060006111fa8585611899565b91509150611207816118de565b509392505050565b6000609f8686604051611223929190612407565b9081526040805160209281900383019020600087815292529020546001600160a01b031690508061128f5760405162461bcd60e51b815260206004820152601660248201527526b4b9b9b4b7339034b6b83632b6b2b73a30ba34b7b760511b60448201526064016105be565b600061129a82611a94565b90507f6b8bc6b40a290fd0b18d9df6812353964a8995c6df02f211f088dc23dd07ba15878787846040516112d19493929190612417565b60405180910390a16112e5813360016117c1565b6112f0816001611796565b6112fd8185856000611395565b50505050505050565b60007f27122634acde4146ed66dc745851809d52cf54f18ac4bf92f8c4668d185592a461133660208401846121bb565b6113436020850185612297565b604051611351929190612407565b60405180910390206113658560400161183c565b6040805160208101959095526001600160a01b03909316928401929092526060830152608082015260a001610f28565b6001600160a01b03841660009081526099602052604090205460ff166113fd5760405162461bcd60e51b815260206004820152601860248201527f436f6e7472616374206e6f742077686974656c6973746564000000000000000060448201526064016105be565b60405182848237600080848385895af190506040513d806000833e828015611423578183f35b8183fd5b6114318133611b31565b50565b61143e8282610f83565b6109bb5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556114763390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6114c48282610f83565b156109bb5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006001600160a01b0316609f84604051611587919061235c565b9081526040805160209281900383019020600086815292529020546001600160a01b0316146115f15760405162461bcd60e51b815260206004820152601660248201527556657273696f6e20616c72656164792065786973747360501b60448201526064016105be565b80609f84604051611602919061235c565b908152604080516020928190038301812060008781529352912080546001600160a01b0319166001600160a01b039390931692909217909155609e9061164990859061235c565b908152604051602091819003820181208054600181018255600091825292812090920184905560989061167d90869061235c565b908152604051908190036020019020546001600160a01b0316036116d957609780546001810182556000919091527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9016116d784826124ae565b505b609d836040516116e9919061235c565b9081526020016040518091039020548211156117635781609d84604051611710919061235c565b90815260200160405180910390208190555080609884604051611733919061235c565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555b7f0be5312ff68a803959eec846227697c8b78bd482eb8bdc334b0c9277bf9dc5aa838383604051610c659392919061256d565b6001600160a01b03919091166000908152609960205260409020805460ff1916911515919091179055565b80156117de576117d96117d384610ef4565b83611434565b6117f0565b6117f06117ea84610ef4565b836114ba565b604080516001600160a01b03808616825284166020820152821515918101919091527f360a624a90a46b5efa2724062dd6494f28d0b3afb636c74291727f5ffd160b3f90606001610c65565b60007fa47a666e1dc5980bd5a50371d479f2078c3a60ce07a41d0087841df42d4d475c61186c60208401846121bb565b604080516020818101949094526001600160a01b0390921690820152908301356060820152608001610f28565b60008082516041036118cf5760208301516040840151606085015160001a6118c387828585611b95565b945094505050506118d7565b506000905060025b9250929050565b60008160048111156118f2576118f26125a0565b036118fa5750565b600181600481111561190e5761190e6125a0565b0361195b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105be565b600281600481111561196f5761196f6125a0565b036119bc5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105be565b60038160048111156119d0576119d06125a0565b03611a285760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105be565b6004816004811115611a3c57611a3c6125a0565b036114315760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016105be565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116611b2c5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016105be565b919050565b611b3b8282610f83565b6109bb57611b53816001600160a01b03166014611c82565b611b5e836020611c82565b604051602001611b6f9291906125b6565b60408051601f198184030181529082905262461bcd60e51b82526105be9160040161262b565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611bcc5750600090506003611c79565b8460ff16601b14158015611be457508460ff16601c14155b15611bf55750600090506004611c79565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611c49573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611c7257600060019250925050611c79565b9150600090505b94509492505050565b60606000611c9183600261263e565b611c9c90600261265d565b6001600160401b03811115611cb357611cb3611e47565b6040519080825280601f01601f191660200182016040528015611cdd576020820181803683370190505b509050600360fc1b81600081518110611cf857611cf86122dd565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d2757611d276122dd565b60200101906001600160f81b031916908160001a9053506000611d4b84600261263e565b611d5690600161265d565b90505b6001811115611dce576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d8a57611d8a6122dd565b1a60f81b828281518110611da057611da06122dd565b60200101906001600160f81b031916908160001a90535060049490941c93611dc781612675565b9050611d59565b508315610fe45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105be565b600060208284031215611e2f57600080fd5b81356001600160e01b031981168114610fe457600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611e8557611e85611e47565b604052919050565b60006001600160401b03821115611ea657611ea6611e47565b50601f01601f191660200190565b600082601f830112611ec557600080fd5b8135611ed8611ed382611e8d565b611e5d565b818152846020838601011115611eed57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611f1c57600080fd5b81356001600160401b03811115611f3257600080fd5b611f3e84828501611eb4565b949350505050565b60008083601f840112611f5857600080fd5b5081356001600160401b03811115611f6f57600080fd5b6020830191508360208285010111156118d757600080fd5b600080600060408486031215611f9c57600080fd5b83356001600160401b0380821115611fb357600080fd5b9085019060a08288031215611fc757600080fd5b90935060208501359080821115611fdd57600080fd5b50611fea86828701611f46565b9497909650939450505050565b60006020828403121561200957600080fd5b5035919050565b60008060006040848603121561202557600080fd5b83356001600160401b038082111561203c57600080fd5b9085019060808288031215611fc757600080fd5b80356001600160a01b0381168114611b2c57600080fd5b6000806040838503121561207a57600080fd5b8235915061208a60208401612050565b90509250929050565b60005b838110156120ae578181015183820152602001612096565b8381111561100e5750506000910152565b600081518084526120d7816020860160208601612093565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561214057603f1988860301845261212e8583516120bf565b94509285019290850190600101612112565b5092979650505050505050565b6000806040838503121561216057600080fd5b61216983612050565b915061208a60208401612050565b6020808252825182820181905260009190848201906040850190845b818110156121af57835183529284019291840191600101612193565b50909695505050505050565b6000602082840312156121cd57600080fd5b610fe482612050565b600080604083850312156121e957600080fd5b82356001600160401b038111156121ff57600080fd5b61220b85828601611eb4565b95602094909401359450505050565b80358015158114611b2c57600080fd5b6000806040838503121561223d57600080fd5b61224683612050565b915061208a6020840161221a565b60008060006060848603121561226957600080fd5b61227284612050565b925061228060208501612050565b915061228e6040850161221a565b90509250925092565b6000808335601e198436030181126122ae57600080fd5b8301803591506001600160401b038211156122c857600080fd5b6020019150368190038213156118d757600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061230757607f821691505b60208210810361232757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016123555761235561232d565b5060010190565b6000825161236e818460208701612093565b9190910192915050565b60006020828403121561238a57600080fd5b81516001600160401b038111156123a057600080fd5b8201601f810184136123b157600080fd5b80516123bf611ed382611e8d565b8181528560208385010111156123d457600080fd5b6123e5826020830160208601612093565b95945050505050565b60006020828403121561240057600080fd5b5051919050565b8183823760009101908152919050565b60608152836060820152838560808301376000608085830181019190915260208201939093526001600160a01b03919091166040820152601f909201601f191690910101919050565b601f82111561093c57600081815260208120601f850160051c810160208610156124875750805b601f850160051c820191505b818110156124a657828155600101612493565b505050505050565b81516001600160401b038111156124c7576124c7611e47565b6124db816124d584546122f3565b84612460565b602080601f83116001811461251057600084156124f85750858301515b600019600386901b1c1916600185901b1785556124a6565b600085815260208120601f198616915b8281101561253f57888601518255948401946001909101908401612520565b508582101561255d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60608152600061258060608301866120bf565b6020830194909452506001600160a01b0391909116604090910152919050565b634e487b7160e01b600052602160045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516125ee816017850160208801612093565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161261f816028840160208801612093565b01602801949350505050565b602081526000610fe460208301846120bf565b60008160001904831182151516156126585761265861232d565b500290565b600082198211156126705761267061232d565b500190565b6000816126845761268461232d565b50600019019056fee2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220357862df3f81c89593e3cf5c361a0a10a51bdc420a12b6636c7045a80e5b4c2964736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c8063636169d8116100d1578063a1ebf35d1161008a578063bc735d9011610064578063bc735d90146104a6578063d547741f146104c6578063d55ec697146104e6578063d936547e146104fb57600080fd5b8063a1ebf35d1461044f578063a217fddf14610471578063b6363cf21461048657600080fd5b8063636169d81461039757806368aec8e2146103b757806375b238fc146103cd578063860a871f146103ef57806391d148541461040f5780639281aa0b1461042f57600080fd5b80632f2ff15d1161013e578063485cc95511610118578063485cc955146103145780635107f34814610334578063539ac4721461036157806354fd4d501461038157600080fd5b80632f2ff15d146102b257806336568abe146102d25780633a283d7d146102f257600080fd5b806301ffc9a714610186578063070f8f5a146101bb5780630c1ace3b146102015780631f1097e514610216578063248a9ca31461026f5780632cc9d7111461029f575b600080fd5b34801561019257600080fd5b506101a66101a1366004611e1d565b61052b565b60405190151581526020015b60405180910390f35b3480156101c757600080fd5b506101f36101d6366004611f0a565b8051602081830181018051609d8252928201919093012091525481565b6040519081526020016101b2565b61021461020f366004611f87565b610562565b005b34801561022257600080fd5b50610257610231366004611f0a565b80516020818301810180516098825292820191909301209152546001600160a01b031681565b6040516001600160a01b0390911681526020016101b2565b34801561027b57600080fd5b506101f361028a366004611ff7565b60009081526065602052604090206001015490565b6102146102ad366004612010565b610736565b3480156102be57600080fd5b506102146102cd366004612067565b610917565b3480156102de57600080fd5b506102146102ed366004612067565b610941565b3480156102fe57600080fd5b506103076109bf565b6040516101b291906120eb565b34801561032057600080fd5b5061021461032f36600461214d565b610af9565b34801561034057600080fd5b5061035461034f366004611f0a565b610c72565b6040516101b29190612177565b34801561036d57600080fd5b5061021461037c3660046121bb565b610d57565b34801561038d57600080fd5b506101f3609c5481565b3480156103a357600080fd5b506101f36103b23660046121bb565b610ef4565b3480156103c357600080fd5b506101f36127d881565b3480156103d957600080fd5b506101f36000805160206126ad83398151915281565b3480156103fb57600080fd5b5061025761040a3660046121d6565b610f45565b34801561041b57600080fd5b506101a661042a366004612067565b610f83565b34801561043b57600080fd5b5061021461044a36600461222a565b610fae565b34801561045b57600080fd5b506101f360008051602061268d83398151915281565b34801561047d57600080fd5b506101f3600081565b34801561049257600080fd5b506101a66104a136600461214d565b610fd0565b3480156104b257600080fd5b506102146104c1366004612254565b610feb565b3480156104d257600080fd5b506102146104e1366004612067565b611014565b3480156104f257600080fd5b50610214611039565b34801561050757600080fd5b506101a66105163660046121bb565b60996020526000908152604090205460ff1681565b60006001600160e01b03198216637965db0b60e01b148061055c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060830161057360808501826121bb565b6001600160a01b0316336001600160a01b0316146105c75760405162461bcd60e51b815260206004820152600c60248201526b2bb937b7339031b0b63632b960a11b60448201526064015b60405180910390fd5b8060200135421061060c5760405162461bcd60e51b815260206004820152600f60248201526e14995c5d595cdd08195e1c1a5c9959608a1b60448201526064016105be565b610615846110a0565b83836000610665610624611146565b8560405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b905060006106a98285858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111eb92505050565b90506106c360008051602061268d83398151915282610f83565b6107075760405162461bcd60e51b815260206004820152601560248201527414da59db995c881b9bdd081c9958dbd9db9a5e9959605a1b60448201526064016105be565b61072b6107148a80612297565b60208c013561072660408e018e612297565b61120f565b505050505050505050565b61074360208401846121bb565b61074d8133610fd0565b6107895760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b60448201526064016105be565b6040840161079a60608601826121bb565b6001600160a01b0316336001600160a01b0316146107e95760405162461bcd60e51b815260206004820152600c60248201526b2bb937b7339031b0b63632b960a11b60448201526064016105be565b8060200135421061082e5760405162461bcd60e51b815260206004820152600f60248201526e14995c5d595cdd08195e1c1a5c9959608a1b60448201526064016105be565b61083785611306565b84846000610846610624611146565b9050600061088a8285858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111eb92505050565b90506108a460008051602061268d83398151915282610f83565b6108e85760405162461bcd60e51b815260206004820152601560248201527414da59db995c881b9bdd081c9958dbd9db9a5e9959605a1b60448201526064016105be565b61090b6108f860208c018c6121bb565b61090560208d018d612297565b34611395565b50505050505050505050565b60008281526065602052604090206001015461093281611427565b61093c8383611434565b505050565b6001600160a01b03811633146109b15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105be565b6109bb82826114ba565b5050565b609754606090806001600160401b038111156109dd576109dd611e47565b604051908082528060200260200182016040528015610a1057816020015b60608152602001906001900390816109fb5790505b50915060005b81811015610af45760978181548110610a3157610a316122dd565b906000526020600020018054610a46906122f3565b80601f0160208091040260200160405190810160405280929190818152602001828054610a72906122f3565b8015610abf5780601f10610a9457610100808354040283529160200191610abf565b820191906000526020600020905b815481529060010190602001808311610aa257829003601f168201915b5050505050838281518110610ad657610ad66122dd565b60200260200101819052508080610aec90612343565b915050610a16565b505090565b600054610100900460ff1615808015610b195750600054600160ff909116105b80610b335750303b158015610b33575060005460ff166001145b610b965760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105be565b6000805460ff191660011790558015610bb9576000805461ff0019166101001790555b610bd16000805160206126ad83398151915284611434565b610be960008051602061268d83398151915283611434565b610c016000805160206126ad83398151915280611521565b610c2760008051602061268d8339815191526000805160206126ad833981519152611521565b801561093c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a1505050565b60606000609e83604051610c86919061235c565b908152604051908190036020019020549050806001600160401b03811115610cb057610cb0611e47565b604051908082528060200260200182016040528015610cd9578160200160208202803683370190505b50915060005b81811015610d5057609e84604051610cf7919061235c565b90815260200160405180910390208181548110610d1657610d166122dd565b9060005260206000200154838281518110610d3357610d336122dd565b602090810291909101015280610d4881612343565b915050610cdf565b5050919050565b6000805160206126ad833981519152610d6f81611427565b6001600160a01b0382163b610dbd5760405162461bcd60e51b8152602060048201526014602482015273139bdd0818481d985b1a590818dbdb9d1c9858dd60621b60448201526064016105be565b60008290506000816001600160a01b031663a3f4df7e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e02573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e2a9190810190612378565b90506000826001600160a01b031663ffa1ad746040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9091906123ee565b905060008111610ee25760405162461bcd60e51b815260206004820152601b60248201527f54656d706c6174652076657273696f6e206d757374206265203e30000000000060448201526064016105be565b610eed82828761156c565b5050505050565b6040516bffffffffffffffffffffffff19606083901b1660208201526727a822a920aa27a960c11b6034820152600090603c015b604051602081830303815290604052805190602001209050919050565b6000609f83604051610f57919061235c565b90815260408051602092819003830190206000948552909152909120546001600160a01b031692915050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206126ad833981519152610fc681611427565b61093c8383611796565b6000610fe4610fde84610ef4565b83610f83565b9392505050565b6000805160206126ad83398151915261100381611427565b61100e8484846117c1565b50505050565b60008281526065602052604090206001015461102f81611427565b61093c83836114ba565b6127d8609c541061107f5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481d5c19dc9859195960821b60448201526064016105be565b6000609a819055609b556127d8609c55565b6001600160a01b03163b151590565b60007ff4430ae2760c5d71a4354b544f7b4566d42c89483bac5264a894a119c0fc9bb86110cd8380612297565b6040516110db929190612407565b604051809103902083602001358480604001906110f89190612297565b604051611106929190612407565b604051809103902061111a8660600161183c565b6040805160208101969096528501939093526060840191909152608083015260a082015260c001610f28565b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f992f90ffb92c5ad86f1df6829115f18aaea41d6094dadc8955c35086081a7bb9918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60008060006111fa8585611899565b91509150611207816118de565b509392505050565b6000609f8686604051611223929190612407565b9081526040805160209281900383019020600087815292529020546001600160a01b031690508061128f5760405162461bcd60e51b815260206004820152601660248201527526b4b9b9b4b7339034b6b83632b6b2b73a30ba34b7b760511b60448201526064016105be565b600061129a82611a94565b90507f6b8bc6b40a290fd0b18d9df6812353964a8995c6df02f211f088dc23dd07ba15878787846040516112d19493929190612417565b60405180910390a16112e5813360016117c1565b6112f0816001611796565b6112fd8185856000611395565b50505050505050565b60007f27122634acde4146ed66dc745851809d52cf54f18ac4bf92f8c4668d185592a461133660208401846121bb565b6113436020850185612297565b604051611351929190612407565b60405180910390206113658560400161183c565b6040805160208101959095526001600160a01b03909316928401929092526060830152608082015260a001610f28565b6001600160a01b03841660009081526099602052604090205460ff166113fd5760405162461bcd60e51b815260206004820152601860248201527f436f6e7472616374206e6f742077686974656c6973746564000000000000000060448201526064016105be565b60405182848237600080848385895af190506040513d806000833e828015611423578183f35b8183fd5b6114318133611b31565b50565b61143e8282610f83565b6109bb5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556114763390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6114c48282610f83565b156109bb5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006001600160a01b0316609f84604051611587919061235c565b9081526040805160209281900383019020600086815292529020546001600160a01b0316146115f15760405162461bcd60e51b815260206004820152601660248201527556657273696f6e20616c72656164792065786973747360501b60448201526064016105be565b80609f84604051611602919061235c565b908152604080516020928190038301812060008781529352912080546001600160a01b0319166001600160a01b039390931692909217909155609e9061164990859061235c565b908152604051602091819003820181208054600181018255600091825292812090920184905560989061167d90869061235c565b908152604051908190036020019020546001600160a01b0316036116d957609780546001810182556000919091527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9016116d784826124ae565b505b609d836040516116e9919061235c565b9081526020016040518091039020548211156117635781609d84604051611710919061235c565b90815260200160405180910390208190555080609884604051611733919061235c565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555b7f0be5312ff68a803959eec846227697c8b78bd482eb8bdc334b0c9277bf9dc5aa838383604051610c659392919061256d565b6001600160a01b03919091166000908152609960205260409020805460ff1916911515919091179055565b80156117de576117d96117d384610ef4565b83611434565b6117f0565b6117f06117ea84610ef4565b836114ba565b604080516001600160a01b03808616825284166020820152821515918101919091527f360a624a90a46b5efa2724062dd6494f28d0b3afb636c74291727f5ffd160b3f90606001610c65565b60007fa47a666e1dc5980bd5a50371d479f2078c3a60ce07a41d0087841df42d4d475c61186c60208401846121bb565b604080516020818101949094526001600160a01b0390921690820152908301356060820152608001610f28565b60008082516041036118cf5760208301516040840151606085015160001a6118c387828585611b95565b945094505050506118d7565b506000905060025b9250929050565b60008160048111156118f2576118f26125a0565b036118fa5750565b600181600481111561190e5761190e6125a0565b0361195b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105be565b600281600481111561196f5761196f6125a0565b036119bc5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105be565b60038160048111156119d0576119d06125a0565b03611a285760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105be565b6004816004811115611a3c57611a3c6125a0565b036114315760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016105be565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116611b2c5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016105be565b919050565b611b3b8282610f83565b6109bb57611b53816001600160a01b03166014611c82565b611b5e836020611c82565b604051602001611b6f9291906125b6565b60408051601f198184030181529082905262461bcd60e51b82526105be9160040161262b565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611bcc5750600090506003611c79565b8460ff16601b14158015611be457508460ff16601c14155b15611bf55750600090506004611c79565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611c49573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611c7257600060019250925050611c79565b9150600090505b94509492505050565b60606000611c9183600261263e565b611c9c90600261265d565b6001600160401b03811115611cb357611cb3611e47565b6040519080825280601f01601f191660200182016040528015611cdd576020820181803683370190505b509050600360fc1b81600081518110611cf857611cf86122dd565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d2757611d276122dd565b60200101906001600160f81b031916908160001a9053506000611d4b84600261263e565b611d5690600161265d565b90505b6001811115611dce576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d8a57611d8a6122dd565b1a60f81b828281518110611da057611da06122dd565b60200101906001600160f81b031916908160001a90535060049490941c93611dc781612675565b9050611d59565b508315610fe45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105be565b600060208284031215611e2f57600080fd5b81356001600160e01b031981168114610fe457600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611e8557611e85611e47565b604052919050565b60006001600160401b03821115611ea657611ea6611e47565b50601f01601f191660200190565b600082601f830112611ec557600080fd5b8135611ed8611ed382611e8d565b611e5d565b818152846020838601011115611eed57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611f1c57600080fd5b81356001600160401b03811115611f3257600080fd5b611f3e84828501611eb4565b949350505050565b60008083601f840112611f5857600080fd5b5081356001600160401b03811115611f6f57600080fd5b6020830191508360208285010111156118d757600080fd5b600080600060408486031215611f9c57600080fd5b83356001600160401b0380821115611fb357600080fd5b9085019060a08288031215611fc757600080fd5b90935060208501359080821115611fdd57600080fd5b50611fea86828701611f46565b9497909650939450505050565b60006020828403121561200957600080fd5b5035919050565b60008060006040848603121561202557600080fd5b83356001600160401b038082111561203c57600080fd5b9085019060808288031215611fc757600080fd5b80356001600160a01b0381168114611b2c57600080fd5b6000806040838503121561207a57600080fd5b8235915061208a60208401612050565b90509250929050565b60005b838110156120ae578181015183820152602001612096565b8381111561100e5750506000910152565b600081518084526120d7816020860160208601612093565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561214057603f1988860301845261212e8583516120bf565b94509285019290850190600101612112565b5092979650505050505050565b6000806040838503121561216057600080fd5b61216983612050565b915061208a60208401612050565b6020808252825182820181905260009190848201906040850190845b818110156121af57835183529284019291840191600101612193565b50909695505050505050565b6000602082840312156121cd57600080fd5b610fe482612050565b600080604083850312156121e957600080fd5b82356001600160401b038111156121ff57600080fd5b61220b85828601611eb4565b95602094909401359450505050565b80358015158114611b2c57600080fd5b6000806040838503121561223d57600080fd5b61224683612050565b915061208a6020840161221a565b60008060006060848603121561226957600080fd5b61227284612050565b925061228060208501612050565b915061228e6040850161221a565b90509250925092565b6000808335601e198436030181126122ae57600080fd5b8301803591506001600160401b038211156122c857600080fd5b6020019150368190038213156118d757600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061230757607f821691505b60208210810361232757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016123555761235561232d565b5060010190565b6000825161236e818460208701612093565b9190910192915050565b60006020828403121561238a57600080fd5b81516001600160401b038111156123a057600080fd5b8201601f810184136123b157600080fd5b80516123bf611ed382611e8d565b8181528560208385010111156123d457600080fd5b6123e5826020830160208601612093565b95945050505050565b60006020828403121561240057600080fd5b5051919050565b8183823760009101908152919050565b60608152836060820152838560808301376000608085830181019190915260208201939093526001600160a01b03919091166040820152601f909201601f191690910101919050565b601f82111561093c57600081815260208120601f850160051c810160208610156124875750805b601f850160051c820191505b818110156124a657828155600101612493565b505050505050565b81516001600160401b038111156124c7576124c7611e47565b6124db816124d584546122f3565b84612460565b602080601f83116001811461251057600084156124f85750858301515b600019600386901b1c1916600185901b1785556124a6565b600085815260208120601f198616915b8281101561253f57888601518255948401946001909101908401612520565b508582101561255d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60608152600061258060608301866120bf565b6020830194909452506001600160a01b0391909116604090910152919050565b634e487b7160e01b600052602160045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516125ee816017850160208801612093565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161261f816028840160208801612093565b01602801949350505050565b602081526000610fe460208301846120bf565b60008160001904831182151516156126585761265861232d565b500290565b600082198211156126705761267061232d565b500190565b6000816126845761268461232d565b50600019019056fee2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220357862df3f81c89593e3cf5c361a0a10a51bdc420a12b6636c7045a80e5b4c2964736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "OPERATOR_ROLE(address)": {
        "params": {
          "instance": "Address of the template instance that the role will be operating on"
        },
        "returns": {
          "_0": "Operator role identifier"
        }
      },
      "call((address,bytes,(address,uint256)),bytes)": {
        "details": "Requires a signature of the call payload (caller, instance address and call data) by a `SIGNER_ROLE` wallet",
        "params": {
          "request": "The struct containing the call request",
          "signature": "EIP712 signature of the request"
        }
      },
      "constructor": {
        "details": "Empty constructor to disable direct initialization of this contract"
      },
      "deploy((string,uint256,bytes,(address,uint256)),bytes)": {
        "details": "Requires a signature of the deployment payload (caller, template name and initialization data) by a `SIGNER_ROLE` wallet",
        "params": {
          "request": "The struct containing the deployment request",
          "signature": "EIP712 signature of the request"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "implementation(string,uint256)": {
        "params": {
          "templateName": "Name of the template",
          "templateVersion": "Version of the implementation"
        },
        "returns": {
          "_0": "Address of the implementation contract"
        }
      },
      "initialize(address,address)": {
        "details": "Callable only once",
        "params": {
          "factoryOwner": "The address that should be assigned ADMIN_ROLE",
          "factorySigner": "The address that should be assigned SIGNER_ROLE"
        }
      },
      "isOperator(address,address)": {
        "params": {
          "instance": "Address of the template instance",
          "operator": "Address of the operator"
        }
      },
      "registerTemplate(address)": {
        "details": "Implementation details will be read and validated on-chain",
        "params": {
          "implementationAddress": "Address of the template implementation contract"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setOperator(address,address,bool)": {
        "params": {
          "allowed": "New operator status",
          "instance": "The template instance that will be operated on",
          "operator": "The address of the operator that we want to update the status of"
        }
      },
      "setWhitelisted(address,bool)": {
        "details": "For security reasons, we don't allow arbitrary contracts to be called via Factory. Contracts deployed via the Factory will be automatically whitelisted. This function is intended to allow us to disable any contracts that turn out to be vulnerable or malicious.",
        "params": {
          "instance": "Contract address",
          "newStatus": "New whitelist status"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "templates()": {
        "returns": {
          "templateNames": "List of all template names that have been registered"
        }
      },
      "upgrade()": {
        "details": "Callable by anyone but in practice will get called atomically when the Factory implementation is updated."
      },
      "versions(string)": {
        "params": {
          "templateName": "Name of the template"
        },
        "returns": {
          "templateVersions": "List of all version numbers that have been registered for that template"
        }
      }
    },
    "stateVariables": {
      "CODE_VERSION": {
        "details": "Should follow semver-like format of `MAJOR_MINOR_PATCH`"
      }
    },
    "title": "Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "OperatorChanged(address,address,bool)": {
        "notice": "Permissions for address `operator` to operate contract `instance` have changed to `allowed`"
      },
      "TemplateAdded(string,uint256,address)": {
        "notice": "A new version of a template implementation has been added to the Factory"
      },
      "TemplateDeployed(string,uint256,address)": {
        "notice": "An instance of a template has been deployed"
      }
    },
    "kind": "user",
    "methods": {
      "ADMIN_ROLE()": {
        "notice": "Contract administrator role"
      },
      "CODE_VERSION()": {
        "notice": "Contract code version"
      },
      "OPERATOR_ROLE(address)": {
        "notice": "Get the operator role for the specified instance"
      },
      "SIGNER_ROLE()": {
        "notice": "Transaction signer role"
      },
      "call((address,bytes,(address,uint256)),bytes)": {
        "notice": "Call a deployed template instance"
      },
      "deploy((string,uint256,bytes,(address,uint256)),bytes)": {
        "notice": "Deploy a specific version of the specified template"
      },
      "implementation(string,uint256)": {
        "notice": "Get the implementation address of a specific version of a template"
      },
      "initialize(address,address)": {
        "notice": "Initialize the Factory"
      },
      "isOperator(address,address)": {
        "notice": "Check if the `operator` address is allowed to operate on template instance `instance`"
      },
      "latestImplementation(string)": {
        "notice": "Latest template implementations for `_templateNames`"
      },
      "latestVersion(string)": {
        "notice": "Latest template versions for `_templateNames`"
      },
      "registerTemplate(address)": {
        "notice": "Register a new implementation with the Factory"
      },
      "setOperator(address,address,bool)": {
        "notice": "Update the operator status of `instance` for `operator`"
      },
      "setWhitelisted(address,bool)": {
        "notice": "Update contract whitelist status"
      },
      "templates()": {
        "notice": "Get a list of all templates registered with the factory"
      },
      "upgrade()": {
        "notice": "Perform any necessary state migrations between Factory versions"
      },
      "version()": {
        "notice": "Current contract version"
      },
      "versions(string)": {
        "notice": "Get a list of all registered versions of a template"
      },
      "whitelisted(address)": {
        "notice": "Contracts that are whitelisted for proxy calls"
      }
    },
    "notice": "Contract for managing contract templates, their implementations and deploying and calling template instances. Uses {Clones} to deploy https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] compliant proxy contracts Upgradable contract, meaning it does not make use of a constructor but rather uses `initialize` with `initializer` modifier, see {Initializable} Allows for registering new templates and delegating calls to deployed proxies. Saves versions and names for each clone that can be deployed using this factory. Proxies can be deployed with a signature from an address with `SIGNER_ROLE` or by paying `deploymentFee` Proxies can be called with a signature from an address with `SIGNER_ROLE` or by paying `callFee`",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 419,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 422,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3527,
        "contract": "contracts/Factory.sol:Factory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3797,
        "contract": "contracts/Factory.sol:Factory",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/Factory.sol:Factory",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5809,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_templateNames",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 5814,
        "contract": "contracts/Factory.sol:Factory",
        "label": "latestImplementation",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 5819,
        "contract": "contracts/Factory.sol:Factory",
        "label": "whitelisted",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5822,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_unusedSlot1",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 5824,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_unusedSlot2",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 5827,
        "contract": "contracts/Factory.sol:Factory",
        "label": "version",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 5832,
        "contract": "contracts/Factory.sol:Factory",
        "label": "latestVersion",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5838,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_templateVersions",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5845,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_templateImplementations",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/Factory.sol:Factory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/Factory.sol:Factory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}