{
  "address": "0x1E06C0DDA9739F3C9B30e739F68e8f085E19c846",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "OperatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "TemplateAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "TemplateDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CODE_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "call",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "call",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "initdata",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "templateVersion",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "initdata",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "initdata",
          "type": "bytes"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deploymentFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "templateVersion",
          "type": "uint256"
        }
      ],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factorySigner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "latestImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "latestVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementationAddress",
          "type": "address"
        }
      ],
      "name": "registerTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setCallFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setDeploymentFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        }
      ],
      "name": "setWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "templates",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "templateNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        }
      ],
      "name": "versions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "templateVersions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf5d0989a296ddbf6e7dea93d54aa14d5bc612f0ee30704ee0562f3579a69858d",
  "receipt": {
    "to": null,
    "from": "0xE7D7696C8f11278124f39fB7cDd39fD9442D5026",
    "contractAddress": "0x1E06C0DDA9739F3C9B30e739F68e8f085E19c846",
    "transactionIndex": 105,
    "gasUsed": "2554624",
    "logsBloom": "0x
    "blockHash": "0xdf829999fc805e60e426030e59387792c4ff741cf9c70a7ff473b641a86a78e9",
    "transactionHash": "0xf5d0989a296ddbf6e7dea93d54aa14d5bc612f0ee30704ee0562f3579a69858d",
    "logs": [
      {
        "transactionIndex": 105,
        "blockNumber": 15545637,
        "transactionHash": "0xf5d0989a296ddbf6e7dea93d54aa14d5bc612f0ee30704ee0562f3579a69858d",
        "address": "0x1E06C0DDA9739F3C9B30e739F68e8f085E19c846",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 124,
        "blockHash": "0xdf829999fc805e60e426030e59387792c4ff741cf9c70a7ff473b641a86a78e9"
      }
    ],
    "blockNumber": 15545637,
    "cumulativeGasUsed": "10079259",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "e0295fa3ea65e9eeb22f32df8650597f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"TemplateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"TemplateDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CODE_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"initdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"templateVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"initdata\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploymentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"templateVersion\",\"type\":\"uint256\"}],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factorySigner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"latestImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"latestVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"}],\"name\":\"registerTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setCallFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setDeploymentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"setWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templates\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"templateNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"}],\"name\":\"versions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"templateVersions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"Contract administrator role\"},\"CODE_VERSION()\":{\"notice\":\"Contract code version\"},\"OPERATOR_ROLE(address)\":{\"notice\":\"Get the operator role for specified instance\"},\"SIGNER_ROLE()\":{\"notice\":\"Transaction signer role\"},\"call(address,bytes)\":{\"notice\":\"Proxy a call to a deployed contract instance\"},\"call(address,bytes,bytes)\":{\"notice\":\"Proxy a call to a deployed contract instance with additional signatue verification\"},\"callFee()\":{\"notice\":\"Call fee\"},\"deploy(string,bytes)\":{\"notice\":\"Deploy a new contract instance\"},\"deploy(string,bytes,bytes)\":{\"notice\":\"Deploy a new contract instance with additional signatue verification\"},\"deploy(string,uint256,bytes,bytes)\":{\"notice\":\"Deploy a specific version of a template\"},\"deploymentFee()\":{\"notice\":\"Deployment fee\"},\"implementation(string,uint256)\":{\"notice\":\"Get the implementation address of a specific version of a template\"},\"isOperator(address,address)\":{\"notice\":\"Check if an address is allowed to operate a deployed contract\"},\"latestImplementation(string)\":{\"notice\":\"Latest template implementations\"},\"registerTemplate(address)\":{\"notice\":\"Add a new implementation\"},\"setCallFee(uint256)\":{\"notice\":\"Update proxied call fee\"},\"setDeploymentFee(uint256)\":{\"notice\":\"Update deployment fee\"},\"setOperator(address,address,bool)\":{\"notice\":\"Manage permissions for an address to operate a deployed contract\"},\"setWhitelisted(address,bool)\":{\"notice\":\"Update contract whitelist status\"},\"templates()\":{\"notice\":\"Get a list of all templates registered with the factory\"},\"versions(string)\":{\"notice\":\"Get a list of all registered versions of a template\"},\"whitelisted(address)\":{\"notice\":\"Contracts that are whitelisted for proxy calls\"},\"withdrawFees(address)\":{\"notice\":\"Withdraw all fees from the contract to an address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae614c6b103b743c62e9544632f7ef4fc8950de4e9c783d2e765a3b86701dda3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"./lib/ITemplate.sol\\\";\\n\\ncontract Factory is AccessControlUpgradeable {\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    /// Contract code version\\n    uint256 public constant CODE_VERSION = 1_01_00;\\n    /// Contract administrator role\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    /// Transaction signer role\\n    bytes32 public constant SIGNER_ROLE = keccak256(\\\"SIGNER_ROLE\\\");\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    // A new version of a template implementation has been added to the Factory\\n    event TemplateAdded(string name, uint256 version, address implementation);\\n\\n    // An instance of a template has been deployed\\n    event TemplateDeployed(string name, uint256 version, address destination);\\n\\n    // Permissions for address `operator` to operate contract `instance` has\\n    // changed to `allowed`\\n    event OperatorChanged(address instance, address operator, bool allowed);\\n\\n    /***********\\n     * Storage *\\n     ***********/\\n\\n    /// Template names\\n    string[] private _templateNames;\\n\\n    /// Latest template implementations\\n    mapping(string => address) public latestImplementation;\\n\\n    /// Contracts that are whitelisted for proxy calls\\n    mapping(address => bool) public whitelisted;\\n\\n    /// Deployment fee\\n    uint256 public deploymentFee;\\n\\n    /// Call fee\\n    uint256 public callFee;\\n\\n    // Current contract version\\n    uint256 public version;\\n\\n    // Latest template versions\\n    mapping(string => uint256) public latestVersion;\\n\\n    // All template versions\\n    mapping(string => uint256[]) private _templateVersions;\\n\\n    // Implementation addresses for all template versions\\n    mapping(string => mapping(uint256 => address))\\n        private _templateImplementations;\\n\\n    /****************************\\n     * Contract init & upgrades *\\n     ****************************/\\n\\n    constructor() initializer {}\\n\\n    function initialize(address factoryOwner, address factorySigner)\\n        public\\n        initializer\\n    {\\n        _grantRole(ADMIN_ROLE, factoryOwner);\\n        _grantRole(SIGNER_ROLE, factorySigner);\\n\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(SIGNER_ROLE, ADMIN_ROLE);\\n    }\\n\\n    function upgrade() external {\\n        require(version < CODE_VERSION, \\\"Already upgraded\\\");\\n\\n        /* Start migration code */\\n        if (version < 1_01_00) {\\n            // Iterate over all templates\\n            for (uint256 i = 0; i < _templateNames.length; i++) {\\n                string memory templateName = _templateNames[i];\\n\\n                // Get the latest implementation address\\n                address implementationAddress = latestImplementation[\\n                    templateName\\n                ];\\n                ITemplate template = ITemplate(implementationAddress);\\n\\n                // Get the latest implementation version\\n                uint256 templateVersion = template.VERSION();\\n\\n                // Store the information\\n                _setTemplate(\\n                    templateName,\\n                    templateVersion,\\n                    implementationAddress\\n                );\\n            }\\n        }\\n        /* End migration code */\\n\\n        version = CODE_VERSION;\\n    }\\n\\n    /***********\\n     * Actions *\\n     ***********/\\n\\n    /**\\n     * Deploy a new contract instance\\n     */\\n    function deploy(string calldata name, bytes calldata initdata)\\n        external\\n        payable\\n        paidOnly(deploymentFee)\\n    {\\n        _deploy(name, latestVersion[name], initdata);\\n    }\\n\\n    /**\\n     * Proxy a call to a deployed contract instance\\n     */\\n    function call(address instance, bytes calldata data)\\n        external\\n        payable\\n        operatorOnly(instance)\\n        paidOnly(callFee)\\n    {\\n        _call(instance, data, msg.value - callFee);\\n    }\\n\\n    /**\\n     * Deploy a new contract instance\\n     * with additional signatue verification\\n     */\\n    function deploy(\\n        string calldata templateName,\\n        bytes calldata initdata,\\n        bytes calldata signature\\n    )\\n        external\\n        payable\\n        signedOnly(\\n            abi.encodePacked(msg.sender, templateName, initdata),\\n            signature\\n        )\\n    {\\n        _deploy(templateName, latestVersion[templateName], initdata);\\n    }\\n\\n    /**\\n     * Deploy a specific version of a template\\n     */\\n    function deploy(\\n        string calldata templateName,\\n        uint256 templateVersion,\\n        bytes calldata initdata,\\n        bytes calldata signature\\n    )\\n        external\\n        payable\\n        signedOnly(\\n            abi.encodePacked(\\n                msg.sender,\\n                templateName,\\n                templateVersion,\\n                initdata\\n            ),\\n            signature\\n        )\\n    {\\n        _deploy(templateName, templateVersion, initdata);\\n    }\\n\\n    /**\\n     * Proxy a call to a deployed contract instance\\n     * with additional signatue verification\\n     */\\n    function call(\\n        address instance,\\n        bytes calldata data,\\n        bytes calldata signature\\n    )\\n        external\\n        payable\\n        operatorOnly(instance)\\n        signedOnly(abi.encodePacked(msg.sender, instance, data), signature)\\n    {\\n        _call(instance, data, msg.value);\\n    }\\n\\n    /**\\n     * Manage permissions for an address to operate a deployed contract\\n     */\\n    function setOperator(\\n        address instance,\\n        address operator,\\n        bool allowed\\n    ) external operatorOnly(instance) {\\n        require(msg.sender != operator, \\\"Cannot change own role\\\");\\n\\n        _setOperator(instance, operator, allowed);\\n    }\\n\\n    /******************\\n     * View functions *\\n     ******************/\\n\\n    /**\\n     * Get a list of all templates registered with the factory\\n     */\\n    function templates() external view returns (string[] memory templateNames) {\\n        uint256 count = _templateNames.length;\\n        templateNames = new string[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            templateNames[i] = _templateNames[i];\\n        }\\n    }\\n\\n    /**\\n     * Get a list of all registered versions of a template\\n     */\\n    function versions(string memory templateName)\\n        external\\n        view\\n        returns (uint256[] memory templateVersions)\\n    {\\n        uint256 count = _templateVersions[templateName].length;\\n        templateVersions = new uint256[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            templateVersions[i] = _templateVersions[templateName][i];\\n        }\\n    }\\n\\n    /**\\n     * Get the implementation address of a specific version of a template\\n     */\\n    function implementation(string memory templateName, uint256 templateVersion)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _templateImplementations[templateName][templateVersion];\\n    }\\n\\n    /**\\n     * Check if an address is allowed to operate a deployed contract\\n     */\\n    function isOperator(address instance, address operator)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return hasRole(OPERATOR_ROLE(instance), operator);\\n    }\\n\\n    /**\\n     * Update deployment fee\\n     */\\n    function setDeploymentFee(uint256 newFee) external onlyRole(ADMIN_ROLE) {\\n        deploymentFee = newFee;\\n    }\\n\\n    /**\\n     * Update proxied call fee\\n     */\\n    function setCallFee(uint256 newFee) external onlyRole(ADMIN_ROLE) {\\n        callFee = newFee;\\n    }\\n\\n    /**\\n     * Get the operator role for specified instance\\n     */\\n    function OPERATOR_ROLE(address instance) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(instance, \\\"OPERATOR\\\"));\\n    }\\n\\n    /*******************\\n     * Admin functions *\\n     *******************/\\n\\n    /**\\n     * Add a new implementation\\n     */\\n    function registerTemplate(address implementationAddress)\\n        public\\n        onlyRole(ADMIN_ROLE)\\n    {\\n        require(\\n            Address.isContract(implementationAddress),\\n            \\\"Not a valid contract\\\"\\n        );\\n\\n        // Read template information from the implementation contract\\n        ITemplate templateImplementation = ITemplate(implementationAddress);\\n        string memory templateName = templateImplementation.NAME();\\n        uint256 templateVersion = templateImplementation.VERSION();\\n\\n        // Store the template information\\n        _setTemplate(templateName, templateVersion, implementationAddress);\\n    }\\n\\n    /**\\n     * Update contract whitelist status\\n     */\\n    function setWhitelisted(address instance, bool newStatus)\\n        external\\n        onlyRole(ADMIN_ROLE)\\n    {\\n        _setWhitelisted(instance, newStatus);\\n    }\\n\\n    /**\\n     * Withdraw all fees from the contract to an address\\n     */\\n    function withdrawFees(address to) external onlyRole(ADMIN_ROLE) {\\n        Address.sendValue(payable(to), address(this).balance);\\n    }\\n\\n    /*************\\n     * Internals *\\n     *************/\\n\\n    function _setTemplate(\\n        string memory templateName,\\n        uint256 templateVersion,\\n        address implementationAddress\\n    ) internal {\\n        require(\\n            _templateImplementations[templateName][templateVersion] ==\\n                address(0),\\n            \\\"Version already exists\\\"\\n        );\\n\\n        // Store the template implementation address\\n        _templateImplementations[templateName][\\n            templateVersion\\n        ] = implementationAddress;\\n\\n        // Update the list of available versions for a template\\n        _templateVersions[templateName].push(templateVersion);\\n\\n        // Check if we're adding a new template and update template list if needed\\n        if (latestImplementation[templateName] == address(0)) {\\n            _templateNames.push(templateName);\\n        }\\n\\n        // Update the current implementation version & address if needed\\n        if (templateVersion > latestVersion[templateName]) {\\n            latestVersion[templateName] = templateVersion;\\n            latestImplementation[templateName] = implementationAddress;\\n        }\\n\\n        emit TemplateAdded(\\n            templateName,\\n            templateVersion,\\n            implementationAddress\\n        );\\n    }\\n\\n    function _setWhitelisted(address instance, bool newStatus) internal {\\n        whitelisted[instance] = newStatus;\\n    }\\n\\n    function _setOperator(\\n        address instance,\\n        address operator,\\n        bool allowed\\n    ) internal {\\n        if (allowed) {\\n            _grantRole(OPERATOR_ROLE(instance), operator);\\n        } else {\\n            _revokeRole(OPERATOR_ROLE(instance), operator);\\n        }\\n\\n        emit OperatorChanged(instance, operator, allowed);\\n    }\\n\\n    function _deploy(\\n        string calldata templateName,\\n        uint256 templateVersion,\\n        bytes calldata initdata\\n    ) internal {\\n        address implementationAddress = _templateImplementations[templateName][\\n            templateVersion\\n        ];\\n        require(implementationAddress != address(0), \\\"Missing implementation\\\");\\n\\n        address clone = Clones.clone(implementationAddress);\\n        emit TemplateDeployed(templateName, templateVersion, clone);\\n\\n        _setOperator(clone, msg.sender, true);\\n        _setWhitelisted(clone, true);\\n\\n        _call(clone, initdata, 0);\\n    }\\n\\n    function _call(\\n        address instance,\\n        bytes calldata data,\\n        uint256 value\\n    ) internal {\\n        require(whitelisted[instance], \\\"Contract not whitelisted\\\");\\n\\n        assembly {\\n            let _calldata := mload(0x40)\\n            calldatacopy(_calldata, data.offset, data.length)\\n\\n            let result := call(\\n                gas(),\\n                instance,\\n                value,\\n                _calldata,\\n                data.length,\\n                0,\\n                0\\n            )\\n\\n            let returndata := mload(0x40)\\n            let size := returndatasize()\\n            returndatacopy(returndata, 0, size)\\n\\n            switch result\\n            case 0 {\\n                revert(returndata, size)\\n            }\\n            default {\\n                return(returndata, size)\\n            }\\n        }\\n    }\\n\\n    /*************\\n     * Modifiers *\\n     *************/\\n\\n    modifier operatorOnly(address instance) {\\n        require(isOperator(instance, msg.sender), \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    modifier signedOnly(bytes memory message, bytes calldata signature) {\\n        address messageSigner = ECDSA.recover(\\n            ECDSA.toEthSignedMessageHash(message),\\n            signature\\n        );\\n\\n        require(hasRole(SIGNER_ROLE, messageSigner), \\\"Signer not recognized\\\");\\n\\n        _;\\n    }\\n\\n    modifier paidOnly(uint256 fee) {\\n        require(msg.value >= fee, \\\"Insufficient payment\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5b90214eedd347893f91f6b1aa6b619abf19cfa86e1093e342008ba120a2d31a\",\"license\":\"MIT\"},\"contracts/lib/ITemplate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITemplate {\\n    function NAME() external view returns (string memory);\\n\\n    function VERSION() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcbf356472c33f1539d9e3ccf21d501adcb40ba9a952833801b166c38f09c6902\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff1615808015620000335750600054600160ff909116105b8062000063575062000050306200013d60201b6200130e1760201c565b15801562000063575060005460ff166001145b620000cb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000ef576000805461ff0019166101001790555b801562000136576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b506200014c565b6001600160a01b03163b151590565b612cbd806200015c6000396000f3fe6080604052600436106101f95760003560e01c8063860a871f1161010d578063b6363cf2116100a0578063d547741f1161006f578063d547741f146105da578063d55ec697146105fa578063d6297f1a1461060f578063d936547e14610622578063f2cff57f1461065257600080fd5b8063b6363cf214610567578063bc735d9014610587578063be3397e9146105a7578063d002462b146105ba57600080fd5b806397d7246d116100dc57806397d7246d1461050a5780639ad0c6231461051d578063a1ebf35d14610530578063a217fddf1461055257600080fd5b8063860a871f1461049457806390321e1a146104b457806391d14854146104ca5780639281aa0b146104ea57600080fd5b806336568abe11610190578063539ac4721161015f578063539ac4721461040657806354fd4d5014610426578063636169d81461043c57806368aec8e21461045c57806375b238fc1461047257600080fd5b806336568abe146103775780633a283d7d14610397578063485cc955146103b95780635107f348146103d957600080fd5b80631f1097e5116101cc5780631f1097e5146102ae578063248a9ca31461030757806326465826146103375780632f2ff15d1461035757600080fd5b806301ffc9a7146101fe578063070f8f5a14610233578063164e68de146102795780631b8b921d1461029b575b600080fd5b34801561020a57600080fd5b5061021e6102193660046120a2565b610668565b60405190151581526020015b60405180910390f35b34801561023f57600080fd5b5061026b61024e36600461218f565b8051602081830181018051609d8252928201919093012091525481565b60405190815260200161022a565b34801561028557600080fd5b506102996102943660046121da565b61069f565b005b6102996102a9366004612236565b6106c5565b3480156102ba57600080fd5b506102ef6102c936600461218f565b80516020818301810180516098825292820191909301209152546001600160a01b031681565b6040516001600160a01b03909116815260200161022a565b34801561031357600080fd5b5061026b610322366004612288565b60009081526065602052604090206001015490565b34801561034357600080fd5b50610299610352366004612288565b61075f565b34801561036357600080fd5b506102996103723660046122a1565b61077d565b34801561038357600080fd5b506102996103923660046122a1565b6107a7565b3480156103a357600080fd5b506103ac610821565b60405161022a9190612325565b3480156103c557600080fd5b506102996103d4366004612387565b61095b565b3480156103e557600080fd5b506103f96103f436600461218f565b610ad4565b60405161022a91906123b1565b34801561041257600080fd5b506102996104213660046121da565b610bb9565b34801561043257600080fd5b5061026b609c5481565b34801561044857600080fd5b5061026b6104573660046121da565b610cff565b34801561046857600080fd5b5061026b61277481565b34801561047e57600080fd5b5061026b600080516020612c6883398151915281565b3480156104a057600080fd5b506102ef6104af3660046123f5565b610d50565b3480156104c057600080fd5b5061026b609b5481565b3480156104d657600080fd5b5061021e6104e53660046122a1565b610d8e565b3480156104f657600080fd5b50610299610505366004612449565b610db9565b610299610518366004612473565b610ddb565b61029961052b36600461250c565b610ebe565b34801561053c57600080fd5b5061026b600080516020612c4883398151915281565b34801561055e57600080fd5b5061026b600081565b34801561057357600080fd5b5061021e610582366004612387565b610f48565b34801561059357600080fd5b506102996105a23660046125af565b610f63565b6102996105b53660046125f2565b610fec565b3480156105c657600080fd5b506102996105d5366004612288565b611063565b3480156105e657600080fd5b506102996105f53660046122a1565b611081565b34801561060657600080fd5b506102996110a6565b61029961061d36600461265d565b61126f565b34801561062e57600080fd5b5061021e61063d3660046121da565b60996020526000908152604090205460ff1681565b34801561065e57600080fd5b5061026b609a5481565b60006001600160e01b03198216637965db0b60e01b148061069957506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080516020612c688339815191526106b78161131d565b6106c1824761132a565b5050565b826106d08133610f48565b6106f55760405162461bcd60e51b81526004016106ec906126dd565b60405180910390fd5b609b548034101561073f5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016106ec565b610758858585609b5434610753919061271a565b611443565b5050505050565b600080516020612c688339815191526107778161131d565b50609b55565b6000828152606560205260409020600101546107988161131d565b6107a283836114d5565b505050565b6001600160a01b03811633146108175760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106ec565b6106c1828261155b565b609754606090806001600160401b0381111561083f5761083f6120cc565b60405190808252806020026020018201604052801561087257816020015b606081526020019060019003908161085d5790505b50915060005b81811015610956576097818154811061089357610893612731565b9060005260206000200180546108a890612747565b80601f01602080910402602001604051908101604052809291908181526020018280546108d490612747565b80156109215780601f106108f657610100808354040283529160200191610921565b820191906000526020600020905b81548152906001019060200180831161090457829003601f168201915b505050505083828151811061093857610938612731565b6020026020010181905250808061094e90612781565b915050610878565b505090565b600054610100900460ff161580801561097b5750600054600160ff909116105b806109955750303b158015610995575060005460ff166001145b6109f85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106ec565b6000805460ff191660011790558015610a1b576000805461ff0019166101001790555b610a33600080516020612c68833981519152846114d5565b610a4b600080516020612c48833981519152836114d5565b610a63600080516020612c68833981519152806115c2565b610a89600080516020612c48833981519152600080516020612c688339815191526115c2565b80156107a2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a1505050565b60606000609e83604051610ae8919061279a565b908152604051908190036020019020549050806001600160401b03811115610b1257610b126120cc565b604051908082528060200260200182016040528015610b3b578160200160208202803683370190505b50915060005b81811015610bb257609e84604051610b59919061279a565b90815260200160405180910390208181548110610b7857610b78612731565b9060005260206000200154838281518110610b9557610b95612731565b602090810291909101015280610baa81612781565b915050610b41565b5050919050565b600080516020612c68833981519152610bd18161131d565b6001600160a01b0382163b610c1f5760405162461bcd60e51b8152602060048201526014602482015273139bdd0818481d985b1a590818dbdb9d1c9858dd60621b60448201526064016106ec565b60008290506000816001600160a01b031663a3f4df7e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c64573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c8c91908101906127b6565b90506000826001600160a01b031663ffa1ad746040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf2919061282c565b905061075882828761160d565b6040516bffffffffffffffffffffffff19606083901b1660208201526727a822a920aa27a960c11b6034820152600090603c015b604051602081830303815290604052805190602001209050919050565b6000609f83604051610d62919061279a565b90815260408051602092819003830190206000948552909152909120546001600160a01b031692915050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020612c68833981519152610dd18161131d565b6107a28383611837565b3386868686604051602001610df4959493929190612845565b60405160208183030381529060405282826000610e4f610e1385611862565b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061188092505050565b9050610e69600080516020612c4883398151915282610d8e565b610e855760405162461bcd60e51b81526004016106ec90612883565b610eb28a8a609d8d8d604051610e9c9291906128b2565b9081526020016040518091039020548b8b6118a4565b50505050505050505050565b338787878787604051602001610ed9969594939291906128c2565b60405160208183030381529060405282826000610ef8610e1385611862565b9050610f12600080516020612c4883398151915282610d8e565b610f2e5760405162461bcd60e51b81526004016106ec90612883565b610f3b8b8b8b8b8b6118a4565b5050505050505050505050565b6000610f5c610f5684610cff565b83610d8e565b9392505050565b82610f6e8133610f48565b610f8a5760405162461bcd60e51b81526004016106ec906126dd565b6001600160a01b0383163303610fdb5760405162461bcd60e51b815260206004820152601660248201527543616e6e6f74206368616e6765206f776e20726f6c6560501b60448201526064016106ec565b610fe684848461199b565b50505050565b609a54803410156110365760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016106ec565b6107588585609d888860405161104d9291906128b2565b90815260200160405180910390205486866118a4565b600080516020612c6883398151915261107b8161131d565b50609a55565b60008281526065602052604090206001015461109c8161131d565b6107a2838361155b565b612774609c54106110ec5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481d5c19dc9859195960821b60448201526064016106ec565b612774609c5410156112675760005b6097548110156112655760006097828154811061111a5761111a612731565b90600052602060002001805461112f90612747565b80601f016020809104026020016040519081016040528092919081815260200182805461115b90612747565b80156111a85780601f1061117d576101008083540402835291602001916111a8565b820191906000526020600020905b81548152906001019060200180831161118b57829003601f168201915b5050505050905060006098826040516111c1919061279a565b908152604080519182900360209081018320546001621794a360e21b0319845291516001600160a01b0390921693508392600092849263ffa1ad7492600480820193918290030181865afa15801561121d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611241919061282c565b905061124e84828561160d565b50505050808061125d90612781565b9150506110fb565b505b612774609c55565b8461127a8133610f48565b6112965760405162461bcd60e51b81526004016106ec906126dd565b338686866040516020016112ad9493929190612901565b604051602081830303815290604052838360006112cc610e1385611862565b90506112e6600080516020612c4883398151915282610d8e565b6113025760405162461bcd60e51b81526004016106ec90612883565b610eb28a8a8a34611443565b6001600160a01b03163b151590565b6113278133611a16565b50565b8047101561137a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106ec565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146113c7576040519150601f19603f3d011682016040523d82523d6000602084013e6113cc565b606091505b50509050806107a25760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106ec565b6001600160a01b03841660009081526099602052604090205460ff166114ab5760405162461bcd60e51b815260206004820152601860248201527f436f6e7472616374206e6f742077686974656c6973746564000000000000000060448201526064016106ec565b60405182848237600080848385895af190506040513d806000833e8280156114d1578183f35b8183fd5b6114df8282610d8e565b6106c15760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556115173390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6115658282610d8e565b156106c15760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006001600160a01b0316609f84604051611628919061279a565b9081526040805160209281900383019020600086815292529020546001600160a01b0316146116925760405162461bcd60e51b815260206004820152601660248201527556657273696f6e20616c72656164792065786973747360501b60448201526064016106ec565b80609f846040516116a3919061279a565b908152604080516020928190038301812060008781529352912080546001600160a01b0319166001600160a01b039390931692909217909155609e906116ea90859061279a565b908152604051602091819003820181208054600181018255600091825292812090920184905560989061171e90869061279a565b908152604051908190036020019020546001600160a01b03160361177a57609780546001810182556000919091527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9016117788482612987565b505b609d8360405161178a919061279a565b9081526020016040518091039020548211156118045781609d846040516117b1919061279a565b908152602001604051809103902081905550806098846040516117d4919061279a565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555b7f0be5312ff68a803959eec846227697c8b78bd482eb8bdc334b0c9277bf9dc5aa838383604051610ac793929190612a46565b6001600160a01b03919091166000908152609960205260409020805460ff1916911515919091179055565b600061186e8251611a7a565b82604051602001610d33929190612a79565b600080600061188f8585611b82565b9150915061189c81611bc7565b509392505050565b6000609f86866040516118b89291906128b2565b9081526040805160209281900383019020600087815292529020546001600160a01b03169050806119245760405162461bcd60e51b815260206004820152601660248201527526b4b9b9b4b7339034b6b83632b6b2b73a30ba34b7b760511b60448201526064016106ec565b600061192f82611d7d565b90507f6b8bc6b40a290fd0b18d9df6812353964a8995c6df02f211f088dc23dd07ba15878787846040516119669493929190612ad4565b60405180910390a161197a8133600161199b565b611985816001611837565b6119928185856000611443565b50505050505050565b80156119b8576119b36119ad84610cff565b836114d5565b6119ca565b6119ca6119c484610cff565b8361155b565b604080516001600160a01b03808616825284166020820152821515918101919091527f360a624a90a46b5efa2724062dd6494f28d0b3afb636c74291727f5ffd160b3f90606001610ac7565b611a208282610d8e565b6106c157611a38816001600160a01b03166014611e1a565b611a43836020611e1a565b604051602001611a54929190612b1d565b60408051601f198184030181529082905262461bcd60e51b82526106ec91600401612b92565b606081600003611aa15750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611acb5780611ab581612781565b9150611ac49050600a83612bbb565b9150611aa5565b6000816001600160401b03811115611ae557611ae56120cc565b6040519080825280601f01601f191660200182016040528015611b0f576020820181803683370190505b5090505b8415611b7a57611b2460018361271a565b9150611b31600a86612bcf565b611b3c906030612be3565b60f81b818381518110611b5157611b51612731565b60200101906001600160f81b031916908160001a905350611b73600a86612bbb565b9450611b13565b949350505050565b6000808251604103611bb85760208301516040840151606085015160001a611bac87828585611fb5565b94509450505050611bc0565b506000905060025b9250929050565b6000816004811115611bdb57611bdb612bfb565b03611be35750565b6001816004811115611bf757611bf7612bfb565b03611c445760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106ec565b6002816004811115611c5857611c58612bfb565b03611ca55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106ec565b6003816004811115611cb957611cb9612bfb565b03611d115760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106ec565b6004816004811115611d2557611d25612bfb565b036113275760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016106ec565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116611e155760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016106ec565b919050565b60606000611e29836002612c11565b611e34906002612be3565b6001600160401b03811115611e4b57611e4b6120cc565b6040519080825280601f01601f191660200182016040528015611e75576020820181803683370190505b509050600360fc1b81600081518110611e9057611e90612731565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611ebf57611ebf612731565b60200101906001600160f81b031916908160001a9053506000611ee3846002612c11565b611eee906001612be3565b90505b6001811115611f66576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f2257611f22612731565b1a60f81b828281518110611f3857611f38612731565b60200101906001600160f81b031916908160001a90535060049490941c93611f5f81612c30565b9050611ef1565b508315610f5c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106ec565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611fec5750600090506003612099565b8460ff16601b1415801561200457508460ff16601c14155b156120155750600090506004612099565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612069573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661209257600060019250925050612099565b9150600090505b94509492505050565b6000602082840312156120b457600080fd5b81356001600160e01b031981168114610f5c57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561210a5761210a6120cc565b604052919050565b60006001600160401b0382111561212b5761212b6120cc565b50601f01601f191660200190565b600082601f83011261214a57600080fd5b813561215d61215882612112565b6120e2565b81815284602083860101111561217257600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156121a157600080fd5b81356001600160401b038111156121b757600080fd5b611b7a84828501612139565b80356001600160a01b0381168114611e1557600080fd5b6000602082840312156121ec57600080fd5b610f5c826121c3565b60008083601f84011261220757600080fd5b5081356001600160401b0381111561221e57600080fd5b602083019150836020828501011115611bc057600080fd5b60008060006040848603121561224b57600080fd5b612254846121c3565b925060208401356001600160401b0381111561226f57600080fd5b61227b868287016121f5565b9497909650939450505050565b60006020828403121561229a57600080fd5b5035919050565b600080604083850312156122b457600080fd5b823591506122c4602084016121c3565b90509250929050565b60005b838110156122e85781810151838201526020016122d0565b83811115610fe65750506000910152565b600081518084526123118160208601602086016122cd565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561237a57603f198886030184526123688583516122f9565b9450928501929085019060010161234c565b5092979650505050505050565b6000806040838503121561239a57600080fd5b6123a3836121c3565b91506122c4602084016121c3565b6020808252825182820181905260009190848201906040850190845b818110156123e9578351835292840192918401916001016123cd565b50909695505050505050565b6000806040838503121561240857600080fd5b82356001600160401b0381111561241e57600080fd5b61242a85828601612139565b95602094909401359450505050565b80358015158114611e1557600080fd5b6000806040838503121561245c57600080fd5b612465836121c3565b91506122c460208401612439565b6000806000806000806060878903121561248c57600080fd5b86356001600160401b03808211156124a357600080fd5b6124af8a838b016121f5565b909850965060208901359150808211156124c857600080fd5b6124d48a838b016121f5565b909650945060408901359150808211156124ed57600080fd5b506124fa89828a016121f5565b979a9699509497509295939492505050565b60008060008060008060006080888a03121561252757600080fd5b87356001600160401b038082111561253e57600080fd5b61254a8b838c016121f5565b909950975060208a0135965060408a013591508082111561256a57600080fd5b6125768b838c016121f5565b909650945060608a013591508082111561258f57600080fd5b5061259c8a828b016121f5565b989b979a50959850939692959293505050565b6000806000606084860312156125c457600080fd5b6125cd846121c3565b92506125db602085016121c3565b91506125e960408501612439565b90509250925092565b6000806000806040858703121561260857600080fd5b84356001600160401b038082111561261f57600080fd5b61262b888389016121f5565b9096509450602087013591508082111561264457600080fd5b50612651878288016121f5565b95989497509550505050565b60008060008060006060868803121561267557600080fd5b61267e866121c3565b945060208601356001600160401b038082111561269a57600080fd5b6126a689838a016121f5565b909650945060408801359150808211156126bf57600080fd5b506126cc888289016121f5565b969995985093965092949392505050565b6020808252600d908201526c1058d8d95cdcc819195b9a5959609a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008282101561272c5761272c612704565b500390565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061275b57607f821691505b60208210810361277b57634e487b7160e01b600052602260045260246000fd5b50919050565b60006001820161279357612793612704565b5060010190565b600082516127ac8184602087016122cd565b9190910192915050565b6000602082840312156127c857600080fd5b81516001600160401b038111156127de57600080fd5b8201601f810184136127ef57600080fd5b80516127fd61215882612112565b81815285602083850101111561281257600080fd5b6128238260208301602086016122cd565b95945050505050565b60006020828403121561283e57600080fd5b5051919050565b6001600160601b03198660601b1681528385601483013760008482016014810160008152848682375060009301601401928352509095945050505050565b60208082526015908201527414da59db995c881b9bdd081c9958dbd9db9a5e9959605a1b604082015260600190565b8183823760009101908152919050565b6001600160601b03198760601b168152848660148301376000858201856014820152838560348301376000930160340192835250909695505050505050565b60006001600160601b0319808760601b168352808660601b166014840152508284602884013750600091016028019081529392505050565b601f8211156107a257600081815260208120601f850160051c810160208610156129605750805b601f850160051c820191505b8181101561297f5782815560010161296c565b505050505050565b81516001600160401b038111156129a0576129a06120cc565b6129b4816129ae8454612747565b84612939565b602080601f8311600181146129e957600084156129d15750858301515b600019600386901b1c1916600185901b17855561297f565b600085815260208120601f198616915b82811015612a18578886015182559484019460019091019084016129f9565b5085821015612a365787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000612a5960608301866122f9565b6020830194909452506001600160a01b0391909116604090910152919050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000815260008351612ab181601a8501602088016122cd565b835190830190612ac881601a8401602088016122cd565b01601a01949350505050565b60608152836060820152838560808301376000608085830181019190915260208201939093526001600160a01b03919091166040820152601f909201601f191690910101919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612b558160178501602088016122cd565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612b868160288401602088016122cd565b01602801949350505050565b602081526000610f5c60208301846122f9565b634e487b7160e01b600052601260045260246000fd5b600082612bca57612bca612ba5565b500490565b600082612bde57612bde612ba5565b500690565b60008219821115612bf657612bf6612704565b500190565b634e487b7160e01b600052602160045260246000fd5b6000816000190483118215151615612c2b57612c2b612704565b500290565b600081612c3f57612c3f612704565b50600019019056fee2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212202234e1dc6c6c1ceb9e66a85683096d6c34303af2490935827c3130693959a9c964736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c8063860a871f1161010d578063b6363cf2116100a0578063d547741f1161006f578063d547741f146105da578063d55ec697146105fa578063d6297f1a1461060f578063d936547e14610622578063f2cff57f1461065257600080fd5b8063b6363cf214610567578063bc735d9014610587578063be3397e9146105a7578063d002462b146105ba57600080fd5b806397d7246d116100dc57806397d7246d1461050a5780639ad0c6231461051d578063a1ebf35d14610530578063a217fddf1461055257600080fd5b8063860a871f1461049457806390321e1a146104b457806391d14854146104ca5780639281aa0b146104ea57600080fd5b806336568abe11610190578063539ac4721161015f578063539ac4721461040657806354fd4d5014610426578063636169d81461043c57806368aec8e21461045c57806375b238fc1461047257600080fd5b806336568abe146103775780633a283d7d14610397578063485cc955146103b95780635107f348146103d957600080fd5b80631f1097e5116101cc5780631f1097e5146102ae578063248a9ca31461030757806326465826146103375780632f2ff15d1461035757600080fd5b806301ffc9a7146101fe578063070f8f5a14610233578063164e68de146102795780631b8b921d1461029b575b600080fd5b34801561020a57600080fd5b5061021e6102193660046120a2565b610668565b60405190151581526020015b60405180910390f35b34801561023f57600080fd5b5061026b61024e36600461218f565b8051602081830181018051609d8252928201919093012091525481565b60405190815260200161022a565b34801561028557600080fd5b506102996102943660046121da565b61069f565b005b6102996102a9366004612236565b6106c5565b3480156102ba57600080fd5b506102ef6102c936600461218f565b80516020818301810180516098825292820191909301209152546001600160a01b031681565b6040516001600160a01b03909116815260200161022a565b34801561031357600080fd5b5061026b610322366004612288565b60009081526065602052604090206001015490565b34801561034357600080fd5b50610299610352366004612288565b61075f565b34801561036357600080fd5b506102996103723660046122a1565b61077d565b34801561038357600080fd5b506102996103923660046122a1565b6107a7565b3480156103a357600080fd5b506103ac610821565b60405161022a9190612325565b3480156103c557600080fd5b506102996103d4366004612387565b61095b565b3480156103e557600080fd5b506103f96103f436600461218f565b610ad4565b60405161022a91906123b1565b34801561041257600080fd5b506102996104213660046121da565b610bb9565b34801561043257600080fd5b5061026b609c5481565b34801561044857600080fd5b5061026b6104573660046121da565b610cff565b34801561046857600080fd5b5061026b61277481565b34801561047e57600080fd5b5061026b600080516020612c6883398151915281565b3480156104a057600080fd5b506102ef6104af3660046123f5565b610d50565b3480156104c057600080fd5b5061026b609b5481565b3480156104d657600080fd5b5061021e6104e53660046122a1565b610d8e565b3480156104f657600080fd5b50610299610505366004612449565b610db9565b610299610518366004612473565b610ddb565b61029961052b36600461250c565b610ebe565b34801561053c57600080fd5b5061026b600080516020612c4883398151915281565b34801561055e57600080fd5b5061026b600081565b34801561057357600080fd5b5061021e610582366004612387565b610f48565b34801561059357600080fd5b506102996105a23660046125af565b610f63565b6102996105b53660046125f2565b610fec565b3480156105c657600080fd5b506102996105d5366004612288565b611063565b3480156105e657600080fd5b506102996105f53660046122a1565b611081565b34801561060657600080fd5b506102996110a6565b61029961061d36600461265d565b61126f565b34801561062e57600080fd5b5061021e61063d3660046121da565b60996020526000908152604090205460ff1681565b34801561065e57600080fd5b5061026b609a5481565b60006001600160e01b03198216637965db0b60e01b148061069957506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080516020612c688339815191526106b78161131d565b6106c1824761132a565b5050565b826106d08133610f48565b6106f55760405162461bcd60e51b81526004016106ec906126dd565b60405180910390fd5b609b548034101561073f5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016106ec565b610758858585609b5434610753919061271a565b611443565b5050505050565b600080516020612c688339815191526107778161131d565b50609b55565b6000828152606560205260409020600101546107988161131d565b6107a283836114d5565b505050565b6001600160a01b03811633146108175760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106ec565b6106c1828261155b565b609754606090806001600160401b0381111561083f5761083f6120cc565b60405190808252806020026020018201604052801561087257816020015b606081526020019060019003908161085d5790505b50915060005b81811015610956576097818154811061089357610893612731565b9060005260206000200180546108a890612747565b80601f01602080910402602001604051908101604052809291908181526020018280546108d490612747565b80156109215780601f106108f657610100808354040283529160200191610921565b820191906000526020600020905b81548152906001019060200180831161090457829003601f168201915b505050505083828151811061093857610938612731565b6020026020010181905250808061094e90612781565b915050610878565b505090565b600054610100900460ff161580801561097b5750600054600160ff909116105b806109955750303b158015610995575060005460ff166001145b6109f85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106ec565b6000805460ff191660011790558015610a1b576000805461ff0019166101001790555b610a33600080516020612c68833981519152846114d5565b610a4b600080516020612c48833981519152836114d5565b610a63600080516020612c68833981519152806115c2565b610a89600080516020612c48833981519152600080516020612c688339815191526115c2565b80156107a2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a1505050565b60606000609e83604051610ae8919061279a565b908152604051908190036020019020549050806001600160401b03811115610b1257610b126120cc565b604051908082528060200260200182016040528015610b3b578160200160208202803683370190505b50915060005b81811015610bb257609e84604051610b59919061279a565b90815260200160405180910390208181548110610b7857610b78612731565b9060005260206000200154838281518110610b9557610b95612731565b602090810291909101015280610baa81612781565b915050610b41565b5050919050565b600080516020612c68833981519152610bd18161131d565b6001600160a01b0382163b610c1f5760405162461bcd60e51b8152602060048201526014602482015273139bdd0818481d985b1a590818dbdb9d1c9858dd60621b60448201526064016106ec565b60008290506000816001600160a01b031663a3f4df7e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c64573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c8c91908101906127b6565b90506000826001600160a01b031663ffa1ad746040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf2919061282c565b905061075882828761160d565b6040516bffffffffffffffffffffffff19606083901b1660208201526727a822a920aa27a960c11b6034820152600090603c015b604051602081830303815290604052805190602001209050919050565b6000609f83604051610d62919061279a565b90815260408051602092819003830190206000948552909152909120546001600160a01b031692915050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020612c68833981519152610dd18161131d565b6107a28383611837565b3386868686604051602001610df4959493929190612845565b60405160208183030381529060405282826000610e4f610e1385611862565b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061188092505050565b9050610e69600080516020612c4883398151915282610d8e565b610e855760405162461bcd60e51b81526004016106ec90612883565b610eb28a8a609d8d8d604051610e9c9291906128b2565b9081526020016040518091039020548b8b6118a4565b50505050505050505050565b338787878787604051602001610ed9969594939291906128c2565b60405160208183030381529060405282826000610ef8610e1385611862565b9050610f12600080516020612c4883398151915282610d8e565b610f2e5760405162461bcd60e51b81526004016106ec90612883565b610f3b8b8b8b8b8b6118a4565b5050505050505050505050565b6000610f5c610f5684610cff565b83610d8e565b9392505050565b82610f6e8133610f48565b610f8a5760405162461bcd60e51b81526004016106ec906126dd565b6001600160a01b0383163303610fdb5760405162461bcd60e51b815260206004820152601660248201527543616e6e6f74206368616e6765206f776e20726f6c6560501b60448201526064016106ec565b610fe684848461199b565b50505050565b609a54803410156110365760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016106ec565b6107588585609d888860405161104d9291906128b2565b90815260200160405180910390205486866118a4565b600080516020612c6883398151915261107b8161131d565b50609a55565b60008281526065602052604090206001015461109c8161131d565b6107a2838361155b565b612774609c54106110ec5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481d5c19dc9859195960821b60448201526064016106ec565b612774609c5410156112675760005b6097548110156112655760006097828154811061111a5761111a612731565b90600052602060002001805461112f90612747565b80601f016020809104026020016040519081016040528092919081815260200182805461115b90612747565b80156111a85780601f1061117d576101008083540402835291602001916111a8565b820191906000526020600020905b81548152906001019060200180831161118b57829003601f168201915b5050505050905060006098826040516111c1919061279a565b908152604080519182900360209081018320546001621794a360e21b0319845291516001600160a01b0390921693508392600092849263ffa1ad7492600480820193918290030181865afa15801561121d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611241919061282c565b905061124e84828561160d565b50505050808061125d90612781565b9150506110fb565b505b612774609c55565b8461127a8133610f48565b6112965760405162461bcd60e51b81526004016106ec906126dd565b338686866040516020016112ad9493929190612901565b604051602081830303815290604052838360006112cc610e1385611862565b90506112e6600080516020612c4883398151915282610d8e565b6113025760405162461bcd60e51b81526004016106ec90612883565b610eb28a8a8a34611443565b6001600160a01b03163b151590565b6113278133611a16565b50565b8047101561137a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106ec565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146113c7576040519150601f19603f3d011682016040523d82523d6000602084013e6113cc565b606091505b50509050806107a25760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106ec565b6001600160a01b03841660009081526099602052604090205460ff166114ab5760405162461bcd60e51b815260206004820152601860248201527f436f6e7472616374206e6f742077686974656c6973746564000000000000000060448201526064016106ec565b60405182848237600080848385895af190506040513d806000833e8280156114d1578183f35b8183fd5b6114df8282610d8e565b6106c15760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556115173390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6115658282610d8e565b156106c15760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006001600160a01b0316609f84604051611628919061279a565b9081526040805160209281900383019020600086815292529020546001600160a01b0316146116925760405162461bcd60e51b815260206004820152601660248201527556657273696f6e20616c72656164792065786973747360501b60448201526064016106ec565b80609f846040516116a3919061279a565b908152604080516020928190038301812060008781529352912080546001600160a01b0319166001600160a01b039390931692909217909155609e906116ea90859061279a565b908152604051602091819003820181208054600181018255600091825292812090920184905560989061171e90869061279a565b908152604051908190036020019020546001600160a01b03160361177a57609780546001810182556000919091527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9016117788482612987565b505b609d8360405161178a919061279a565b9081526020016040518091039020548211156118045781609d846040516117b1919061279a565b908152602001604051809103902081905550806098846040516117d4919061279a565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555b7f0be5312ff68a803959eec846227697c8b78bd482eb8bdc334b0c9277bf9dc5aa838383604051610ac793929190612a46565b6001600160a01b03919091166000908152609960205260409020805460ff1916911515919091179055565b600061186e8251611a7a565b82604051602001610d33929190612a79565b600080600061188f8585611b82565b9150915061189c81611bc7565b509392505050565b6000609f86866040516118b89291906128b2565b9081526040805160209281900383019020600087815292529020546001600160a01b03169050806119245760405162461bcd60e51b815260206004820152601660248201527526b4b9b9b4b7339034b6b83632b6b2b73a30ba34b7b760511b60448201526064016106ec565b600061192f82611d7d565b90507f6b8bc6b40a290fd0b18d9df6812353964a8995c6df02f211f088dc23dd07ba15878787846040516119669493929190612ad4565b60405180910390a161197a8133600161199b565b611985816001611837565b6119928185856000611443565b50505050505050565b80156119b8576119b36119ad84610cff565b836114d5565b6119ca565b6119ca6119c484610cff565b8361155b565b604080516001600160a01b03808616825284166020820152821515918101919091527f360a624a90a46b5efa2724062dd6494f28d0b3afb636c74291727f5ffd160b3f90606001610ac7565b611a208282610d8e565b6106c157611a38816001600160a01b03166014611e1a565b611a43836020611e1a565b604051602001611a54929190612b1d565b60408051601f198184030181529082905262461bcd60e51b82526106ec91600401612b92565b606081600003611aa15750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611acb5780611ab581612781565b9150611ac49050600a83612bbb565b9150611aa5565b6000816001600160401b03811115611ae557611ae56120cc565b6040519080825280601f01601f191660200182016040528015611b0f576020820181803683370190505b5090505b8415611b7a57611b2460018361271a565b9150611b31600a86612bcf565b611b3c906030612be3565b60f81b818381518110611b5157611b51612731565b60200101906001600160f81b031916908160001a905350611b73600a86612bbb565b9450611b13565b949350505050565b6000808251604103611bb85760208301516040840151606085015160001a611bac87828585611fb5565b94509450505050611bc0565b506000905060025b9250929050565b6000816004811115611bdb57611bdb612bfb565b03611be35750565b6001816004811115611bf757611bf7612bfb565b03611c445760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106ec565b6002816004811115611c5857611c58612bfb565b03611ca55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106ec565b6003816004811115611cb957611cb9612bfb565b03611d115760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106ec565b6004816004811115611d2557611d25612bfb565b036113275760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016106ec565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116611e155760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016106ec565b919050565b60606000611e29836002612c11565b611e34906002612be3565b6001600160401b03811115611e4b57611e4b6120cc565b6040519080825280601f01601f191660200182016040528015611e75576020820181803683370190505b509050600360fc1b81600081518110611e9057611e90612731565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611ebf57611ebf612731565b60200101906001600160f81b031916908160001a9053506000611ee3846002612c11565b611eee906001612be3565b90505b6001811115611f66576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f2257611f22612731565b1a60f81b828281518110611f3857611f38612731565b60200101906001600160f81b031916908160001a90535060049490941c93611f5f81612c30565b9050611ef1565b508315610f5c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106ec565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611fec5750600090506003612099565b8460ff16601b1415801561200457508460ff16601c14155b156120155750600090506004612099565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612069573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661209257600060019250925050612099565b9150600090505b94509492505050565b6000602082840312156120b457600080fd5b81356001600160e01b031981168114610f5c57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561210a5761210a6120cc565b604052919050565b60006001600160401b0382111561212b5761212b6120cc565b50601f01601f191660200190565b600082601f83011261214a57600080fd5b813561215d61215882612112565b6120e2565b81815284602083860101111561217257600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156121a157600080fd5b81356001600160401b038111156121b757600080fd5b611b7a84828501612139565b80356001600160a01b0381168114611e1557600080fd5b6000602082840312156121ec57600080fd5b610f5c826121c3565b60008083601f84011261220757600080fd5b5081356001600160401b0381111561221e57600080fd5b602083019150836020828501011115611bc057600080fd5b60008060006040848603121561224b57600080fd5b612254846121c3565b925060208401356001600160401b0381111561226f57600080fd5b61227b868287016121f5565b9497909650939450505050565b60006020828403121561229a57600080fd5b5035919050565b600080604083850312156122b457600080fd5b823591506122c4602084016121c3565b90509250929050565b60005b838110156122e85781810151838201526020016122d0565b83811115610fe65750506000910152565b600081518084526123118160208601602086016122cd565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561237a57603f198886030184526123688583516122f9565b9450928501929085019060010161234c565b5092979650505050505050565b6000806040838503121561239a57600080fd5b6123a3836121c3565b91506122c4602084016121c3565b6020808252825182820181905260009190848201906040850190845b818110156123e9578351835292840192918401916001016123cd565b50909695505050505050565b6000806040838503121561240857600080fd5b82356001600160401b0381111561241e57600080fd5b61242a85828601612139565b95602094909401359450505050565b80358015158114611e1557600080fd5b6000806040838503121561245c57600080fd5b612465836121c3565b91506122c460208401612439565b6000806000806000806060878903121561248c57600080fd5b86356001600160401b03808211156124a357600080fd5b6124af8a838b016121f5565b909850965060208901359150808211156124c857600080fd5b6124d48a838b016121f5565b909650945060408901359150808211156124ed57600080fd5b506124fa89828a016121f5565b979a9699509497509295939492505050565b60008060008060008060006080888a03121561252757600080fd5b87356001600160401b038082111561253e57600080fd5b61254a8b838c016121f5565b909950975060208a0135965060408a013591508082111561256a57600080fd5b6125768b838c016121f5565b909650945060608a013591508082111561258f57600080fd5b5061259c8a828b016121f5565b989b979a50959850939692959293505050565b6000806000606084860312156125c457600080fd5b6125cd846121c3565b92506125db602085016121c3565b91506125e960408501612439565b90509250925092565b6000806000806040858703121561260857600080fd5b84356001600160401b038082111561261f57600080fd5b61262b888389016121f5565b9096509450602087013591508082111561264457600080fd5b50612651878288016121f5565b95989497509550505050565b60008060008060006060868803121561267557600080fd5b61267e866121c3565b945060208601356001600160401b038082111561269a57600080fd5b6126a689838a016121f5565b909650945060408801359150808211156126bf57600080fd5b506126cc888289016121f5565b969995985093965092949392505050565b6020808252600d908201526c1058d8d95cdcc819195b9a5959609a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008282101561272c5761272c612704565b500390565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061275b57607f821691505b60208210810361277b57634e487b7160e01b600052602260045260246000fd5b50919050565b60006001820161279357612793612704565b5060010190565b600082516127ac8184602087016122cd565b9190910192915050565b6000602082840312156127c857600080fd5b81516001600160401b038111156127de57600080fd5b8201601f810184136127ef57600080fd5b80516127fd61215882612112565b81815285602083850101111561281257600080fd5b6128238260208301602086016122cd565b95945050505050565b60006020828403121561283e57600080fd5b5051919050565b6001600160601b03198660601b1681528385601483013760008482016014810160008152848682375060009301601401928352509095945050505050565b60208082526015908201527414da59db995c881b9bdd081c9958dbd9db9a5e9959605a1b604082015260600190565b8183823760009101908152919050565b6001600160601b03198760601b168152848660148301376000858201856014820152838560348301376000930160340192835250909695505050505050565b60006001600160601b0319808760601b168352808660601b166014840152508284602884013750600091016028019081529392505050565b601f8211156107a257600081815260208120601f850160051c810160208610156129605750805b601f850160051c820191505b8181101561297f5782815560010161296c565b505050505050565b81516001600160401b038111156129a0576129a06120cc565b6129b4816129ae8454612747565b84612939565b602080601f8311600181146129e957600084156129d15750858301515b600019600386901b1c1916600185901b17855561297f565b600085815260208120601f198616915b82811015612a18578886015182559484019460019091019084016129f9565b5085821015612a365787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000612a5960608301866122f9565b6020830194909452506001600160a01b0391909116604090910152919050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000815260008351612ab181601a8501602088016122cd565b835190830190612ac881601a8401602088016122cd565b01601a01949350505050565b60608152836060820152838560808301376000608085830181019190915260208201939093526001600160a01b03919091166040820152601f909201601f191690910101919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612b558160178501602088016122cd565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612b868160288401602088016122cd565b01602801949350505050565b602081526000610f5c60208301846122f9565b634e487b7160e01b600052601260045260246000fd5b600082612bca57612bca612ba5565b500490565b600082612bde57612bde612ba5565b500690565b60008219821115612bf657612bf6612704565b500190565b634e487b7160e01b600052602160045260246000fd5b6000816000190483118215151615612c2b57612c2b612704565b500290565b600081612c3f57612c3f612704565b50600019019056fee2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212202234e1dc6c6c1ceb9e66a85683096d6c34303af2490935827c3130693959a9c964736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ADMIN_ROLE()": {
        "notice": "Contract administrator role"
      },
      "CODE_VERSION()": {
        "notice": "Contract code version"
      },
      "OPERATOR_ROLE(address)": {
        "notice": "Get the operator role for specified instance"
      },
      "SIGNER_ROLE()": {
        "notice": "Transaction signer role"
      },
      "call(address,bytes)": {
        "notice": "Proxy a call to a deployed contract instance"
      },
      "call(address,bytes,bytes)": {
        "notice": "Proxy a call to a deployed contract instance with additional signatue verification"
      },
      "callFee()": {
        "notice": "Call fee"
      },
      "deploy(string,bytes)": {
        "notice": "Deploy a new contract instance"
      },
      "deploy(string,bytes,bytes)": {
        "notice": "Deploy a new contract instance with additional signatue verification"
      },
      "deploy(string,uint256,bytes,bytes)": {
        "notice": "Deploy a specific version of a template"
      },
      "deploymentFee()": {
        "notice": "Deployment fee"
      },
      "implementation(string,uint256)": {
        "notice": "Get the implementation address of a specific version of a template"
      },
      "isOperator(address,address)": {
        "notice": "Check if an address is allowed to operate a deployed contract"
      },
      "latestImplementation(string)": {
        "notice": "Latest template implementations"
      },
      "registerTemplate(address)": {
        "notice": "Add a new implementation"
      },
      "setCallFee(uint256)": {
        "notice": "Update proxied call fee"
      },
      "setDeploymentFee(uint256)": {
        "notice": "Update deployment fee"
      },
      "setOperator(address,address,bool)": {
        "notice": "Manage permissions for an address to operate a deployed contract"
      },
      "setWhitelisted(address,bool)": {
        "notice": "Update contract whitelist status"
      },
      "templates()": {
        "notice": "Get a list of all templates registered with the factory"
      },
      "versions(string)": {
        "notice": "Get a list of all registered versions of a template"
      },
      "whitelisted(address)": {
        "notice": "Contracts that are whitelisted for proxy calls"
      },
      "withdrawFees(address)": {
        "notice": "Withdraw all fees from the contract to an address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 419,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 422,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2045,
        "contract": "contracts/Factory.sol:Factory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2315,
        "contract": "contracts/Factory.sol:Factory",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/Factory.sol:Factory",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4852,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_templateNames",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 4857,
        "contract": "contracts/Factory.sol:Factory",
        "label": "latestImplementation",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 4862,
        "contract": "contracts/Factory.sol:Factory",
        "label": "whitelisted",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4865,
        "contract": "contracts/Factory.sol:Factory",
        "label": "deploymentFee",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 4868,
        "contract": "contracts/Factory.sol:Factory",
        "label": "callFee",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 4870,
        "contract": "contracts/Factory.sol:Factory",
        "label": "version",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 4874,
        "contract": "contracts/Factory.sol:Factory",
        "label": "latestVersion",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 4879,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_templateVersions",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4885,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_templateImplementations",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/Factory.sol:Factory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/Factory.sol:Factory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}