{
  "address": "0xbbF11ea28CbE1Fd769874B4Fd391485fA2eac113",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "PermanentURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PermanentURIGlobal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROYALTIES_BASIS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_CONTRACT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_TOKEN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "freezeTokenUris",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "tokensBurnable",
              "type": "bool"
            }
          ],
          "internalType": "struct Config.Deployment",
          "name": "deploymentConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "metadataUpdatable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "tokensTransferable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Config.Runtime",
          "name": "runtimeConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address[]",
              "name": "addresses",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "frozen",
              "type": "bool"
            }
          ],
          "internalType": "struct GranularRoles.RolesAddresses[]",
          "name": "rolesAddresses",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataUpdatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mintToCaller",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeNFTPortPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensBurnable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensTransferable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "metadataUpdatable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "tokensTransferable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Config.Runtime",
          "name": "newConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address[]",
              "name": "addresses",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "frozen",
              "type": "bool"
            }
          ],
          "internalType": "struct GranularRoles.RolesAddresses[]",
          "name": "rolesAddresses",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "isRevokeNFTPortPermissions",
          "type": "bool"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenUri",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isFreezeTokenUri",
          "type": "bool"
        }
      ],
      "name": "updateTokenUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a1ceb335357928eef6196c213b6f26b3fbb7da0c084684ba2d72dd990c96ec0",
  "receipt": {
    "to": null,
    "from": "0xE7D7696C8f11278124f39fB7cDd39fD9442D5026",
    "contractAddress": "0xbbF11ea28CbE1Fd769874B4Fd391485fA2eac113",
    "transactionIndex": 154,
    "gasUsed": "3475186",
    "logsBloom": "0x
    "blockHash": "0x78ba239e7de20ee6f8f3170d552a5442025d5f155b10d9cf39158a6678c67169",
    "transactionHash": "0x9a1ceb335357928eef6196c213b6f26b3fbb7da0c084684ba2d72dd990c96ec0",
    "logs": [
      {
        "transactionIndex": 154,
        "blockNumber": 16083350,
        "transactionHash": "0x9a1ceb335357928eef6196c213b6f26b3fbb7da0c084684ba2d72dd990c96ec0",
        "address": "0xbbF11ea28CbE1Fd769874B4Fd391485fA2eac113",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 298,
        "blockHash": "0x78ba239e7de20ee6f8f3170d552a5442025d5f155b10d9cf39158a6678c67169"
      }
    ],
    "blockNumber": 16083350,
    "cumulativeGasUsed": "16110026",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "1e300b8e19558e2a4c02af65df638f3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PermanentURIGlobal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROYALTIES_BASIS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_CONTRACT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_TOKEN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezeTokenUris\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"tokensBurnable\",\"type\":\"bool\"}],\"internalType\":\"struct Config.Deployment\",\"name\":\"deploymentConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tokensTransferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct Config.Runtime\",\"name\":\"runtimeConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"internalType\":\"struct GranularRoles.RolesAddresses[]\",\"name\":\"rolesAddresses\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataUpdatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintToCaller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeNFTPortPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensBurnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tokensTransferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct Config.Runtime\",\"name\":\"newConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"internalType\":\"struct GranularRoles.RolesAddresses[]\",\"name\":\"rolesAddresses\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isRevokeNFTPortPermissions\",\"type\":\"bool\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenUri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isFreezeTokenUri\",\"type\":\"bool\"}],\"name\":\"updateTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"contractURI()\":{\"details\":\"OpenSea contract metadata, returns a base64 encoded JSON string containing royalties basis points and royalties address\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/templates/ERC721NFTProduct.sol\":\"ERC721NFTProduct\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbd5c6f8268a1d477f6a746ebedaf7fbcf412186f0c1c54ee104547cfb5e18edd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/lib/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant _TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = _TABLE;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n                // solhint-disable-previous-line no-empty-blocks\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n                )\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0x48822add7a355a6d6c04679ecba55383d0490eedd1c02915871c36f9e1683185\",\"license\":\"MIT\"},\"contracts/lib/Config.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Config {\\n    /// Fixed at deployment time\\n    struct Deployment {\\n        // Name of the NFT contract.\\n        string name;\\n        // Symbol of the NFT contract.\\n        string symbol;\\n        // The contract owner address. If you wish to own the contract, then set it as your wallet address.\\n        // This is also the wallet that can manage the contract on NFT marketplaces.\\n        address owner;\\n        // If true, tokens may be burned by owner. Cannot be changed later.\\n        bool tokensBurnable;\\n    }\\n\\n    /// Updatable by admins and owner\\n    struct Runtime {\\n        // Metadata base URI for tokens, NFTs minted in this contract will have metadata URI of `baseURI` + `tokenID`.\\n        // Set this to reveal token metadata.\\n        string baseURI;\\n        // If true, the base URI of the NFTs minted in the specified contract can be updated after minting (token URIs\\n        // are not frozen on the contract level). This is useful for revealing NFTs after the drop. If false, all the\\n        // NFTs minted in this contract are frozen by default which means token URIs are non-updatable.\\n        bool metadataUpdatable;\\n        // If true, tokens may be transferred by owner. Default is true. Can be only changed to false.\\n        bool tokensTransferable;\\n        // Secondary market royalties in basis points (100 bps = 1%)\\n        uint256 royaltiesBps;\\n        // Address for royalties\\n        address royaltiesAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x5d34e33120817203948d5ac07093553a3546ed02e6289345017fc06d057ea9be\",\"license\":\"MIT\"},\"contracts/lib/GranularRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/*\\n * Custom roles handling abstract contract.\\n * Used for fine-grained access controls to contracts.\\n * Supported roles are:\\n * - `ADMIN_ROLE`, is granted to the initializer and one other account specified during intialization\\n * - `MINT_ROLE`, is used for minting tokens\\n * - `UPDATE_CONTRACT_ROLE`, is used for updating the contract\\n * - `BURN_ROLE`, is used for burning tokens\\n * - `TRANSFER_ROLE`, is used for transferring tokens\\n * `ADMIN_ROLE` has all the access rights for all the roles.\\n *\\n * Each role besides the `ADMIN_ROLE` can have any amount of addresses and can be made immutable.\\n */\\nabstract contract GranularRoles is AccessControlUpgradeable {\\n    // Roles list\\n    // Admin role can have 2 addresses:\\n    // one address same as (_owner) which can be changed\\n    // one for NFTPort API access which can only be revoked\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    // Following roles can have multiple addresses, can be changed by admin or update contract role\\n    bytes32 public constant MINT_ROLE = keccak256(\\\"MINT_ROLE\\\");\\n    bytes32 public constant UPDATE_CONTRACT_ROLE =\\n        keccak256(\\\"UPDATE_CONTRACT_ROLE\\\");\\n    bytes32 public constant UPDATE_TOKEN_ROLE = keccak256(\\\"UPDATE_TOKEN_ROLE\\\");\\n    bytes32 public constant BURN_ROLE = keccak256(\\\"BURN_ROLE\\\");\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n\\n    /*\\n     * Used for intializing and updating roles\\n     * Each role can have any number of addresses attached to it and can be frozen separately,\\n     * meaning any further updates to it are disabled.\\n     * Cannot be used to update or initialize `ADMIN_ROLE`.\\n     */\\n    struct RolesAddresses {\\n        bytes32 role;\\n        address[] addresses;\\n        bool frozen;\\n    }\\n\\n    // Contract owner address, this address can edit the contract on OpenSea and has `ADMIN_ROLE`\\n    address internal _owner;\\n    // Initialized as the address that initializes the contract.\\n    address internal _nftPort;\\n\\n    // Used to get roles enumeration\\n    mapping(bytes32 => address[]) internal _rolesAddressesIndexed;\\n    // Mapping from role to boolean that shows if role can be updated\\n    mapping(bytes32 => bool) internal _rolesFrozen;\\n\\n    // Event emitted when `transferOwnership` called by current owner.\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /*\\n     * Contract owner address\\n     * @dev Required for easy integration with OpenSea, the owner address can edit the collection there\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    // Transfer contract ownership, only callable by the current owner\\n    function transferOwnership(address newOwner) public {\\n        require(newOwner != _owner, \\\"GranularRoles: already the owner\\\");\\n        require(msg.sender == _owner, \\\"GranularRoles: not the owner\\\");\\n        _revokeRole(ADMIN_ROLE, _owner);\\n        address previousOwner = _owner;\\n        _owner = newOwner;\\n        _grantRole(ADMIN_ROLE, _owner);\\n        emit OwnershipTransferred(previousOwner, newOwner);\\n    }\\n\\n    // Removes `ADMIN_ROLE` from the account that initialized the contract\\n    function revokeNFTPortPermissions() public onlyRole(ADMIN_ROLE) {\\n        _revokeRole(ADMIN_ROLE, _nftPort);\\n        _nftPort = address(0);\\n    }\\n\\n    // Admin role has all access granted by default\\n    function hasRole(bytes32 role, address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        // Contract owner has all access rights\\n        if (account == _owner) return true;\\n        // Anyone else cannot have DEFAULT_ADMIN_ROLE\\n        if (role == DEFAULT_ADMIN_ROLE) return false;\\n        // ADMIN_ROLE inherits any other roles\\n        return\\n            super.hasRole(ADMIN_ROLE, account) || super.hasRole(role, account);\\n    }\\n\\n    /**\\n     * Initialize roles, should only be called once, for updating `_updateRoles` is used.\\n     * Can only be used to set the `_owner` and `_nftport` addresses,\\n     * or any amount of accounts for any supported role.\\n     */\\n    function _initRoles(address owner_, RolesAddresses[] memory rolesAddresses)\\n        internal\\n    {\\n        require(owner_ != address(0), \\\"Contract must have an owner\\\");\\n        _owner = owner_;\\n        _nftPort = msg.sender;\\n        _grantRole(ADMIN_ROLE, _owner);\\n        _grantRole(ADMIN_ROLE, _nftPort);\\n\\n        // Loop through all roles from the input\\n        for (\\n            uint256 roleIndex = 0;\\n            roleIndex < rolesAddresses.length;\\n            roleIndex++\\n        ) {\\n            bytes32 role = rolesAddresses[roleIndex].role;\\n            // Check if the role is supported and is not `ADMIN_ROLE`\\n            require(\\n                _regularRoleValid(role),\\n                string(\\n                    abi.encodePacked(\\n                        \\\"GranularRoles: invalid role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n            // Loop through all the addresses for the role being processed\\n            // Grant the given role to all the specified addresses\\n            // and add them to the roles enumaration `_rolesAddressesIndexed`\\n            for (\\n                uint256 addressIndex = 0;\\n                addressIndex < rolesAddresses[roleIndex].addresses.length;\\n                addressIndex++\\n            ) {\\n                _grantRole(\\n                    role,\\n                    rolesAddresses[roleIndex].addresses[addressIndex]\\n                );\\n                _rolesAddressesIndexed[role].push(\\n                    rolesAddresses[roleIndex].addresses[addressIndex]\\n                );\\n            }\\n            // If the given role is frozen then further updates to it are disabled\\n            if (rolesAddresses[roleIndex].frozen) {\\n                _rolesFrozen[role] = true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Used for updating and/or freezing roles.\\n     * Only callable by accounts with the `ADMIN_ROLE`\\n     * and cannot be used to update `ADMIN_ROLE`\\n     */\\n    function _updateRoles(RolesAddresses[] memory rolesAddresses) internal {\\n        if (rolesAddresses.length > 0) {\\n            require(\\n                hasRole(ADMIN_ROLE, msg.sender),\\n                \\\"GranularRoles: not an admin\\\"\\n            );\\n\\n            // Loop through all roles from the input\\n            for (\\n                uint256 roleIndex = 0;\\n                roleIndex < rolesAddresses.length;\\n                roleIndex++\\n            ) {\\n                bytes32 role = rolesAddresses[roleIndex].role;\\n                // Check if the role is supported and is not `ADMIN_ROLE`\\n                require(\\n                    _regularRoleValid(role),\\n                    string(\\n                        abi.encodePacked(\\n                            \\\"GranularRoles: invalid role \\\",\\n                            StringsUpgradeable.toHexString(uint256(role), 32)\\n                        )\\n                    )\\n                );\\n                // If given role is frozen then it cannot be updated\\n                require(\\n                    !_rolesFrozen[role],\\n                    string(\\n                        abi.encodePacked(\\n                            \\\"GranularRoles: role \\\",\\n                            StringsUpgradeable.toHexString(uint256(role), 32),\\n                            \\\" is frozen\\\"\\n                        )\\n                    )\\n                );\\n                // Loop through all the addresses for the given role\\n                // Remove all accounts from the role being processed to add new ones from the input\\n                for (\\n                    uint256 addressIndex = 0;\\n                    addressIndex < _rolesAddressesIndexed[role].length;\\n                    addressIndex++\\n                ) {\\n                    _revokeRole(\\n                        role,\\n                        _rolesAddressesIndexed[role][addressIndex]\\n                    );\\n                }\\n                delete _rolesAddressesIndexed[role];\\n                // Loop through all the addresses for the given role from the input.\\n                // Grant roles to given addresses for the role being processed\\n                // and add the accounts to the role enumeration.\\n                for (\\n                    uint256 addressIndex = 0;\\n                    addressIndex < rolesAddresses[roleIndex].addresses.length;\\n                    addressIndex++\\n                ) {\\n                    _grantRole(\\n                        role,\\n                        rolesAddresses[roleIndex].addresses[addressIndex]\\n                    );\\n                    _rolesAddressesIndexed[role].push(\\n                        rolesAddresses[roleIndex].addresses[addressIndex]\\n                    );\\n                }\\n                if (rolesAddresses[roleIndex].frozen) {\\n                    _rolesFrozen[role] = true;\\n                }\\n            }\\n        }\\n    }\\n\\n    // Checks if role is valid, does not contain the `ADMIN_ROLE`\\n    function _regularRoleValid(bytes32 role) internal pure returns (bool) {\\n        return\\n            role == MINT_ROLE ||\\n            role == UPDATE_CONTRACT_ROLE ||\\n            role == UPDATE_TOKEN_ROLE ||\\n            role == BURN_ROLE ||\\n            role == TRANSFER_ROLE;\\n    }\\n}\\n\",\"keccak256\":\"0x353e8fd619cc2dd340a8923d9fc763abbd410b4f47bd3da1e5611ac97a05e96b\",\"license\":\"MIT\"},\"contracts/lib/ITemplate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n * Template interface, used by factory contracts to get the name and version of a contract,\\n * that extends this interface.\\n */\\ninterface ITemplate {\\n    function NAME() external view returns (string memory);\\n\\n    function VERSION() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbf583f0046bf96a84fc2bc5cef21d433c838a7f701f7c93229d9faf026014e20\",\"license\":\"MIT\"},\"contracts/templates/ERC721NFTProduct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../lib/Base64.sol\\\";\\nimport \\\"../lib/GranularRoles.sol\\\";\\nimport \\\"../lib/Config.sol\\\";\\nimport \\\"../lib/ITemplate.sol\\\";\\n\\n/*\\n * ERC-721 proxy contract, meaning it does not make use of a constructor but rather uses `initialize` with `initializer`\\n * modifier, see {Initializable}\\n *\\n * Minting and other write transactions only supported for accounts with relevant access rights.\\n */\\ncontract ERC721NFTProduct is\\n    ERC721URIStorageUpgradeable,\\n    GranularRoles,\\n    ITemplate,\\n    ReentrancyGuardUpgradeable\\n{\\n    /*******************************\\n     * Extensions, structs, events *\\n     *******************************/\\n\\n    using StringsUpgradeable for uint256;\\n\\n    /*\\n     * Event emitted to show opensea that metadata of a token is frozen,\\n     * see https://docs.opensea.io/docs/metadata-standards\\n     */\\n    event PermanentURI(string _value, uint256 indexed _id);\\n    // Event emitted to show that all tokens have their metadata frozen\\n    event PermanentURIGlobal();\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    // Template name\\n    string public constant NAME = \\\"ERC721NFTProduct\\\";\\n    // Template version\\n    uint256 public constant VERSION = 1_01_00;\\n    // Basis for calculating royalties.\\n    // This has to be 10k for royaltiesBps to be in basis points.\\n    uint16 public constant ROYALTIES_BASIS = 10000;\\n\\n    /********************\\n     * Public variables *\\n     ********************/\\n\\n    // If true then tokens metadata can be updated\\n    bool public metadataUpdatable;\\n    // If true then tokens can be burned by their owners\\n    bool public tokensBurnable;\\n    // If true then tokens can be transferred by having the correct access rights {GranularRoles-TRANSFER_ROLE}\\n    // if the token is owned by {GranularRoles-_owner} address\\n    bool public tokensTransferable;\\n\\n    // Mapping of individually frozen tokens\\n    mapping(uint256 => bool) public freezeTokenUris;\\n\\n    // Base URI of the tokens, token URIs are calculated as baseURI + tokenURI\\n    string public baseURI;\\n\\n    // Address where royalties will be transferred to\\n    address public royaltiesAddress;\\n    // Secondary market royalties in basis points (100 bps = 1%). Royalties use ERC2981 standard and support\\n    // OpenSea standard.\\n    uint256 public royaltiesBasisPoints;\\n\\n    // Counter for the total number of tokens minted in this contract\\n    uint256 public totalSupply;\\n\\n    /***************************\\n     * Contract initialization *\\n     ***************************/\\n\\n    constructor() initializer {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    // Can only be called once, used because constructors cannot be used for proxy contracts\\n    function initialize(\\n        Config.Deployment memory deploymentConfig,\\n        Config.Runtime memory runtimeConfig,\\n        RolesAddresses[] memory rolesAddresses\\n    ) public initializer {\\n        // @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n        __ERC721_init(deploymentConfig.name, deploymentConfig.symbol);\\n        __ReentrancyGuard_init();\\n\\n        _setRoyalties(\\n            runtimeConfig.royaltiesAddress,\\n            runtimeConfig.royaltiesBps\\n        );\\n\\n        metadataUpdatable = runtimeConfig.metadataUpdatable;\\n        tokensBurnable = deploymentConfig.tokensBurnable;\\n        tokensTransferable = runtimeConfig.tokensTransferable;\\n\\n        baseURI = runtimeConfig.baseURI;\\n\\n        _initRoles(deploymentConfig.owner, rolesAddresses);\\n    }\\n\\n    /*******************\\n     * Write functions *\\n     *******************/\\n\\n    // Mint a token to input `caller` address\\n    function mintToCaller(\\n        address caller,\\n        uint256 tokenId,\\n        string memory tokenURI\\n    ) public onlyRole(MINT_ROLE) nonReentrant returns (uint256) {\\n        _safeMint(caller, tokenId);\\n        totalSupply += 1;\\n\\n        _setTokenURI(tokenId, tokenURI);\\n\\n        return tokenId;\\n    }\\n\\n    /*\\n     * Function to update token URIs for individual tokens,\\n     * can be used to update and optionally freeze token URIs\\n     *\\n     * only callable if `metadataUpdatable` is true, the medatadata\\n     * for the token has not been frozen previously and the caller has `UPDATE_TOKEN_ROLE` (or `ADMIN_ROLE`) role\\n     */\\n    function updateTokenUri(\\n        uint256 _tokenId,\\n        string memory _tokenUri,\\n        bool _isFreezeTokenUri\\n    ) public onlyRole(UPDATE_TOKEN_ROLE) {\\n        require(_exists(_tokenId), \\\"Token: Token does not exist\\\");\\n        require(metadataUpdatable, \\\"Token: Metadata is frozen\\\");\\n        require(freezeTokenUris[_tokenId] != true, \\\"Token: Token is frozen\\\");\\n        require(\\n            _isFreezeTokenUri || (bytes(_tokenUri).length != 0),\\n            \\\"Token: Token URI is missing\\\"\\n        );\\n\\n        if (bytes(_tokenUri).length != 0) {\\n            _setTokenURI(_tokenId, _tokenUri);\\n        }\\n\\n        if (_isFreezeTokenUri) {\\n            freezeTokenUris[_tokenId] = true;\\n            emit PermanentURI(tokenURI(_tokenId), _tokenId);\\n        }\\n    }\\n\\n    /*\\n     * Function to transfer tokens owned by the `_owner` address.\\n     *\\n     * only callable if `tokensTransferable` is true, the token to be transferred\\n     * is owned by `_owner` and the caller has `TRANSFER_ROLE` (or `ADMIN_ROLE`) role\\n     */\\n    function transferByOwner(address _to, uint256 _tokenId)\\n        public\\n        onlyRole(TRANSFER_ROLE)\\n    {\\n        require(tokensTransferable, \\\"Transfer: Transfers are disabled\\\");\\n        _safeTransfer(_owner, _to, _tokenId, \\\"\\\");\\n    }\\n\\n    /*\\n     * Function to burn tokens owned by the `_owner` address.\\n     *\\n     * only callable if `tokensBurnable` is true, the token to be burned\\n     * is owned by `_owner` and the caller has `BURN_ROLE` (or `ADMIN_ROLE`) role\\n     */\\n    function burn(uint256 _tokenId) public onlyRole(BURN_ROLE) {\\n        require(tokensBurnable, \\\"Burn: Burns are disabled\\\");\\n        require(_exists(_tokenId), \\\"Burn: Token does not exist\\\");\\n        require(\\n            ERC721Upgradeable.ownerOf(_tokenId) == _owner,\\n            \\\"Burn: not held by contract owner\\\"\\n        );\\n\\n        _burn(_tokenId);\\n        totalSupply -= 1;\\n    }\\n\\n    /*\\n     * Function to update the collection configuration.\\n     *\\n     * Only callable if `metadataUpdatable` is true, or `baseURI` is not updated.\\n     * The ability to transfer tokens or update metadata can only be turned OFF with this, not vice-versa.\\n     *\\n     * This can also be used to revoke NFTPort access to the contract,\\n     * meaning access rights for NFTPort account will be removed.\\n     */\\n    function update(\\n        Config.Runtime calldata newConfig,\\n        RolesAddresses[] memory rolesAddresses,\\n        bool isRevokeNFTPortPermissions\\n    ) public onlyRole(UPDATE_CONTRACT_ROLE) {\\n        // If metadata is frozen, baseURI cannot be updated\\n        require(\\n            metadataUpdatable ||\\n                (keccak256(abi.encodePacked(newConfig.baseURI)) ==\\n                    keccak256(abi.encodePacked(baseURI))),\\n            \\\"Update: Metadata is frozen\\\"\\n        );\\n\\n        baseURI = newConfig.baseURI;\\n        _setRoyalties(newConfig.royaltiesAddress, newConfig.royaltiesBps);\\n\\n        if (!newConfig.tokensTransferable) {\\n            tokensTransferable = false;\\n        }\\n        if (!newConfig.metadataUpdatable && metadataUpdatable) {\\n            metadataUpdatable = false;\\n            emit PermanentURIGlobal();\\n        }\\n\\n        _updateRoles(rolesAddresses);\\n\\n        if (isRevokeNFTPortPermissions) {\\n            revokeNFTPortPermissions();\\n        }\\n    }\\n\\n    /******************\\n     * View functions *\\n     ******************/\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            ERC721Upgradeable.supportsInterface(interfaceId) ||\\n            interfaceId == type(IERC2981).interfaceId;\\n    }\\n\\n    // @dev ERC2981 token royalty info\\n    function royaltyInfo(uint256, uint256 salePrice)\\n        external\\n        view\\n        returns (address, uint256)\\n    {\\n        return (\\n            royaltiesAddress,\\n            (royaltiesBasisPoints * salePrice) / ROYALTIES_BASIS\\n        );\\n    }\\n\\n    /**\\n     * @dev OpenSea contract metadata, returns a base64 encoded JSON string containing royalties basis points\\n     * and royalties address\\n     */\\n    function contractURI() external view returns (string memory) {\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"seller_fee_basis_points\\\": ', // solhint-disable-line quotes\\n                        royaltiesBasisPoints.toString(),\\n                        ', \\\"fee_recipient\\\": \\\"', // solhint-disable-line quotes\\n                        uint256(uint160(royaltiesAddress)).toHexString(20),\\n                        '\\\"}' // solhint-disable-line quotes\\n                    )\\n                )\\n            )\\n        );\\n\\n        string memory output = string(\\n            abi.encodePacked(\\\"data:application/json;base64,\\\", json)\\n        );\\n\\n        return output;\\n    }\\n\\n    /*************\\n     * Internals *\\n     *************/\\n\\n    function _baseURI()\\n        internal\\n        view\\n        virtual\\n        override(ERC721Upgradeable)\\n        returns (string memory)\\n    {\\n        return baseURI;\\n    }\\n\\n    function _setRoyalties(address newAddress, uint newBps) internal {\\n        require(newBps <= ROYALTIES_BASIS, \\\"Cannot set royalties to over 100%\\\");\\n\\n        royaltiesAddress = newAddress;\\n        royaltiesBasisPoints = newBps;\\n    }\\n}\\n\",\"keccak256\":\"0xe8368b61c54117522cf860cb237a26192d54fd61216bae3ab3a8473c59dbc360\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff1615808015620000335750600054600160ff909116105b8062000063575062000050306200013d60201b620018061760201c565b15801562000063575060005460ff166001145b620000cb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000ef576000805461ff0019166101001790555b801562000136576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b506200014c565b6001600160a01b03163b151590565b613d62806200015c6000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c80637afdcdbb11610167578063b88d4fde116100ce578063e8a3d48511610087578063e8a3d48514610663578063e985e9c51461066b578063e9a9c850146106a7578063f153c2e5146106ce578063f2fde38b146106d6578063ffa1ad74146106e957600080fd5b8063b88d4fde146105dc578063b930908f146105ef578063c87b56dd14610616578063d547741f14610629578063de374d9d1461063c578063e3d520721461065057600080fd5b8063a217fddf11610120578063a217fddf1461054e578063a22cb46514610556578063a2f551ec14610569578063a3f4df7e1461057c578063a53a84b6146105ab578063b29c097a146105b557600080fd5b80637afdcdbb146104cf5780638d010db3146104e25780638da5cb5b1461050657806391d148541461051757806395d89b411461052a5780639da5b0a51461053257600080fd5b80632c23b9651161020b57806342966c68116101c457806342966c681461046b5780634e6f9dd61461047e5780636352211e1461048c5780636c0360eb1461049f57806370a08231146104a757806375b238fc146104ba57600080fd5b80632c23b965146103e45780632e628b611461040b5780632f2ff15d1461041e578063328825351461043157806336568abe1461044557806342842e0e1461045857600080fd5b8063206b60f91161025d578063206b60f91461032f57806321e92d491461035657806323b872dd14610369578063248a9ca31461037c57806325d22c8e1461039f5780632a55205a146103b257600080fd5b806301ffc9a71461029a57806306fdde03146102c2578063081812fc146102d7578063095ea7b31461030257806318160ddd14610317575b600080fd5b6102ad6102a8366004612e37565b6106f2565b60405190151581526020015b60405180910390f35b6102ca61071e565b6040516102b99190612eac565b6102ea6102e5366004612ebf565b6107b0565b6040516001600160a01b0390911681526020016102b9565b610315610310366004612ef4565b6107d7565b005b6103216101365481565b6040519081526020016102b9565b6103217f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c81565b610315610364366004612ef4565b6108f1565b610315610377366004612f1e565b61099d565b61032161038a366004612ebf565b600090815260c9602052604090206001015490565b6103156103ad366004613274565b6109ce565b6103c56103c036600461336f565b610b70565b604080516001600160a01b0390931683526020830191909152016102b9565b6103217f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f581565b610315610419366004613391565b610bae565b61031561042c36600461340c565b610d59565b610134546102ea906001600160a01b031681565b61031561045336600461340c565b610d7e565b610315610466366004612f1e565b610dfc565b610315610479366004612ebf565b610e17565b610131546102ad9060ff1681565b6102ea61049a366004612ebf565b610f8e565b6102ca610fee565b6103216104b5366004613438565b61107d565b610321600080516020613d0d83398151915281565b6103216104dd366004613453565b611103565b6102ad6104f0366004612ebf565b6101326020526000908152604090205460ff1681565b60fb546001600160a01b03166102ea565b6102ad61052536600461340c565b6111c1565b6102ca61125e565b61053b61271081565b60405161ffff90911681526020016102b9565b610321600081565b61031561056436600461349f565b61126d565b6103156105773660046134c9565b611278565b6102ca6040518060400160405280601081526020016f115490cdcc8c539195141c9bd91d58dd60821b81525081565b6103216101355481565b6103217f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e681565b6103156105ea366004613507565b611485565b6103217fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2281565b6102ca610624366004612ebf565b6114b7565b61031561063736600461340c565b6115ba565b610131546102ad9062010000900460ff1681565b610131546102ad90610100900460ff1681565b6102ca6115df565b6102ad610679366004613582565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6103217f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c368681565b61031561165b565b6103156106e4366004613438565b6116ab565b61032161277481565b60006106fd82611815565b8061071857506001600160e01b0319821663152a902d60e11b145b92915050565b60606065805461072d906135ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610759906135ac565b80156107a65780601f1061077b576101008083540402835291602001916107a6565b820191906000526020600020905b81548152906001019060200180831161078957829003601f168201915b5050505050905090565b60006107bb82611865565b506000908152606960205260409020546001600160a01b031690565b60006107e282610f8e565b9050806001600160a01b0316836001600160a01b0316036108545760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061087057506108708133610679565b6108e25760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161084b565b6108ec83836118c7565b505050565b7f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c61091b81611935565b6101315462010000900460ff166109745760405162461bcd60e51b815260206004820181905260248201527f5472616e736665723a205472616e7366657273206172652064697361626c6564604482015260640161084b565b60fb546040805160208101909152600081526108ec916001600160a01b0316908590859061193f565b6109a73382611972565b6109c35760405162461bcd60e51b815260040161084b906135e6565b6108ec8383836119f0565b600054610100900460ff16158080156109ee5750600054600160ff909116105b80610a085750303b158015610a08575060005460ff166001145b610a6b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161084b565b6000805460ff191660011790558015610a8e576000805461ff0019166101001790555b610aa084600001518560200151611b8c565b610aa8611bbd565b610aba83608001518460600151611bee565b60208301516101318054606087015160408701511515620100000262ff0000199115156101000261ff00199515159590951661ffff19909316929092179390931792909216919091179055825161013390610b159082613682565b50610b24846040015183611c72565b8015610b6a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610134546101355460009182916001600160a01b039091169061271090610b98908690613757565b610ba2919061378c565b915091505b9250929050565b7f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f5610bd881611935565b6101315460ff1680610c435750610133604051602001610bf891906137a0565b60408051601f198184030181529190528051602090910120610c1a8580613816565b604051602001610c2b92919061385c565b60405160208183030381529060405280519060200120145b610c8f5760405162461bcd60e51b815260206004820152601a60248201527f5570646174653a204d657461646174612069732066726f7a656e000000000000604482015260640161084b565b610c998480613816565b61013391610ca891908361386c565b50610cc6610cbc60a0860160808701613438565b8560600135611bee565b610cd6606085016040860161392c565b610ce857610131805462ff0000191690555b610cf8604085016020860161392c565b158015610d0857506101315460ff165b15610d4257610131805460ff191690556040517fb59f45df38ec0d34114b1248c38a29cdbccbf3e745ae3ef310ac66199a4ceccf90600090a15b610d4b83611ef6565b8115610b6a57610b6a61165b565b600082815260c96020526040902060010154610d7481611935565b6108ec83836121e0565b6001600160a01b0381163314610dee5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161084b565b610df88282612266565b5050565b6108ec83838360405180602001604052806000815250611485565b7fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa22610e4181611935565b61013154610100900460ff16610e995760405162461bcd60e51b815260206004820152601860248201527f4275726e3a204275726e73206172652064697361626c65640000000000000000604482015260640161084b565b6000828152606760205260409020546001600160a01b0316610efd5760405162461bcd60e51b815260206004820152601a60248201527f4275726e3a20546f6b656e20646f6573206e6f74206578697374000000000000604482015260640161084b565b60fb546001600160a01b0316610f1283610f8e565b6001600160a01b031614610f685760405162461bcd60e51b815260206004820181905260248201527f4275726e3a206e6f742068656c6420627920636f6e7472616374206f776e6572604482015260640161084b565b610f71826122cd565b60016101366000828254610f859190613947565b90915550505050565b6000818152606760205260408120546001600160a01b0316806107185760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161084b565b6101338054610ffc906135ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611028906135ac565b80156110755780601f1061104a57610100808354040283529160200191611075565b820191906000526020600020905b81548152906001019060200180831161105857829003601f168201915b505050505081565b60006001600160a01b0382166110e75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161084b565b506001600160a01b031660009081526068602052604090205490565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c368661112f81611935565b600260ff54036111815760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161084b565b600260ff55611190858561230d565b600161013660008282546111a4919061395e565b909155506111b490508484612327565b5050600160ff5550919050565b60fb546000906001600160a01b03908116908316036111e257506001610718565b826111ef57506000610718565b6001600160a01b03821660009081527f56eafcfe4e056e5ee1febf92b17728968883505f0e8dc799e4f43119d826ca85602052604090205460ff16806112575750600083815260c9602090815260408083206001600160a01b038616845290915290205460ff165b9392505050565b60606066805461072d906135ac565b610df83383836123ba565b7f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e66112a281611935565b6000848152606760205260409020546001600160a01b03166113065760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e3a20546f6b656e20646f6573206e6f742065786973740000000000604482015260640161084b565b6101315460ff166113595760405162461bcd60e51b815260206004820152601960248201527f546f6b656e3a204d657461646174612069732066726f7a656e00000000000000604482015260640161084b565b6000848152610132602052604090205460ff1615156001036113b65760405162461bcd60e51b81526020600482015260166024820152752a37b5b2b71d102a37b5b2b71034b990333937bd32b760511b604482015260640161084b565b81806113c25750825115155b61140e5760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e3a20546f6b656e20555249206973206d697373696e670000000000604482015260640161084b565b82511561141f5761141f8484612327565b8115610b6a57600084815261013260205260409020805460ff19166001179055837fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b5565720761146a826114b7565b6040516114779190612eac565b60405180910390a250505050565b61148f3383611972565b6114ab5760405162461bcd60e51b815260040161084b906135e6565b610b6a8484848461193f565b60606114c282611865565b600082815260976020526040812080546114db906135ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611507906135ac565b80156115545780601f1061152957610100808354040283529160200191611554565b820191906000526020600020905b81548152906001019060200180831161153757829003601f168201915b505050505090506000611565612488565b90508051600003611577575092915050565b8151156115a9578082604051602001611591929190613976565b60405160208183030381529060405292505050919050565b6115b284612498565b949350505050565b600082815260c960205260409020600101546115d581611935565b6108ec8383612266565b6060600061162f6115f2610135546124fe565b6101345461160a906001600160a01b031660146125fe565b60405160200161161b9291906139a5565b604051602081830303815290604052612799565b90506000816040516020016116449190613a2c565b60408051601f198184030181529190529392505050565b600080516020613d0d83398151915261167381611935565b60fc5461169890600080516020613d0d833981519152906001600160a01b0316612266565b5060fc80546001600160a01b0319169055565b60fb546001600160a01b03908116908216036117095760405162461bcd60e51b815260206004820181905260248201527f4772616e756c6172526f6c65733a20616c726561647920746865206f776e6572604482015260640161084b565b60fb546001600160a01b031633146117635760405162461bcd60e51b815260206004820152601c60248201527f4772616e756c6172526f6c65733a206e6f7420746865206f776e657200000000604482015260640161084b565b60fb5461178890600080516020613d0d833981519152906001600160a01b0316612266565b60fb80546001600160a01b038381166001600160a01b03198316811790935516906117c290600080516020613d0d833981519152906121e0565b816001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001600160a01b03163b151590565b60006001600160e01b031982166380ac58cd60e01b148061184657506001600160e01b03198216635b5e139f60e01b145b8061071857506301ffc9a760e01b6001600160e01b0319831614610718565b6000818152606760205260409020546001600160a01b03166118c45760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161084b565b50565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906118fc82610f8e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6118c48133612902565b61194a8484846119f0565b61195684848484612966565b610b6a5760405162461bcd60e51b815260040161084b90613a71565b60008061197e83610f8e565b9050806001600160a01b0316846001600160a01b031614806119c557506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b806115b25750836001600160a01b03166119de846107b0565b6001600160a01b031614949350505050565b826001600160a01b0316611a0382610f8e565b6001600160a01b031614611a675760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161084b565b6001600160a01b038216611ac95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161084b565b611ad46000826118c7565b6001600160a01b0383166000908152606860205260408120805460019290611afd908490613947565b90915550506001600160a01b0382166000908152606860205260408120805460019290611b2b90849061395e565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600054610100900460ff16611bb35760405162461bcd60e51b815260040161084b90613ac3565b610df88282612a67565b600054610100900460ff16611be45760405162461bcd60e51b815260040161084b90613ac3565b611bec612aa7565b565b612710811115611c4a5760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f742073657420726f79616c7469657320746f206f766572203130306044820152602560f81b606482015260840161084b565b61013480546001600160a01b0319166001600160a01b03939093169290921790915561013555565b6001600160a01b038216611cc85760405162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374206d757374206861766520616e206f776e65720000000000604482015260640161084b565b60fb80546001600160a01b0384166001600160a01b0319918216811790925560fc805490911633179055611d0b90600080516020613d0d833981519152906121e0565b60fc54611d3090600080516020613d0d833981519152906001600160a01b03166121e0565b60005b81518110156108ec576000828281518110611d5057611d50613b0e565b6020026020010151600001519050611d6781612ad5565b611d728260206125fe565b604051602001611d829190613b24565b60405160208183030381529060405290611daf5760405162461bcd60e51b815260040161084b9190612eac565b5060005b838381518110611dc557611dc5613b0e565b60200260200101516020015151811015611ea557611e1982858581518110611def57611def613b0e565b6020026020010151602001518381518110611e0c57611e0c613b0e565b60200260200101516121e0565b600082815260fd602052604090208451859085908110611e3b57611e3b613b0e565b6020026020010151602001518281518110611e5857611e58613b0e565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580611e9d81613b69565b915050611db3565b50828281518110611eb857611eb8613b0e565b60200260200101516040015115611ee357600081815260fe60205260409020805460ff191660011790555b5080611eee81613b69565b915050611d33565b8051156118c457611f15600080516020613d0d833981519152336111c1565b611f615760405162461bcd60e51b815260206004820152601b60248201527f4772616e756c6172526f6c65733a206e6f7420616e2061646d696e0000000000604482015260640161084b565b60005b8151811015610df8576000828281518110611f8157611f81613b0e565b6020026020010151600001519050611f9881612ad5565b611fa38260206125fe565b604051602001611fb39190613b24565b60405160208183030381529060405290611fe05760405162461bcd60e51b815260040161084b9190612eac565b50600081815260fe602090815260409091205460ff1615906120039083906125fe565b6040516020016120139190613b82565b604051602081830303815290604052906120405760405162461bcd60e51b815260040161084b9190612eac565b5060005b600082815260fd60205260409020548110156120ac57600082815260fd60205260409020805461209a9184918490811061208057612080613b0e565b6000918252602090912001546001600160a01b0316612266565b806120a481613b69565b915050612044565b50600081815260fd602052604081206120c491612db4565b60005b8383815181106120d9576120d9613b0e565b6020026020010151602001515181101561218f5761210382858581518110611def57611def613b0e565b600082815260fd60205260409020845185908590811061212557612125613b0e565b602002602001015160200151828151811061214257612142613b0e565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558061218781613b69565b9150506120c7565b508282815181106121a2576121a2613b0e565b602002602001015160400151156121cd57600081815260fe60205260409020805460ff191660011790555b50806121d881613b69565b915050611f64565b6121ea82826111c1565b610df857600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556122223390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61227082826111c1565b15610df857600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6122d681612ba4565b600081815260976020526040902080546122ef906135ac565b1590506118c45760008181526097602052604081206118c491612dd2565b610df8828260405180602001604052806000815250612c3f565b6000828152606760205260409020546001600160a01b03166123a25760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b606482015260840161084b565b60008281526097602052604090206108ec8282613682565b816001600160a01b0316836001600160a01b03160361241b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161084b565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6060610133805461072d906135ac565b60606124a382611865565b60006124ad612488565b905060008151116124cd5760405180602001604052806000815250611257565b806124d7846124fe565b6040516020016124e8929190613976565b6040516020818303038152906040529392505050565b6060816000036125255750506040805180820190915260018152600360fc1b602082015290565b8160005b811561254f578061253981613b69565b91506125489050600a8361378c565b9150612529565b6000816001600160401b0381111561256957612569612f5a565b6040519080825280601f01601f191660200182016040528015612593576020820181803683370190505b5090505b84156115b2576125a8600183613947565b91506125b5600a86613bd2565b6125c090603061395e565b60f81b8183815181106125d5576125d5613b0e565b60200101906001600160f81b031916908160001a9053506125f7600a8661378c565b9450612597565b6060600061260d836002613757565b61261890600261395e565b6001600160401b0381111561262f5761262f612f5a565b6040519080825280601f01601f191660200182016040528015612659576020820181803683370190505b509050600360fc1b8160008151811061267457612674613b0e565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126a3576126a3613b0e565b60200101906001600160f81b031916908160001a90535060006126c7846002613757565b6126d290600161395e565b90505b600181111561274a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061270657612706613b0e565b1a60f81b82828151811061271c5761271c613b0e565b60200101906001600160f81b031916908160001a90535060049490941c9361274381613be6565b90506126d5565b5083156112575760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161084b565b805160609060008190036127bd575050604080516020810190915260008152919050565b600060036127cc83600261395e565b6127d6919061378c565b6127e1906004613757565b905060006127f082602061395e565b6001600160401b0381111561280757612807612f5a565b6040519080825280601f01601f191660200182016040528015612831576020820181803683370190505b5090506000604051806060016040528060408152602001613ccd604091399050600181016020830160005b868110156128bd576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b83526004909201910161285c565b5060038606600181146128d757600281146128e8576128f4565b613d3d60f01b6001198301526128f4565b603d60f81b6000198301525b505050918152949350505050565b61290c82826111c1565b610df857612924816001600160a01b031660146125fe565b61292f8360206125fe565b604051602001612940929190613bfd565b60408051601f198184030181529082905262461bcd60e51b825261084b91600401612eac565b60006001600160a01b0384163b15612a5c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906129aa903390899088908890600401613c72565b6020604051808303816000875af19250505080156129e5575060408051601f3d908101601f191682019092526129e291810190613caf565b60015b612a42573d808015612a13576040519150601f19603f3d011682016040523d82523d6000602084013e612a18565b606091505b508051600003612a3a5760405162461bcd60e51b815260040161084b90613a71565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506115b2565b506001949350505050565b600054610100900460ff16612a8e5760405162461bcd60e51b815260040161084b90613ac3565b6065612a9a8382613682565b5060666108ec8282613682565b600054610100900460ff16612ace5760405162461bcd60e51b815260040161084b90613ac3565b600160ff55565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c3686821480612b2457507f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f582145b80612b4e57507f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e682145b80612b7857507fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2282145b806107185750507f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c1490565b6000612baf82610f8e565b9050612bbc6000836118c7565b6001600160a01b0381166000908152606860205260408120805460019290612be5908490613947565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b612c498383612c72565b612c566000848484612966565b6108ec5760405162461bcd60e51b815260040161084b90613a71565b6001600160a01b038216612cc85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161084b565b6000818152606760205260409020546001600160a01b031615612d2d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161084b565b6001600160a01b0382166000908152606860205260408120805460019290612d5690849061395e565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b50805460008255906000526020600020908101906118c49190612e08565b508054612dde906135ac565b6000825580601f10612dee575050565b601f0160209004906000526020600020908101906118c491905b5b80821115612e1d5760008155600101612e09565b5090565b6001600160e01b0319811681146118c457600080fd5b600060208284031215612e4957600080fd5b813561125781612e21565b60005b83811015612e6f578181015183820152602001612e57565b83811115610b6a5750506000910152565b60008151808452612e98816020860160208601612e54565b601f01601f19169290920160200192915050565b6020815260006112576020830184612e80565b600060208284031215612ed157600080fd5b5035919050565b80356001600160a01b0381168114612eef57600080fd5b919050565b60008060408385031215612f0757600080fd5b612f1083612ed8565b946020939093013593505050565b600080600060608486031215612f3357600080fd5b612f3c84612ed8565b9250612f4a60208501612ed8565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715612f9257612f92612f5a565b60405290565b604051608081016001600160401b0381118282101715612f9257612f92612f5a565b604051601f8201601f191681016001600160401b0381118282101715612fe257612fe2612f5a565b604052919050565b60006001600160401b0383111561300357613003612f5a565b613016601f8401601f1916602001612fba565b905082815283838301111561302a57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261305257600080fd5b61125783833560208501612fea565b80358015158114612eef57600080fd5b600060a0828403121561308357600080fd5b60405160a081016001600160401b0382821081831117156130a6576130a6612f5a565b8160405282935084359150808211156130be57600080fd5b506130cb85828601613041565b8252506130da60208401613061565b60208201526130eb60408401613061565b60408201526060830135606082015261310660808401612ed8565b60808201525092915050565b60006001600160401b0382111561312b5761312b612f5a565b5060051b60200190565b600082601f83011261314657600080fd5b8135602061315b61315683613112565b612fba565b82815260059290921b8401810191818101908684111561317a57600080fd5b8286015b848110156132695780356001600160401b038082111561319e5760008081fd5b908801906060828b03601f19018113156131b85760008081fd5b6131c0612f70565b878401358152604080850135848111156131da5760008081fd5b85019350603f84018d136131ee5760008081fd5b888401356131fe61315682613112565b81815260059190911b85018201908a8101908f83111561321e5760008081fd5b958301955b828710156132435761323487612ed8565b8252958b0195908b0190613223565b848c0152506132559050858401613061565b90820152865250505091830191830161317e565b509695505050505050565b60008060006060848603121561328957600080fd5b83356001600160401b03808211156132a057600080fd5b90850190608082880312156132b457600080fd5b6132bc612f98565b8235828111156132cb57600080fd5b6132d789828601613041565b8252506020830135828111156132ec57600080fd5b6132f889828601613041565b60208301525061330a60408401612ed8565b604082015261331b60608401613061565b60608201529450602086013591508082111561333657600080fd5b61334287838801613071565b9350604086013591508082111561335857600080fd5b5061336586828701613135565b9150509250925092565b6000806040838503121561338257600080fd5b50508035926020909101359150565b6000806000606084860312156133a657600080fd5b83356001600160401b03808211156133bd57600080fd5b9085019060a082880312156133d157600080fd5b909350602085013590808211156133e757600080fd5b506133f486828701613135565b92505061340360408501613061565b90509250925092565b6000806040838503121561341f57600080fd5b8235915061342f60208401612ed8565b90509250929050565b60006020828403121561344a57600080fd5b61125782612ed8565b60008060006060848603121561346857600080fd5b61347184612ed8565b92506020840135915060408401356001600160401b0381111561349357600080fd5b61336586828701613041565b600080604083850312156134b257600080fd5b6134bb83612ed8565b915061342f60208401613061565b6000806000606084860312156134de57600080fd5b8335925060208401356001600160401b038111156134fb57600080fd5b6133f486828701613041565b6000806000806080858703121561351d57600080fd5b61352685612ed8565b935061353460208601612ed8565b92506040850135915060608501356001600160401b0381111561355657600080fd5b8501601f8101871361356757600080fd5b61357687823560208401612fea565b91505092959194509250565b6000806040838503121561359557600080fd5b61359e83612ed8565b915061342f60208401612ed8565b600181811c908216806135c057607f821691505b6020821081036135e057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b601f8211156108ec57600081815260208120601f850160051c8101602086101561365b5750805b601f850160051c820191505b8181101561367a57828155600101613667565b505050505050565b81516001600160401b0381111561369b5761369b612f5a565b6136af816136a984546135ac565b84613634565b602080601f8311600181146136e457600084156136cc5750858301515b600019600386901b1c1916600185901b17855561367a565b600085815260208120601f198616915b82811015613713578886015182559484019460019091019084016136f4565b50858210156137315787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561377157613771613741565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261379b5761379b613776565b500490565b60008083546137ae816135ac565b600182811680156137c657600181146137db5761380a565b60ff198416875282151583028701945061380a565b8760005260208060002060005b858110156138015781548a8201529084019082016137e8565b50505082870194505b50929695505050505050565b6000808335601e1984360301811261382d57600080fd5b8301803591506001600160401b0382111561384757600080fd5b602001915036819003821315610ba757600080fd5b8183823760009101908152919050565b6001600160401b0383111561388357613883612f5a565b6138978361389183546135ac565b83613634565b6000601f8411600181146138cb57600085156138b35750838201355b600019600387901b1c1916600186901b178355613925565b600083815260209020601f19861690835b828110156138fc57868501358255602094850194600190920191016138dc565b50868210156139195760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60006020828403121561393e57600080fd5b61125782613061565b60008282101561395957613959613741565b500390565b6000821982111561397157613971613741565b500190565b60008351613988818460208801612e54565b83519083019061399c818360208801612e54565b01949350505050565b7f7b2273656c6c65725f6665655f62617369735f706f696e7473223a20000000008152600083516139dd81601c850160208801612e54565b731610113332b2afb932b1b4b834b2b73a111d101160611b601c918401918201528351613a11816030840160208801612e54565b61227d60f01b60309290910191820152603201949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251613a6481601d850160208701612e54565b91909101601d0192915050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b7f4772616e756c6172526f6c65733a20696e76616c696420726f6c652000000000815260008251613b5c81601c850160208701612e54565b91909101601c0192915050565b600060018201613b7b57613b7b613741565b5060010190565b73023b930b73ab630b92937b632b99d103937b632960651b815260008251613bb1816014850160208701612e54565b691034b990333937bd32b760b11b6014939091019283015250601e01919050565b600082613be157613be1613776565b500690565b600081613bf557613bf5613741565b506000190190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613c35816017850160208801612e54565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613c66816028840160208801612e54565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613ca590830184612e80565b9695505050505050565b600060208284031215613cc157600080fd5b815161125781612e2156fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220029ec90ca4feae59592e26c2f215ffb3bad2f01fdd29962b83c183057eb4937a64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c80637afdcdbb11610167578063b88d4fde116100ce578063e8a3d48511610087578063e8a3d48514610663578063e985e9c51461066b578063e9a9c850146106a7578063f153c2e5146106ce578063f2fde38b146106d6578063ffa1ad74146106e957600080fd5b8063b88d4fde146105dc578063b930908f146105ef578063c87b56dd14610616578063d547741f14610629578063de374d9d1461063c578063e3d520721461065057600080fd5b8063a217fddf11610120578063a217fddf1461054e578063a22cb46514610556578063a2f551ec14610569578063a3f4df7e1461057c578063a53a84b6146105ab578063b29c097a146105b557600080fd5b80637afdcdbb146104cf5780638d010db3146104e25780638da5cb5b1461050657806391d148541461051757806395d89b411461052a5780639da5b0a51461053257600080fd5b80632c23b9651161020b57806342966c68116101c457806342966c681461046b5780634e6f9dd61461047e5780636352211e1461048c5780636c0360eb1461049f57806370a08231146104a757806375b238fc146104ba57600080fd5b80632c23b965146103e45780632e628b611461040b5780632f2ff15d1461041e578063328825351461043157806336568abe1461044557806342842e0e1461045857600080fd5b8063206b60f91161025d578063206b60f91461032f57806321e92d491461035657806323b872dd14610369578063248a9ca31461037c57806325d22c8e1461039f5780632a55205a146103b257600080fd5b806301ffc9a71461029a57806306fdde03146102c2578063081812fc146102d7578063095ea7b31461030257806318160ddd14610317575b600080fd5b6102ad6102a8366004612e37565b6106f2565b60405190151581526020015b60405180910390f35b6102ca61071e565b6040516102b99190612eac565b6102ea6102e5366004612ebf565b6107b0565b6040516001600160a01b0390911681526020016102b9565b610315610310366004612ef4565b6107d7565b005b6103216101365481565b6040519081526020016102b9565b6103217f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c81565b610315610364366004612ef4565b6108f1565b610315610377366004612f1e565b61099d565b61032161038a366004612ebf565b600090815260c9602052604090206001015490565b6103156103ad366004613274565b6109ce565b6103c56103c036600461336f565b610b70565b604080516001600160a01b0390931683526020830191909152016102b9565b6103217f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f581565b610315610419366004613391565b610bae565b61031561042c36600461340c565b610d59565b610134546102ea906001600160a01b031681565b61031561045336600461340c565b610d7e565b610315610466366004612f1e565b610dfc565b610315610479366004612ebf565b610e17565b610131546102ad9060ff1681565b6102ea61049a366004612ebf565b610f8e565b6102ca610fee565b6103216104b5366004613438565b61107d565b610321600080516020613d0d83398151915281565b6103216104dd366004613453565b611103565b6102ad6104f0366004612ebf565b6101326020526000908152604090205460ff1681565b60fb546001600160a01b03166102ea565b6102ad61052536600461340c565b6111c1565b6102ca61125e565b61053b61271081565b60405161ffff90911681526020016102b9565b610321600081565b61031561056436600461349f565b61126d565b6103156105773660046134c9565b611278565b6102ca6040518060400160405280601081526020016f115490cdcc8c539195141c9bd91d58dd60821b81525081565b6103216101355481565b6103217f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e681565b6103156105ea366004613507565b611485565b6103217fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2281565b6102ca610624366004612ebf565b6114b7565b61031561063736600461340c565b6115ba565b610131546102ad9062010000900460ff1681565b610131546102ad90610100900460ff1681565b6102ca6115df565b6102ad610679366004613582565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6103217f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c368681565b61031561165b565b6103156106e4366004613438565b6116ab565b61032161277481565b60006106fd82611815565b8061071857506001600160e01b0319821663152a902d60e11b145b92915050565b60606065805461072d906135ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610759906135ac565b80156107a65780601f1061077b576101008083540402835291602001916107a6565b820191906000526020600020905b81548152906001019060200180831161078957829003601f168201915b5050505050905090565b60006107bb82611865565b506000908152606960205260409020546001600160a01b031690565b60006107e282610f8e565b9050806001600160a01b0316836001600160a01b0316036108545760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061087057506108708133610679565b6108e25760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161084b565b6108ec83836118c7565b505050565b7f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c61091b81611935565b6101315462010000900460ff166109745760405162461bcd60e51b815260206004820181905260248201527f5472616e736665723a205472616e7366657273206172652064697361626c6564604482015260640161084b565b60fb546040805160208101909152600081526108ec916001600160a01b0316908590859061193f565b6109a73382611972565b6109c35760405162461bcd60e51b815260040161084b906135e6565b6108ec8383836119f0565b600054610100900460ff16158080156109ee5750600054600160ff909116105b80610a085750303b158015610a08575060005460ff166001145b610a6b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161084b565b6000805460ff191660011790558015610a8e576000805461ff0019166101001790555b610aa084600001518560200151611b8c565b610aa8611bbd565b610aba83608001518460600151611bee565b60208301516101318054606087015160408701511515620100000262ff0000199115156101000261ff00199515159590951661ffff19909316929092179390931792909216919091179055825161013390610b159082613682565b50610b24846040015183611c72565b8015610b6a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610134546101355460009182916001600160a01b039091169061271090610b98908690613757565b610ba2919061378c565b915091505b9250929050565b7f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f5610bd881611935565b6101315460ff1680610c435750610133604051602001610bf891906137a0565b60408051601f198184030181529190528051602090910120610c1a8580613816565b604051602001610c2b92919061385c565b60405160208183030381529060405280519060200120145b610c8f5760405162461bcd60e51b815260206004820152601a60248201527f5570646174653a204d657461646174612069732066726f7a656e000000000000604482015260640161084b565b610c998480613816565b61013391610ca891908361386c565b50610cc6610cbc60a0860160808701613438565b8560600135611bee565b610cd6606085016040860161392c565b610ce857610131805462ff0000191690555b610cf8604085016020860161392c565b158015610d0857506101315460ff165b15610d4257610131805460ff191690556040517fb59f45df38ec0d34114b1248c38a29cdbccbf3e745ae3ef310ac66199a4ceccf90600090a15b610d4b83611ef6565b8115610b6a57610b6a61165b565b600082815260c96020526040902060010154610d7481611935565b6108ec83836121e0565b6001600160a01b0381163314610dee5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161084b565b610df88282612266565b5050565b6108ec83838360405180602001604052806000815250611485565b7fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa22610e4181611935565b61013154610100900460ff16610e995760405162461bcd60e51b815260206004820152601860248201527f4275726e3a204275726e73206172652064697361626c65640000000000000000604482015260640161084b565b6000828152606760205260409020546001600160a01b0316610efd5760405162461bcd60e51b815260206004820152601a60248201527f4275726e3a20546f6b656e20646f6573206e6f74206578697374000000000000604482015260640161084b565b60fb546001600160a01b0316610f1283610f8e565b6001600160a01b031614610f685760405162461bcd60e51b815260206004820181905260248201527f4275726e3a206e6f742068656c6420627920636f6e7472616374206f776e6572604482015260640161084b565b610f71826122cd565b60016101366000828254610f859190613947565b90915550505050565b6000818152606760205260408120546001600160a01b0316806107185760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161084b565b6101338054610ffc906135ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611028906135ac565b80156110755780601f1061104a57610100808354040283529160200191611075565b820191906000526020600020905b81548152906001019060200180831161105857829003601f168201915b505050505081565b60006001600160a01b0382166110e75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161084b565b506001600160a01b031660009081526068602052604090205490565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c368661112f81611935565b600260ff54036111815760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161084b565b600260ff55611190858561230d565b600161013660008282546111a4919061395e565b909155506111b490508484612327565b5050600160ff5550919050565b60fb546000906001600160a01b03908116908316036111e257506001610718565b826111ef57506000610718565b6001600160a01b03821660009081527f56eafcfe4e056e5ee1febf92b17728968883505f0e8dc799e4f43119d826ca85602052604090205460ff16806112575750600083815260c9602090815260408083206001600160a01b038616845290915290205460ff165b9392505050565b60606066805461072d906135ac565b610df83383836123ba565b7f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e66112a281611935565b6000848152606760205260409020546001600160a01b03166113065760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e3a20546f6b656e20646f6573206e6f742065786973740000000000604482015260640161084b565b6101315460ff166113595760405162461bcd60e51b815260206004820152601960248201527f546f6b656e3a204d657461646174612069732066726f7a656e00000000000000604482015260640161084b565b6000848152610132602052604090205460ff1615156001036113b65760405162461bcd60e51b81526020600482015260166024820152752a37b5b2b71d102a37b5b2b71034b990333937bd32b760511b604482015260640161084b565b81806113c25750825115155b61140e5760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e3a20546f6b656e20555249206973206d697373696e670000000000604482015260640161084b565b82511561141f5761141f8484612327565b8115610b6a57600084815261013260205260409020805460ff19166001179055837fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b5565720761146a826114b7565b6040516114779190612eac565b60405180910390a250505050565b61148f3383611972565b6114ab5760405162461bcd60e51b815260040161084b906135e6565b610b6a8484848461193f565b60606114c282611865565b600082815260976020526040812080546114db906135ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611507906135ac565b80156115545780601f1061152957610100808354040283529160200191611554565b820191906000526020600020905b81548152906001019060200180831161153757829003601f168201915b505050505090506000611565612488565b90508051600003611577575092915050565b8151156115a9578082604051602001611591929190613976565b60405160208183030381529060405292505050919050565b6115b284612498565b949350505050565b600082815260c960205260409020600101546115d581611935565b6108ec8383612266565b6060600061162f6115f2610135546124fe565b6101345461160a906001600160a01b031660146125fe565b60405160200161161b9291906139a5565b604051602081830303815290604052612799565b90506000816040516020016116449190613a2c565b60408051601f198184030181529190529392505050565b600080516020613d0d83398151915261167381611935565b60fc5461169890600080516020613d0d833981519152906001600160a01b0316612266565b5060fc80546001600160a01b0319169055565b60fb546001600160a01b03908116908216036117095760405162461bcd60e51b815260206004820181905260248201527f4772616e756c6172526f6c65733a20616c726561647920746865206f776e6572604482015260640161084b565b60fb546001600160a01b031633146117635760405162461bcd60e51b815260206004820152601c60248201527f4772616e756c6172526f6c65733a206e6f7420746865206f776e657200000000604482015260640161084b565b60fb5461178890600080516020613d0d833981519152906001600160a01b0316612266565b60fb80546001600160a01b038381166001600160a01b03198316811790935516906117c290600080516020613d0d833981519152906121e0565b816001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001600160a01b03163b151590565b60006001600160e01b031982166380ac58cd60e01b148061184657506001600160e01b03198216635b5e139f60e01b145b8061071857506301ffc9a760e01b6001600160e01b0319831614610718565b6000818152606760205260409020546001600160a01b03166118c45760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161084b565b50565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906118fc82610f8e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6118c48133612902565b61194a8484846119f0565b61195684848484612966565b610b6a5760405162461bcd60e51b815260040161084b90613a71565b60008061197e83610f8e565b9050806001600160a01b0316846001600160a01b031614806119c557506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b806115b25750836001600160a01b03166119de846107b0565b6001600160a01b031614949350505050565b826001600160a01b0316611a0382610f8e565b6001600160a01b031614611a675760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161084b565b6001600160a01b038216611ac95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161084b565b611ad46000826118c7565b6001600160a01b0383166000908152606860205260408120805460019290611afd908490613947565b90915550506001600160a01b0382166000908152606860205260408120805460019290611b2b90849061395e565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600054610100900460ff16611bb35760405162461bcd60e51b815260040161084b90613ac3565b610df88282612a67565b600054610100900460ff16611be45760405162461bcd60e51b815260040161084b90613ac3565b611bec612aa7565b565b612710811115611c4a5760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f742073657420726f79616c7469657320746f206f766572203130306044820152602560f81b606482015260840161084b565b61013480546001600160a01b0319166001600160a01b03939093169290921790915561013555565b6001600160a01b038216611cc85760405162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374206d757374206861766520616e206f776e65720000000000604482015260640161084b565b60fb80546001600160a01b0384166001600160a01b0319918216811790925560fc805490911633179055611d0b90600080516020613d0d833981519152906121e0565b60fc54611d3090600080516020613d0d833981519152906001600160a01b03166121e0565b60005b81518110156108ec576000828281518110611d5057611d50613b0e565b6020026020010151600001519050611d6781612ad5565b611d728260206125fe565b604051602001611d829190613b24565b60405160208183030381529060405290611daf5760405162461bcd60e51b815260040161084b9190612eac565b5060005b838381518110611dc557611dc5613b0e565b60200260200101516020015151811015611ea557611e1982858581518110611def57611def613b0e565b6020026020010151602001518381518110611e0c57611e0c613b0e565b60200260200101516121e0565b600082815260fd602052604090208451859085908110611e3b57611e3b613b0e565b6020026020010151602001518281518110611e5857611e58613b0e565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580611e9d81613b69565b915050611db3565b50828281518110611eb857611eb8613b0e565b60200260200101516040015115611ee357600081815260fe60205260409020805460ff191660011790555b5080611eee81613b69565b915050611d33565b8051156118c457611f15600080516020613d0d833981519152336111c1565b611f615760405162461bcd60e51b815260206004820152601b60248201527f4772616e756c6172526f6c65733a206e6f7420616e2061646d696e0000000000604482015260640161084b565b60005b8151811015610df8576000828281518110611f8157611f81613b0e565b6020026020010151600001519050611f9881612ad5565b611fa38260206125fe565b604051602001611fb39190613b24565b60405160208183030381529060405290611fe05760405162461bcd60e51b815260040161084b9190612eac565b50600081815260fe602090815260409091205460ff1615906120039083906125fe565b6040516020016120139190613b82565b604051602081830303815290604052906120405760405162461bcd60e51b815260040161084b9190612eac565b5060005b600082815260fd60205260409020548110156120ac57600082815260fd60205260409020805461209a9184918490811061208057612080613b0e565b6000918252602090912001546001600160a01b0316612266565b806120a481613b69565b915050612044565b50600081815260fd602052604081206120c491612db4565b60005b8383815181106120d9576120d9613b0e565b6020026020010151602001515181101561218f5761210382858581518110611def57611def613b0e565b600082815260fd60205260409020845185908590811061212557612125613b0e565b602002602001015160200151828151811061214257612142613b0e565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558061218781613b69565b9150506120c7565b508282815181106121a2576121a2613b0e565b602002602001015160400151156121cd57600081815260fe60205260409020805460ff191660011790555b50806121d881613b69565b915050611f64565b6121ea82826111c1565b610df857600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556122223390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61227082826111c1565b15610df857600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6122d681612ba4565b600081815260976020526040902080546122ef906135ac565b1590506118c45760008181526097602052604081206118c491612dd2565b610df8828260405180602001604052806000815250612c3f565b6000828152606760205260409020546001600160a01b03166123a25760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b606482015260840161084b565b60008281526097602052604090206108ec8282613682565b816001600160a01b0316836001600160a01b03160361241b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161084b565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6060610133805461072d906135ac565b60606124a382611865565b60006124ad612488565b905060008151116124cd5760405180602001604052806000815250611257565b806124d7846124fe565b6040516020016124e8929190613976565b6040516020818303038152906040529392505050565b6060816000036125255750506040805180820190915260018152600360fc1b602082015290565b8160005b811561254f578061253981613b69565b91506125489050600a8361378c565b9150612529565b6000816001600160401b0381111561256957612569612f5a565b6040519080825280601f01601f191660200182016040528015612593576020820181803683370190505b5090505b84156115b2576125a8600183613947565b91506125b5600a86613bd2565b6125c090603061395e565b60f81b8183815181106125d5576125d5613b0e565b60200101906001600160f81b031916908160001a9053506125f7600a8661378c565b9450612597565b6060600061260d836002613757565b61261890600261395e565b6001600160401b0381111561262f5761262f612f5a565b6040519080825280601f01601f191660200182016040528015612659576020820181803683370190505b509050600360fc1b8160008151811061267457612674613b0e565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126a3576126a3613b0e565b60200101906001600160f81b031916908160001a90535060006126c7846002613757565b6126d290600161395e565b90505b600181111561274a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061270657612706613b0e565b1a60f81b82828151811061271c5761271c613b0e565b60200101906001600160f81b031916908160001a90535060049490941c9361274381613be6565b90506126d5565b5083156112575760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161084b565b805160609060008190036127bd575050604080516020810190915260008152919050565b600060036127cc83600261395e565b6127d6919061378c565b6127e1906004613757565b905060006127f082602061395e565b6001600160401b0381111561280757612807612f5a565b6040519080825280601f01601f191660200182016040528015612831576020820181803683370190505b5090506000604051806060016040528060408152602001613ccd604091399050600181016020830160005b868110156128bd576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b83526004909201910161285c565b5060038606600181146128d757600281146128e8576128f4565b613d3d60f01b6001198301526128f4565b603d60f81b6000198301525b505050918152949350505050565b61290c82826111c1565b610df857612924816001600160a01b031660146125fe565b61292f8360206125fe565b604051602001612940929190613bfd565b60408051601f198184030181529082905262461bcd60e51b825261084b91600401612eac565b60006001600160a01b0384163b15612a5c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906129aa903390899088908890600401613c72565b6020604051808303816000875af19250505080156129e5575060408051601f3d908101601f191682019092526129e291810190613caf565b60015b612a42573d808015612a13576040519150601f19603f3d011682016040523d82523d6000602084013e612a18565b606091505b508051600003612a3a5760405162461bcd60e51b815260040161084b90613a71565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506115b2565b506001949350505050565b600054610100900460ff16612a8e5760405162461bcd60e51b815260040161084b90613ac3565b6065612a9a8382613682565b5060666108ec8282613682565b600054610100900460ff16612ace5760405162461bcd60e51b815260040161084b90613ac3565b600160ff55565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c3686821480612b2457507f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f582145b80612b4e57507f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e682145b80612b7857507fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2282145b806107185750507f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c1490565b6000612baf82610f8e565b9050612bbc6000836118c7565b6001600160a01b0381166000908152606860205260408120805460019290612be5908490613947565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b612c498383612c72565b612c566000848484612966565b6108ec5760405162461bcd60e51b815260040161084b90613a71565b6001600160a01b038216612cc85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161084b565b6000818152606760205260409020546001600160a01b031615612d2d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161084b565b6001600160a01b0382166000908152606860205260408120805460019290612d5690849061395e565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b50805460008255906000526020600020908101906118c49190612e08565b508054612dde906135ac565b6000825580601f10612dee575050565b601f0160209004906000526020600020908101906118c491905b5b80821115612e1d5760008155600101612e09565b5090565b6001600160e01b0319811681146118c457600080fd5b600060208284031215612e4957600080fd5b813561125781612e21565b60005b83811015612e6f578181015183820152602001612e57565b83811115610b6a5750506000910152565b60008151808452612e98816020860160208601612e54565b601f01601f19169290920160200192915050565b6020815260006112576020830184612e80565b600060208284031215612ed157600080fd5b5035919050565b80356001600160a01b0381168114612eef57600080fd5b919050565b60008060408385031215612f0757600080fd5b612f1083612ed8565b946020939093013593505050565b600080600060608486031215612f3357600080fd5b612f3c84612ed8565b9250612f4a60208501612ed8565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715612f9257612f92612f5a565b60405290565b604051608081016001600160401b0381118282101715612f9257612f92612f5a565b604051601f8201601f191681016001600160401b0381118282101715612fe257612fe2612f5a565b604052919050565b60006001600160401b0383111561300357613003612f5a565b613016601f8401601f1916602001612fba565b905082815283838301111561302a57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261305257600080fd5b61125783833560208501612fea565b80358015158114612eef57600080fd5b600060a0828403121561308357600080fd5b60405160a081016001600160401b0382821081831117156130a6576130a6612f5a565b8160405282935084359150808211156130be57600080fd5b506130cb85828601613041565b8252506130da60208401613061565b60208201526130eb60408401613061565b60408201526060830135606082015261310660808401612ed8565b60808201525092915050565b60006001600160401b0382111561312b5761312b612f5a565b5060051b60200190565b600082601f83011261314657600080fd5b8135602061315b61315683613112565b612fba565b82815260059290921b8401810191818101908684111561317a57600080fd5b8286015b848110156132695780356001600160401b038082111561319e5760008081fd5b908801906060828b03601f19018113156131b85760008081fd5b6131c0612f70565b878401358152604080850135848111156131da5760008081fd5b85019350603f84018d136131ee5760008081fd5b888401356131fe61315682613112565b81815260059190911b85018201908a8101908f83111561321e5760008081fd5b958301955b828710156132435761323487612ed8565b8252958b0195908b0190613223565b848c0152506132559050858401613061565b90820152865250505091830191830161317e565b509695505050505050565b60008060006060848603121561328957600080fd5b83356001600160401b03808211156132a057600080fd5b90850190608082880312156132b457600080fd5b6132bc612f98565b8235828111156132cb57600080fd5b6132d789828601613041565b8252506020830135828111156132ec57600080fd5b6132f889828601613041565b60208301525061330a60408401612ed8565b604082015261331b60608401613061565b60608201529450602086013591508082111561333657600080fd5b61334287838801613071565b9350604086013591508082111561335857600080fd5b5061336586828701613135565b9150509250925092565b6000806040838503121561338257600080fd5b50508035926020909101359150565b6000806000606084860312156133a657600080fd5b83356001600160401b03808211156133bd57600080fd5b9085019060a082880312156133d157600080fd5b909350602085013590808211156133e757600080fd5b506133f486828701613135565b92505061340360408501613061565b90509250925092565b6000806040838503121561341f57600080fd5b8235915061342f60208401612ed8565b90509250929050565b60006020828403121561344a57600080fd5b61125782612ed8565b60008060006060848603121561346857600080fd5b61347184612ed8565b92506020840135915060408401356001600160401b0381111561349357600080fd5b61336586828701613041565b600080604083850312156134b257600080fd5b6134bb83612ed8565b915061342f60208401613061565b6000806000606084860312156134de57600080fd5b8335925060208401356001600160401b038111156134fb57600080fd5b6133f486828701613041565b6000806000806080858703121561351d57600080fd5b61352685612ed8565b935061353460208601612ed8565b92506040850135915060608501356001600160401b0381111561355657600080fd5b8501601f8101871361356757600080fd5b61357687823560208401612fea565b91505092959194509250565b6000806040838503121561359557600080fd5b61359e83612ed8565b915061342f60208401612ed8565b600181811c908216806135c057607f821691505b6020821081036135e057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b601f8211156108ec57600081815260208120601f850160051c8101602086101561365b5750805b601f850160051c820191505b8181101561367a57828155600101613667565b505050505050565b81516001600160401b0381111561369b5761369b612f5a565b6136af816136a984546135ac565b84613634565b602080601f8311600181146136e457600084156136cc5750858301515b600019600386901b1c1916600185901b17855561367a565b600085815260208120601f198616915b82811015613713578886015182559484019460019091019084016136f4565b50858210156137315787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561377157613771613741565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261379b5761379b613776565b500490565b60008083546137ae816135ac565b600182811680156137c657600181146137db5761380a565b60ff198416875282151583028701945061380a565b8760005260208060002060005b858110156138015781548a8201529084019082016137e8565b50505082870194505b50929695505050505050565b6000808335601e1984360301811261382d57600080fd5b8301803591506001600160401b0382111561384757600080fd5b602001915036819003821315610ba757600080fd5b8183823760009101908152919050565b6001600160401b0383111561388357613883612f5a565b6138978361389183546135ac565b83613634565b6000601f8411600181146138cb57600085156138b35750838201355b600019600387901b1c1916600186901b178355613925565b600083815260209020601f19861690835b828110156138fc57868501358255602094850194600190920191016138dc565b50868210156139195760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60006020828403121561393e57600080fd5b61125782613061565b60008282101561395957613959613741565b500390565b6000821982111561397157613971613741565b500190565b60008351613988818460208801612e54565b83519083019061399c818360208801612e54565b01949350505050565b7f7b2273656c6c65725f6665655f62617369735f706f696e7473223a20000000008152600083516139dd81601c850160208801612e54565b731610113332b2afb932b1b4b834b2b73a111d101160611b601c918401918201528351613a11816030840160208801612e54565b61227d60f01b60309290910191820152603201949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251613a6481601d850160208701612e54565b91909101601d0192915050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b7f4772616e756c6172526f6c65733a20696e76616c696420726f6c652000000000815260008251613b5c81601c850160208701612e54565b91909101601c0192915050565b600060018201613b7b57613b7b613741565b5060010190565b73023b930b73ab630b92937b632b99d103937b632960651b815260008251613bb1816014850160208701612e54565b691034b990333937bd32b760b11b6014939091019283015250601e01919050565b600082613be157613be1613776565b500690565b600081613bf557613bf5613741565b506000190190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613c35816017850160208801612e54565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613c66816028840160208801612e54565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613ca590830184612e80565b9695505050505050565b600060208284031215613cc157600080fd5b815161125781612e2156fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220029ec90ca4feae59592e26c2f215ffb3bad2f01fdd29962b83c183057eb4937a64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "contractURI()": {
        "details": "OpenSea contract metadata, returns a base64 encoded JSON string containing royalties basis points and royalties address"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 419,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 422,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3527,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3797,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2074,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 2076,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 2080,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2084,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2088,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2094,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2936,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 3099,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3215,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6742,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_owner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 6744,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_nftPort",
        "offset": 0,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 6749,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_rolesAddressesIndexed",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 6753,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_rolesFrozen",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 577,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_status",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      },
      {
        "astId": 621,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "__gap",
        "offset": 0,
        "slot": "256",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8229,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "metadataUpdatable",
        "offset": 0,
        "slot": "305",
        "type": "t_bool"
      },
      {
        "astId": 8231,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "tokensBurnable",
        "offset": 1,
        "slot": "305",
        "type": "t_bool"
      },
      {
        "astId": 8233,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "tokensTransferable",
        "offset": 2,
        "slot": "305",
        "type": "t_bool"
      },
      {
        "astId": 8237,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "freezeTokenUris",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 8239,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "baseURI",
        "offset": 0,
        "slot": "307",
        "type": "t_string_storage"
      },
      {
        "astId": 8241,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "royaltiesAddress",
        "offset": 0,
        "slot": "308",
        "type": "t_address"
      },
      {
        "astId": 8243,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "royaltiesBasisPoints",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 8245,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "totalSupply",
        "offset": 0,
        "slot": "310",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}