{
  "address": "0xA5fdaBc7A0562C394bfc4A590d461afb5Fbe46CB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "PermanentURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PermanentURIGlobal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROYALTIES_BASIS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_CONTRACT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_TOKEN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "freezeTokenUris",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "tokensBurnable",
              "type": "bool"
            }
          ],
          "internalType": "struct Config.Deployment",
          "name": "deploymentConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "metadataUpdatable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "tokensTransferable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Config.Runtime",
          "name": "runtimeConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address[]",
              "name": "addresses",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "frozen",
              "type": "bool"
            }
          ],
          "internalType": "struct GranularRoles.RolesAddresses[]",
          "name": "rolesAddresses",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataUpdatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mintToCaller",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeNFTPortPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensBurnable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensTransferable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "metadataUpdatable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "tokensTransferable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Config.Runtime",
          "name": "newConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address[]",
              "name": "addresses",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "frozen",
              "type": "bool"
            }
          ],
          "internalType": "struct GranularRoles.RolesAddresses[]",
          "name": "rolesAddresses",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "isRevokeNFTPortPermissions",
          "type": "bool"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenUri",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isFreezeTokenUri",
          "type": "bool"
        }
      ],
      "name": "updateTokenUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x936949047f3a44c29f431a81bdfdba825e0f0f9d515256e376603ee1a3fd47a8",
  "receipt": {
    "to": null,
    "from": "0xE7D7696C8f11278124f39fB7cDd39fD9442D5026",
    "contractAddress": "0xA5fdaBc7A0562C394bfc4A590d461afb5Fbe46CB",
    "transactionIndex": 14,
    "gasUsed": "3585534",
    "logsBloom": "0x
    "blockHash": "0xa1ec4db293f96cf722b1fcebe5b950fd9ebe859833d4f6d0890b0f6f7379028b",
    "transactionHash": "0x936949047f3a44c29f431a81bdfdba825e0f0f9d515256e376603ee1a3fd47a8",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 7638770,
        "transactionHash": "0x936949047f3a44c29f431a81bdfdba825e0f0f9d515256e376603ee1a3fd47a8",
        "address": "0xA5fdaBc7A0562C394bfc4A590d461afb5Fbe46CB",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 15,
        "blockHash": "0xa1ec4db293f96cf722b1fcebe5b950fd9ebe859833d4f6d0890b0f6f7379028b"
      }
    ],
    "blockNumber": 7638770,
    "cumulativeGasUsed": "7859921",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ca50c703ffb49b9776b0fc37ad1894d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PermanentURIGlobal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROYALTIES_BASIS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_CONTRACT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_TOKEN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezeTokenUris\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"tokensBurnable\",\"type\":\"bool\"}],\"internalType\":\"struct Config.Deployment\",\"name\":\"deploymentConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tokensTransferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct Config.Runtime\",\"name\":\"runtimeConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"internalType\":\"struct GranularRoles.RolesAddresses[]\",\"name\":\"rolesAddresses\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataUpdatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintToCaller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeNFTPortPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensBurnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataUpdatable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tokensTransferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesAddress\",\"type\":\"address\"}],\"internalType\":\"struct Config.Runtime\",\"name\":\"newConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"internalType\":\"struct GranularRoles.RolesAddresses[]\",\"name\":\"rolesAddresses\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isRevokeNFTPortPermissions\",\"type\":\"bool\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenUri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isFreezeTokenUri\",\"type\":\"bool\"}],\"name\":\"updateTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/templates/ERC721NFTProduct.sol\":\"ERC721NFTProduct\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbd5c6f8268a1d477f6a746ebedaf7fbcf412186f0c1c54ee104547cfb5e18edd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/lib/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant _TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = _TABLE;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n                // solhint-disable-previous-line no-empty-blocks\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n                )\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0xed17fc4971ea187042104c869a720dceb9c016bbb7a5e805f2d6ffc5052e216a\",\"license\":\"MIT\"},\"contracts/lib/Config.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Config {\\n    /// Fixed at deployment time\\n    struct Deployment {\\n        // Name of the NFT contract.\\n        string name;\\n        // Symbol of the NFT contract.\\n        string symbol;\\n        // The contract owner address. If you wish to own the contract, then set it as your wallet address.\\n        // This is also the wallet that can manage the contract on NFT marketplaces.\\n        address owner;\\n        // If true, tokens may be burned by owner. Cannot be changed later.\\n        bool tokensBurnable;\\n    }\\n\\n    /// Updatable by admins and owner\\n    struct Runtime {\\n        // Metadata base URI for tokens, NFTs minted in this contract will have metadata URI of `baseURI` + `tokenID`.\\n        // Set this to reveal token metadata.\\n        string baseURI;\\n        // If true, the base URI of the NFTs minted in the specified contract can be updated after minting (token URIs\\n        // are not frozen on the contract level). This is useful for revealing NFTs after the drop. If false, all the\\n        // NFTs minted in this contract are frozen by default which means token URIs are non-updatable.\\n        bool metadataUpdatable;\\n        // If true, tokens may be transferred by owner. Default is true. Can be only changed to false.\\n        bool tokensTransferable;\\n        // Secondary market royalties in basis points (100 bps = 1%)\\n        uint256 royaltiesBps;\\n        // Address for royalties\\n        address royaltiesAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x5d34e33120817203948d5ac07093553a3546ed02e6289345017fc06d057ea9be\",\"license\":\"MIT\"},\"contracts/lib/GranularRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\nabstract contract GranularRoles is AccessControlUpgradeable {\\n    // Roles list\\n    // Admin role can have 2 addresses:\\n    // one address same as (_owner) which can be changed\\n    // one for NFTPort API access which can only be revoked\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    // Following roles can have multiple addresses, can be changed by admin or update contrac role\\n    bytes32 public constant MINT_ROLE = keccak256(\\\"MINT_ROLE\\\");\\n    bytes32 public constant UPDATE_CONTRACT_ROLE =\\n        keccak256(\\\"UPDATE_CONTRACT_ROLE\\\");\\n    bytes32 public constant UPDATE_TOKEN_ROLE = keccak256(\\\"UPDATE_TOKEN_ROLE\\\");\\n    bytes32 public constant BURN_ROLE = keccak256(\\\"BURN_ROLE\\\");\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n\\n    struct RolesAddresses {\\n        bytes32 role;\\n        address[] addresses;\\n        bool frozen;\\n    }\\n\\n    address internal _owner;\\n    address internal _nftPort;\\n\\n    mapping(bytes32 => address[]) internal _rolesAddressesIndexed; // Used to get roles enumeration\\n    mapping(bytes32 => bool) internal _rolesFrozen;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function transferOwnership(address newOwner) public {\\n        require(newOwner != _owner, \\\"GranularRoles: already the owner\\\");\\n        require(msg.sender == _owner, \\\"GranularRoles: not the owner\\\");\\n        _revokeRole(ADMIN_ROLE, _owner);\\n        address previousOwner = _owner;\\n        _owner = newOwner;\\n        _grantRole(ADMIN_ROLE, _owner);\\n        emit OwnershipTransferred(previousOwner, newOwner);\\n    }\\n\\n    function revokeNFTPortPermissions() public onlyRole(ADMIN_ROLE) {\\n        _revokeRole(ADMIN_ROLE, _nftPort);\\n        _nftPort = address(0);\\n    }\\n\\n    // Admin role has all access granted by default\\n    function hasRole(bytes32 role, address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            super.hasRole(ADMIN_ROLE, account) || super.hasRole(role, account);\\n    }\\n\\n    function _initRoles(address owner_, RolesAddresses[] memory rolesAddresses)\\n        internal\\n    {\\n        _owner = owner_;\\n        _nftPort = msg.sender;\\n        _grantRole(ADMIN_ROLE, _owner);\\n        _grantRole(ADMIN_ROLE, _nftPort);\\n\\n        for (\\n            uint256 roleIndex = 0;\\n            roleIndex < rolesAddresses.length;\\n            roleIndex++\\n        ) {\\n            bytes32 role = rolesAddresses[roleIndex].role;\\n            require(\\n                _regularRoleValid(role),\\n                string(\\n                    abi.encodePacked(\\n                        \\\"GranularRoles: invalid role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n            for (\\n                uint256 addressIndex = 0;\\n                addressIndex < rolesAddresses[roleIndex].addresses.length;\\n                addressIndex++\\n            ) {\\n                _grantRole(\\n                    role,\\n                    rolesAddresses[roleIndex].addresses[addressIndex]\\n                );\\n                _rolesAddressesIndexed[role].push(\\n                    rolesAddresses[roleIndex].addresses[addressIndex]\\n                );\\n            }\\n            if (rolesAddresses[roleIndex].frozen) {\\n                _rolesFrozen[role] = true;\\n            }\\n        }\\n    }\\n\\n    function _updateRoles(RolesAddresses[] memory rolesAddresses) internal {\\n        if (rolesAddresses.length > 0) {\\n            require(\\n                hasRole(ADMIN_ROLE, msg.sender),\\n                \\\"GranularRoles: not an admin\\\"\\n            );\\n\\n            for (\\n                uint256 roleIndex = 0;\\n                roleIndex < rolesAddresses.length;\\n                roleIndex++\\n            ) {\\n                bytes32 role = rolesAddresses[roleIndex].role;\\n                require(\\n                    _regularRoleValid(role),\\n                    string(\\n                        abi.encodePacked(\\n                            \\\"GranularRoles: invalid role \\\",\\n                            StringsUpgradeable.toHexString(uint256(role), 32)\\n                        )\\n                    )\\n                );\\n                require(\\n                    !_rolesFrozen[role],\\n                    string(\\n                        abi.encodePacked(\\n                            \\\"GranularRoles: role \\\",\\n                            StringsUpgradeable.toHexString(uint256(role), 32),\\n                            \\\" is frozen\\\"\\n                        )\\n                    )\\n                );\\n                for (\\n                    uint256 addressIndex = 0;\\n                    addressIndex < _rolesAddressesIndexed[role].length;\\n                    addressIndex++\\n                ) {\\n                    _revokeRole(\\n                        role,\\n                        _rolesAddressesIndexed[role][addressIndex]\\n                    );\\n                }\\n                delete _rolesAddressesIndexed[role];\\n                for (\\n                    uint256 addressIndex = 0;\\n                    addressIndex < rolesAddresses[roleIndex].addresses.length;\\n                    addressIndex++\\n                ) {\\n                    _grantRole(\\n                        role,\\n                        rolesAddresses[roleIndex].addresses[addressIndex]\\n                    );\\n                    _rolesAddressesIndexed[role].push(\\n                        rolesAddresses[roleIndex].addresses[addressIndex]\\n                    );\\n                }\\n                if (rolesAddresses[roleIndex].frozen) {\\n                    _rolesFrozen[role] = true;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _regularRoleValid(bytes32 role) internal pure returns (bool) {\\n        return\\n            role == MINT_ROLE ||\\n            role == UPDATE_CONTRACT_ROLE ||\\n            role == UPDATE_TOKEN_ROLE ||\\n            role == BURN_ROLE ||\\n            role == TRANSFER_ROLE;\\n    }\\n}\\n\",\"keccak256\":\"0x6ee21a6cbbddd51840b760a4d07b1b6364841ff1c9845f46355b3d2ce9eec705\",\"license\":\"MIT\"},\"contracts/lib/ITemplate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITemplate {\\n    function NAME() external view returns (string memory);\\n\\n    function VERSION() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcbf356472c33f1539d9e3ccf21d501adcb40ba9a952833801b166c38f09c6902\",\"license\":\"MIT\"},\"contracts/templates/ERC721NFTProduct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\n\\nimport \\\"../lib/Base64.sol\\\";\\nimport \\\"../lib/GranularRoles.sol\\\";\\nimport \\\"../lib/Config.sol\\\";\\nimport \\\"../lib/ITemplate.sol\\\";\\n\\ncontract ERC721NFTProduct is\\n    ERC721URIStorageUpgradeable,\\n    GranularRoles,\\n    ITemplate\\n{\\n    /*******************************\\n     * Extensions, structs, events *\\n     *******************************/\\n\\n    using StringsUpgradeable for uint256;\\n\\n    // https://docs.opensea.io/docs/metadata-standards\\n    event PermanentURI(string _value, uint256 indexed _id);\\n    event PermanentURIGlobal();\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    string public constant NAME = \\\"ERC721NFTProduct\\\";\\n    uint256 public constant VERSION = 1_00_03;\\n    uint16 public constant ROYALTIES_BASIS = 10000;\\n\\n    /********************\\n     * Public variables *\\n     ********************/\\n\\n    bool public metadataUpdatable;\\n    bool public tokensBurnable;\\n    bool public tokensTransferable;\\n\\n    // Mapping of individually frozen tokens\\n    mapping(uint256 => bool) public freezeTokenUris;\\n\\n    string public baseURI;\\n\\n    address public royaltiesAddress;\\n    uint256 public royaltiesBasisPoints;\\n\\n    /***************************\\n     * Contract initialization *\\n     ***************************/\\n\\n    constructor() initializer {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    function initialize(\\n        Config.Deployment memory deploymentConfig,\\n        Config.Runtime memory runtimeConfig,\\n        RolesAddresses[] memory rolesAddresses\\n    ) public initializer {\\n        __ERC721_init(deploymentConfig.name, deploymentConfig.symbol);\\n\\n        royaltiesAddress = runtimeConfig.royaltiesAddress;\\n        royaltiesBasisPoints = runtimeConfig.royaltiesBps;\\n\\n        metadataUpdatable = runtimeConfig.metadataUpdatable;\\n        tokensBurnable = deploymentConfig.tokensBurnable;\\n        tokensTransferable = runtimeConfig.tokensTransferable;\\n\\n        baseURI = runtimeConfig.baseURI;\\n\\n        _initRoles(deploymentConfig.owner, rolesAddresses);\\n    }\\n\\n    /*******************\\n     * Write functions *\\n     *******************/\\n\\n    function mintToCaller(\\n        address caller,\\n        uint256 tokenId,\\n        string memory tokenURI\\n    ) public onlyRole(MINT_ROLE) returns (uint256) {\\n        _safeMint(caller, tokenId);\\n        _setTokenURI(tokenId, tokenURI);\\n        return tokenId;\\n    }\\n\\n    function updateTokenUri(\\n        uint256 _tokenId,\\n        string memory _tokenUri,\\n        bool _isFreezeTokenUri\\n    ) public onlyRole(UPDATE_TOKEN_ROLE) {\\n        require(_exists(_tokenId), \\\"Token: Token does not exist\\\");\\n        require(metadataUpdatable, \\\"Token: Metadata is frozen\\\");\\n        require(freezeTokenUris[_tokenId] != true, \\\"Token: Token is frozen\\\");\\n        require(\\n            _isFreezeTokenUri || (bytes(_tokenUri).length != 0),\\n            \\\"Token: Token URI is missing\\\"\\n        );\\n\\n        if (bytes(_tokenUri).length != 0) {\\n            _setTokenURI(_tokenId, _tokenUri);\\n        }\\n\\n        if (_isFreezeTokenUri) {\\n            freezeTokenUris[_tokenId] = true;\\n            emit PermanentURI(tokenURI(_tokenId), _tokenId);\\n        }\\n    }\\n\\n    function transferByOwner(address _to, uint256 _tokenId)\\n        public\\n        onlyRole(TRANSFER_ROLE)\\n    {\\n        require(tokensTransferable, \\\"Transfer: Transfers are disabled\\\");\\n        _safeTransfer(_owner, _to, _tokenId, \\\"\\\");\\n    }\\n\\n    function burn(uint256 _tokenId) public onlyRole(BURN_ROLE) {\\n        require(tokensBurnable, \\\"Burn: Burns are disabled\\\");\\n        require(_exists(_tokenId), \\\"Burn: Token does not exist\\\");\\n        require(\\n            ERC721Upgradeable.ownerOf(_tokenId) == _owner,\\n            \\\"Burn: not held by contract owner\\\"\\n        );\\n        _burn(_tokenId);\\n    }\\n\\n    function update(\\n        Config.Runtime calldata newConfig,\\n        RolesAddresses[] memory rolesAddresses,\\n        bool isRevokeNFTPortPermissions\\n    ) public onlyRole(UPDATE_CONTRACT_ROLE) {\\n        // If metadata is frozen, baseURI cannot be updated\\n        require(\\n            metadataUpdatable ||\\n                (keccak256(abi.encodePacked(newConfig.baseURI)) ==\\n                    keccak256(abi.encodePacked(baseURI))),\\n            \\\"Update: Metadata is frozen\\\"\\n        );\\n\\n        baseURI = newConfig.baseURI;\\n        royaltiesAddress = newConfig.royaltiesAddress;\\n        royaltiesBasisPoints = newConfig.royaltiesBps;\\n\\n        if (!newConfig.tokensTransferable) {\\n            tokensTransferable = false;\\n        }\\n        if (!newConfig.metadataUpdatable && metadataUpdatable) {\\n            metadataUpdatable = false;\\n            emit PermanentURIGlobal();\\n        }\\n\\n        _updateRoles(rolesAddresses);\\n\\n        if (isRevokeNFTPortPermissions) {\\n            revokeNFTPortPermissions();\\n        }\\n    }\\n\\n    /******************\\n     * View functions *\\n     ******************/\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            ERC721Upgradeable.supportsInterface(interfaceId) ||\\n            interfaceId == type(IERC2981).interfaceId;\\n    }\\n\\n    function royaltyInfo(uint256, uint256 salePrice)\\n        external\\n        view\\n        returns (address, uint256)\\n    {\\n        return (\\n            royaltiesAddress,\\n            (royaltiesBasisPoints * salePrice) / ROYALTIES_BASIS\\n        );\\n    }\\n\\n    function contractURI() external view returns (string memory) {\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"seller_fee_basis_points\\\": ', // solhint-disable-line quotes\\n                        royaltiesBasisPoints.toString(),\\n                        ', \\\"fee_recipient\\\": \\\"', // solhint-disable-line quotes\\n                        uint256(uint160(royaltiesAddress)).toHexString(20),\\n                        '\\\"}' // solhint-disable-line quotes\\n                    )\\n                )\\n            )\\n        );\\n\\n        string memory output = string(\\n            abi.encodePacked(\\\"data:application/json;base64,\\\", json)\\n        );\\n\\n        return output;\\n    }\\n\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        require(index < balanceOf(owner), \\\"Owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        require(index < totalSupply(), \\\"Global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /*************\\n     * Internals *\\n     *************/\\n\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function _baseURI()\\n        internal\\n        view\\n        virtual\\n        override(ERC721Upgradeable)\\n        returns (string memory)\\n    {\\n        return baseURI;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\\n        private\\n    {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x74b179e388bcce22518f1f4e6f778e399f1c7ebd3879b42609a8b385317d0b29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff1615808015620000335750600054600160ff909116105b8062000063575062000050306200013d60201b620018af1760201c565b15801562000063575060005460ff166001145b620000cb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000ef576000805461ff0019166101001790555b801562000136576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b506200014c565b6001600160a01b03163b151590565b613f62806200015c6000396000f3fe608060405234801561001057600080fd5b50600436106102bb5760003560e01c806375b238fc11610182578063b29c097a116100e9578063e3d52072116100a2578063e9a9c8501161007c578063e9a9c850146106ea578063f153c2e514610711578063f2fde38b14610719578063ffa1ad741461072c57600080fd5b8063e3d5207214610694578063e8a3d485146106a6578063e985e9c5146106ae57600080fd5b8063b29c097a146105fa578063b88d4fde14610621578063b930908f14610634578063c87b56dd1461065b578063d547741f1461066e578063de374d9d1461068157600080fd5b80639da5b0a51161013b5780639da5b0a514610577578063a217fddf14610593578063a22cb4651461059b578063a2f551ec146105ae578063a3f4df7e146105c1578063a53a84b6146105f057600080fd5b806375b238fc146104ff5780637afdcdbb146105145780638d010db3146105275780638da5cb5b1461054b57806391d148541461055c57806395d89b411461056f57600080fd5b80632e628b611161022657806342966c68116101df57806342966c681461049f5780634e6f9dd6146104b25780634f6ccce7146104be5780636352211e146104d15780636c0360eb146104e457806370a08231146104ec57600080fd5b80632e628b611461042c5780632f2ff15d1461043f5780632f745c5914610452578063328825351461046557806336568abe1461047957806342842e0e1461048c57600080fd5b806321e92d491161027857806321e92d491461037757806323b872dd1461038a578063248a9ca31461039d57806325d22c8e146103c05780632a55205a146103d35780632c23b9651461040557600080fd5b806301ffc9a7146102c057806306fdde03146102e8578063081812fc146102fd578063095ea7b31461032857806318160ddd1461033d578063206b60f914610350575b600080fd5b6102d36102ce366004613021565b610735565b60405190151581526020015b60405180910390f35b6102f0610761565b6040516102df9190613096565b61031061030b3660046130a9565b6107f3565b6040516001600160a01b0390911681526020016102df565b61033b6103363660046130de565b61081a565b005b610106545b6040519081526020016102df565b6103427f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c81565b61033b6103853660046130de565b610934565b61033b610398366004613108565b6109de565b6103426103ab3660046130a9565b600090815260c9602052604090206001015490565b61033b6103ce36600461345e565b610a0f565b6103e66103e1366004613559565b610bc5565b604080516001600160a01b0390931683526020830191909152016102df565b6103427f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f581565b61033b61043a36600461357b565b610c03565b61033b61044d3660046135f6565b610dc3565b6103426104603660046130de565b610de8565b61010254610310906001600160a01b031681565b61033b6104873660046135f6565b610e6b565b61033b61049a366004613108565b610ee9565b61033b6104ad3660046130a9565b610f04565b60ff80546102d3911681565b6103426104cc3660046130a9565b61105c565b6103106104df3660046130a9565b6110dc565b6102f061113c565b6103426104fa366004613622565b6111cb565b610342600080516020613f0d83398151915281565b61034261052236600461363d565b611251565b6102d36105353660046130a9565b6101006020526000908152604090205460ff1681565b60fb546001600160a01b0316610310565b6102d361056a3660046135f6565b61129a565b6102f0611309565b61058061271081565b60405161ffff90911681526020016102df565b610342600081565b61033b6105a9366004613689565b611318565b61033b6105bc3660046136b3565b611323565b6102f06040518060400160405280601081526020016f115490cdcc8c539195141c9bd91d58dd60821b81525081565b6103426101035481565b6103427f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e681565b61033b61062f3660046136f1565b61152e565b6103427fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2281565b6102f06106693660046130a9565b611560565b61033b61067c3660046135f6565b611663565b60ff80546102d391620100009091041681565b60ff80546102d3916101009091041681565b6102f0611688565b6102d36106bc36600461376c565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6103427f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c368681565b61033b611704565b61033b610727366004613622565b611754565b61034261271381565b6000610740826118be565b8061075b57506001600160e01b0319821663152a902d60e11b145b92915050565b60606065805461077090613796565b80601f016020809104026020016040519081016040528092919081815260200182805461079c90613796565b80156107e95780601f106107be576101008083540402835291602001916107e9565b820191906000526020600020905b8154815290600101906020018083116107cc57829003601f168201915b5050505050905090565b60006107fe8261190e565b506000908152606960205260409020546001600160a01b031690565b6000610825826110dc565b9050806001600160a01b0316836001600160a01b0316036108975760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806108b357506108b381336106bc565b6109255760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161088e565b61092f8383611970565b505050565b7f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c61095e816119de565b60ff8054620100009004166109b55760405162461bcd60e51b815260206004820181905260248201527f5472616e736665723a205472616e7366657273206172652064697361626c6564604482015260640161088e565b60fb5460408051602081019091526000815261092f916001600160a01b031690859085906119e8565b6109e83382611a1b565b610a045760405162461bcd60e51b815260040161088e906137d0565b61092f838383611a99565b600054610100900460ff1615808015610a2f5750600054600160ff909116105b80610a495750303b158015610a49575060005460ff166001145b610aac5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161088e565b6000805460ff191660011790558015610acf576000805461ff0019166101001790555b610ae184600001518560200151611c40565b608083015161010280546001600160a01b0319166001600160a01b0390921691909117905560608084015161010355602084015160ff805492870151604087015161ffff1990941692151561ff00191692909217610100921515929092029190911762ff000019166201000092151592909202919091179055825161010190610b6a908261386c565b50610b79846040015183611c71565b8015610bbf576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610102546101035460009182916001600160a01b039091169061271090610bed908690613941565b610bf79190613976565b915091505b9250929050565b7f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f5610c2d816119de565b60ff80541680610c965750610101604051602001610c4b919061398a565b60408051601f198184030181529190528051602090910120610c6d8580613a00565b604051602001610c7e929190613a46565b60405160208183030381529060405280519060200120145b610ce25760405162461bcd60e51b815260206004820152601a60248201527f5570646174653a204d657461646174612069732066726f7a656e000000000000604482015260640161088e565b610cec8480613a00565b61010191610cfb919083613a56565b50610d0c60a0850160808601613622565b61010280546001600160a01b0319166001600160a01b039290921691909117905560608401803561010355610d449060408601613b16565b610d555760ff805462ff0000191690555b610d656040850160208601613b16565b158015610d73575060ff8054165b15610dac5760ff805460ff191690556040517fb59f45df38ec0d34114b1248c38a29cdbccbf3e745ae3ef310ac66199a4ceccf90600090a15b610db583611e9f565b8115610bbf57610bbf611704565b600082815260c96020526040902060010154610dde816119de565b61092f8383612189565b6000610df3836111cb565b8210610e415760405162461bcd60e51b815260206004820152601960248201527f4f776e657220696e646578206f7574206f6620626f756e647300000000000000604482015260640161088e565b506001600160a01b0391909116600090815261010460209081526040808320938352929052205490565b6001600160a01b0381163314610edb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161088e565b610ee5828261220f565b5050565b61092f8383836040518060200160405280600081525061152e565b7fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa22610f2e816119de565b60ff8054610100900416610f845760405162461bcd60e51b815260206004820152601860248201527f4275726e3a204275726e73206172652064697361626c65640000000000000000604482015260640161088e565b6000828152606760205260409020546001600160a01b0316610fe85760405162461bcd60e51b815260206004820152601a60248201527f4275726e3a20546f6b656e20646f6573206e6f74206578697374000000000000604482015260640161088e565b60fb546001600160a01b0316610ffd836110dc565b6001600160a01b0316146110535760405162461bcd60e51b815260206004820181905260248201527f4275726e3a206e6f742068656c6420627920636f6e7472616374206f776e6572604482015260640161088e565b610ee582612276565b60006110686101065490565b82106110b65760405162461bcd60e51b815260206004820152601a60248201527f476c6f62616c20696e646578206f7574206f6620626f756e6473000000000000604482015260640161088e565b61010682815481106110ca576110ca613b31565b90600052602060002001549050919050565b6000818152606760205260408120546001600160a01b03168061075b5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161088e565b610101805461114a90613796565b80601f016020809104026020016040519081016040528092919081815260200182805461117690613796565b80156111c35780601f10611198576101008083540402835291602001916111c3565b820191906000526020600020905b8154815290600101906020018083116111a657829003601f168201915b505050505081565b60006001600160a01b0382166112355760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161088e565b506001600160a01b031660009081526068602052604090205490565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c368661127d816119de565b61128785856122b6565b61129184846122d0565b50919392505050565b6001600160a01b03811660009081527f56eafcfe4e056e5ee1febf92b17728968883505f0e8dc799e4f43119d826ca85602052604081205460ff16806113025750600083815260c9602090815260408083206001600160a01b038616845290915290205460ff165b9392505050565b60606066805461077090613796565b610ee5338383612363565b7f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e661134d816119de565b6000848152606760205260409020546001600160a01b03166113b15760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e3a20546f6b656e20646f6573206e6f742065786973740000000000604482015260640161088e565b60ff8054166114025760405162461bcd60e51b815260206004820152601960248201527f546f6b656e3a204d657461646174612069732066726f7a656e00000000000000604482015260640161088e565b6000848152610100602052604090205460ff16151560010361145f5760405162461bcd60e51b81526020600482015260166024820152752a37b5b2b71d102a37b5b2b71034b990333937bd32b760511b604482015260640161088e565b818061146b5750825115155b6114b75760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e3a20546f6b656e20555249206973206d697373696e670000000000604482015260640161088e565b8251156114c8576114c884846122d0565b8115610bbf57600084815261010060205260409020805460ff19166001179055837fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b5565720761151382611560565b6040516115209190613096565b60405180910390a250505050565b6115383383611a1b565b6115545760405162461bcd60e51b815260040161088e906137d0565b610bbf848484846119e8565b606061156b8261190e565b6000828152609760205260408120805461158490613796565b80601f01602080910402602001604051908101604052809291908181526020018280546115b090613796565b80156115fd5780601f106115d2576101008083540402835291602001916115fd565b820191906000526020600020905b8154815290600101906020018083116115e057829003601f168201915b50505050509050600061160e612431565b90508051600003611620575092915050565b81511561165257808260405160200161163a929190613b47565b60405160208183030381529060405292505050919050565b61165b84612441565b949350505050565b600082815260c9602052604090206001015461167e816119de565b61092f838361220f565b606060006116d861169b610103546124a7565b610102546116b3906001600160a01b031660146125a7565b6040516020016116c4929190613b76565b604051602081830303815290604052612742565b90506000816040516020016116ed9190613bfd565b60408051601f198184030181529190529392505050565b600080516020613f0d83398151915261171c816119de565b60fc5461174190600080516020613f0d833981519152906001600160a01b031661220f565b5060fc80546001600160a01b0319169055565b60fb546001600160a01b03908116908216036117b25760405162461bcd60e51b815260206004820181905260248201527f4772616e756c6172526f6c65733a20616c726561647920746865206f776e6572604482015260640161088e565b60fb546001600160a01b0316331461180c5760405162461bcd60e51b815260206004820152601c60248201527f4772616e756c6172526f6c65733a206e6f7420746865206f776e657200000000604482015260640161088e565b60fb5461183190600080516020613f0d833981519152906001600160a01b031661220f565b60fb80546001600160a01b038381166001600160a01b031983168117909355169061186b90600080516020613f0d83398151915290612189565b816001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001600160a01b03163b151590565b60006001600160e01b031982166380ac58cd60e01b14806118ef57506001600160e01b03198216635b5e139f60e01b145b8061075b57506301ffc9a760e01b6001600160e01b031983161461075b565b6000818152606760205260409020546001600160a01b031661196d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161088e565b50565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119a5826110dc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61196d81336128ab565b6119f3848484611a99565b6119ff8484848461290f565b610bbf5760405162461bcd60e51b815260040161088e90613c42565b600080611a27836110dc565b9050806001600160a01b0316846001600160a01b03161480611a6e57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b8061165b5750836001600160a01b0316611a87846107f3565b6001600160a01b031614949350505050565b826001600160a01b0316611aac826110dc565b6001600160a01b031614611b105760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161088e565b6001600160a01b038216611b725760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161088e565b611b7d838383612a10565b611b88600082611970565b6001600160a01b0383166000908152606860205260408120805460019290611bb1908490613c94565b90915550506001600160a01b0382166000908152606860205260408120805460019290611bdf908490613cab565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600054610100900460ff16611c675760405162461bcd60e51b815260040161088e90613cc3565b610ee58282612aca565b60fb80546001600160a01b0384166001600160a01b0319918216811790925560fc805490911633179055611cb490600080516020613f0d83398151915290612189565b60fc54611cd990600080516020613f0d833981519152906001600160a01b0316612189565b60005b815181101561092f576000828281518110611cf957611cf9613b31565b6020026020010151600001519050611d1081612b0a565b611d1b8260206125a7565b604051602001611d2b9190613d0e565b60405160208183030381529060405290611d585760405162461bcd60e51b815260040161088e9190613096565b5060005b838381518110611d6e57611d6e613b31565b60200260200101516020015151811015611e4e57611dc282858581518110611d9857611d98613b31565b6020026020010151602001518381518110611db557611db5613b31565b6020026020010151612189565b600082815260fd602052604090208451859085908110611de457611de4613b31565b6020026020010151602001518281518110611e0157611e01613b31565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580611e4681613d53565b915050611d5c565b50828281518110611e6157611e61613b31565b60200260200101516040015115611e8c57600081815260fe60205260409020805460ff191660011790555b5080611e9781613d53565b915050611cdc565b80511561196d57611ebe600080516020613f0d8339815191523361129a565b611f0a5760405162461bcd60e51b815260206004820152601b60248201527f4772616e756c6172526f6c65733a206e6f7420616e2061646d696e0000000000604482015260640161088e565b60005b8151811015610ee5576000828281518110611f2a57611f2a613b31565b6020026020010151600001519050611f4181612b0a565b611f4c8260206125a7565b604051602001611f5c9190613d0e565b60405160208183030381529060405290611f895760405162461bcd60e51b815260040161088e9190613096565b50600081815260fe602090815260409091205460ff161590611fac9083906125a7565b604051602001611fbc9190613d6c565b60405160208183030381529060405290611fe95760405162461bcd60e51b815260040161088e9190613096565b5060005b600082815260fd602052604090205481101561205557600082815260fd6020526040902080546120439184918490811061202957612029613b31565b6000918252602090912001546001600160a01b031661220f565b8061204d81613d53565b915050611fed565b50600081815260fd6020526040812061206d91612f9e565b60005b83838151811061208257612082613b31565b60200260200101516020015151811015612138576120ac82858581518110611d9857611d98613b31565b600082815260fd6020526040902084518590859081106120ce576120ce613b31565b60200260200101516020015182815181106120eb576120eb613b31565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558061213081613d53565b915050612070565b5082828151811061214b5761214b613b31565b6020026020010151604001511561217657600081815260fe60205260409020805460ff191660011790555b508061218181613d53565b915050611f0d565b612193828261129a565b610ee557600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556121cb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612219828261129a565b15610ee557600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61227f81612bd9565b6000818152609760205260409020805461229890613796565b15905061196d57600081815260976020526040812061196d91612fbc565b610ee5828260405180602001604052806000815250612c80565b6000828152606760205260409020546001600160a01b031661234b5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b606482015260840161088e565b600082815260976020526040902061092f828261386c565b816001600160a01b0316836001600160a01b0316036123c45760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161088e565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6060610101805461077090613796565b606061244c8261190e565b6000612456612431565b905060008151116124765760405180602001604052806000815250611302565b80612480846124a7565b604051602001612491929190613b47565b6040516020818303038152906040529392505050565b6060816000036124ce5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156124f857806124e281613d53565b91506124f19050600a83613976565b91506124d2565b6000816001600160401b0381111561251257612512613144565b6040519080825280601f01601f19166020018201604052801561253c576020820181803683370190505b5090505b841561165b57612551600183613c94565b915061255e600a86613dbc565b612569906030613cab565b60f81b81838151811061257e5761257e613b31565b60200101906001600160f81b031916908160001a9053506125a0600a86613976565b9450612540565b606060006125b6836002613941565b6125c1906002613cab565b6001600160401b038111156125d8576125d8613144565b6040519080825280601f01601f191660200182016040528015612602576020820181803683370190505b509050600360fc1b8160008151811061261d5761261d613b31565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061264c5761264c613b31565b60200101906001600160f81b031916908160001a9053506000612670846002613941565b61267b906001613cab565b90505b60018111156126f3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106126af576126af613b31565b1a60f81b8282815181106126c5576126c5613b31565b60200101906001600160f81b031916908160001a90535060049490941c936126ec81613dd0565b905061267e565b5083156113025760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161088e565b80516060906000819003612766575050604080516020810190915260008152919050565b60006003612775836002613cab565b61277f9190613976565b61278a906004613941565b90506000612799826020613cab565b6001600160401b038111156127b0576127b0613144565b6040519080825280601f01601f1916602001820160405280156127da576020820181803683370190505b5090506000604051806060016040528060408152602001613ecd604091399050600181016020830160005b86811015612866576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101612805565b50600386066001811461288057600281146128915761289d565b613d3d60f01b60011983015261289d565b603d60f81b6000198301525b505050918152949350505050565b6128b5828261129a565b610ee5576128cd816001600160a01b031660146125a7565b6128d88360206125a7565b6040516020016128e9929190613de7565b60408051601f198184030181529082905262461bcd60e51b825261088e91600401613096565b60006001600160a01b0384163b15612a0557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612953903390899088908890600401613e5c565b6020604051808303816000875af192505050801561298e575060408051601f3d908101601f1916820190925261298b91810190613e99565b60015b6129eb573d8080156129bc576040519150601f19603f3d011682016040523d82523d6000602084013e6129c1565b606091505b5080516000036129e35760405162461bcd60e51b815260040161088e90613c42565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061165b565b506001949350505050565b6001600160a01b038316612a6d57612a68816101068054600083815261010760205260408120829055600182018355919091527fc9ef9fceea91e87b2c84ea400a44fde78842aae8aa24cd4b502ce5fb4d91e63b0155565b612a90565b816001600160a01b0316836001600160a01b031614612a9057612a908382612cb3565b6001600160a01b038216612aa75761092f81612d55565b826001600160a01b0316826001600160a01b03161461092f5761092f8282612e0a565b600054610100900460ff16612af15760405162461bcd60e51b815260040161088e90613cc3565b6065612afd838261386c565b50606661092f828261386c565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c3686821480612b5957507f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f582145b80612b8357507f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e682145b80612bad57507fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2282145b8061075b5750507f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c1490565b6000612be4826110dc565b9050612bf281600084612a10565b612bfd600083611970565b6001600160a01b0381166000908152606860205260408120805460019290612c26908490613c94565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b612c8a8383612e50565b612c97600084848461290f565b61092f5760405162461bcd60e51b815260040161088e90613c42565b60006001612cc0846111cb565b612cca9190613c94565b60008381526101056020526040902054909150808214612d20576001600160a01b038416600090815261010460209081526040808320858452825280832054848452818420819055835261010590915290208190555b506000918252610105602090815260408084208490556001600160a01b03909416835261010481528383209183525290812055565b61010654600090612d6890600190613c94565b600083815261010760205260408120546101068054939450909284908110612d9257612d92613b31565b90600052602060002001549050806101068381548110612db457612db4613b31565b60009182526020808320909101929092558281526101079091526040808220849055858252812055610106805480612dee57612dee613eb6565b6001900381819060005260206000200160009055905550505050565b6000612e15836111cb565b6001600160a01b0390931660009081526101046020908152604080832086845282528083208590559382526101059052919091209190915550565b6001600160a01b038216612ea65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161088e565b6000818152606760205260409020546001600160a01b031615612f0b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161088e565b612f1760008383612a10565b6001600160a01b0382166000908152606860205260408120805460019290612f40908490613cab565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b508054600082559060005260206000209081019061196d9190612ff2565b508054612fc890613796565b6000825580601f10612fd8575050565b601f01602090049060005260206000209081019061196d91905b5b808211156130075760008155600101612ff3565b5090565b6001600160e01b03198116811461196d57600080fd5b60006020828403121561303357600080fd5b81356113028161300b565b60005b83811015613059578181015183820152602001613041565b83811115610bbf5750506000910152565b6000815180845261308281602086016020860161303e565b601f01601f19169290920160200192915050565b602081526000611302602083018461306a565b6000602082840312156130bb57600080fd5b5035919050565b80356001600160a01b03811681146130d957600080fd5b919050565b600080604083850312156130f157600080fd5b6130fa836130c2565b946020939093013593505050565b60008060006060848603121561311d57600080fd5b613126846130c2565b9250613134602085016130c2565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561317c5761317c613144565b60405290565b604051608081016001600160401b038111828210171561317c5761317c613144565b604051601f8201601f191681016001600160401b03811182821017156131cc576131cc613144565b604052919050565b60006001600160401b038311156131ed576131ed613144565b613200601f8401601f19166020016131a4565b905082815283838301111561321457600080fd5b828260208301376000602084830101529392505050565b600082601f83011261323c57600080fd5b611302838335602085016131d4565b803580151581146130d957600080fd5b600060a0828403121561326d57600080fd5b60405160a081016001600160401b03828210818311171561329057613290613144565b8160405282935084359150808211156132a857600080fd5b506132b58582860161322b565b8252506132c46020840161324b565b60208201526132d56040840161324b565b6040820152606083013560608201526132f0608084016130c2565b60808201525092915050565b60006001600160401b0382111561331557613315613144565b5060051b60200190565b600082601f83011261333057600080fd5b81356020613345613340836132fc565b6131a4565b82815260059290921b8401810191818101908684111561336457600080fd5b8286015b848110156134535780356001600160401b03808211156133885760008081fd5b908801906060828b03601f19018113156133a25760008081fd5b6133aa61315a565b878401358152604080850135848111156133c45760008081fd5b85019350603f84018d136133d85760008081fd5b888401356133e8613340826132fc565b81815260059190911b85018201908a8101908f8311156134085760008081fd5b958301955b8287101561342d5761341e876130c2565b8252958b0195908b019061340d565b848c01525061343f905085840161324b565b908201528652505050918301918301613368565b509695505050505050565b60008060006060848603121561347357600080fd5b83356001600160401b038082111561348a57600080fd5b908501906080828803121561349e57600080fd5b6134a6613182565b8235828111156134b557600080fd5b6134c18982860161322b565b8252506020830135828111156134d657600080fd5b6134e28982860161322b565b6020830152506134f4604084016130c2565b60408201526135056060840161324b565b60608201529450602086013591508082111561352057600080fd5b61352c8783880161325b565b9350604086013591508082111561354257600080fd5b5061354f8682870161331f565b9150509250925092565b6000806040838503121561356c57600080fd5b50508035926020909101359150565b60008060006060848603121561359057600080fd5b83356001600160401b03808211156135a757600080fd5b9085019060a082880312156135bb57600080fd5b909350602085013590808211156135d157600080fd5b506135de8682870161331f565b9250506135ed6040850161324b565b90509250925092565b6000806040838503121561360957600080fd5b82359150613619602084016130c2565b90509250929050565b60006020828403121561363457600080fd5b611302826130c2565b60008060006060848603121561365257600080fd5b61365b846130c2565b92506020840135915060408401356001600160401b0381111561367d57600080fd5b61354f8682870161322b565b6000806040838503121561369c57600080fd5b6136a5836130c2565b91506136196020840161324b565b6000806000606084860312156136c857600080fd5b8335925060208401356001600160401b038111156136e557600080fd5b6135de8682870161322b565b6000806000806080858703121561370757600080fd5b613710856130c2565b935061371e602086016130c2565b92506040850135915060608501356001600160401b0381111561374057600080fd5b8501601f8101871361375157600080fd5b613760878235602084016131d4565b91505092959194509250565b6000806040838503121561377f57600080fd5b613788836130c2565b9150613619602084016130c2565b600181811c908216806137aa57607f821691505b6020821081036137ca57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b601f82111561092f57600081815260208120601f850160051c810160208610156138455750805b601f850160051c820191505b8181101561386457828155600101613851565b505050505050565b81516001600160401b0381111561388557613885613144565b613899816138938454613796565b8461381e565b602080601f8311600181146138ce57600084156138b65750858301515b600019600386901b1c1916600185901b178555613864565b600085815260208120601f198616915b828110156138fd578886015182559484019460019091019084016138de565b508582101561391b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561395b5761395b61392b565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261398557613985613960565b500490565b600080835461399881613796565b600182811680156139b057600181146139c5576139f4565b60ff19841687528215158302870194506139f4565b8760005260208060002060005b858110156139eb5781548a8201529084019082016139d2565b50505082870194505b50929695505050505050565b6000808335601e19843603018112613a1757600080fd5b8301803591506001600160401b03821115613a3157600080fd5b602001915036819003821315610bfc57600080fd5b8183823760009101908152919050565b6001600160401b03831115613a6d57613a6d613144565b613a8183613a7b8354613796565b8361381e565b6000601f841160018114613ab55760008515613a9d5750838201355b600019600387901b1c1916600186901b178355613b0f565b600083815260209020601f19861690835b82811015613ae65786850135825560209485019460019092019101613ac6565b5086821015613b035760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600060208284031215613b2857600080fd5b6113028261324b565b634e487b7160e01b600052603260045260246000fd5b60008351613b5981846020880161303e565b835190830190613b6d81836020880161303e565b01949350505050565b7f7b2273656c6c65725f6665655f62617369735f706f696e7473223a2000000000815260008351613bae81601c85016020880161303e565b731610113332b2afb932b1b4b834b2b73a111d101160611b601c918401918201528351613be281603084016020880161303e565b61227d60f01b60309290910191820152603201949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251613c3581601d85016020870161303e565b91909101601d0192915050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600082821015613ca657613ca661392b565b500390565b60008219821115613cbe57613cbe61392b565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f4772616e756c6172526f6c65733a20696e76616c696420726f6c652000000000815260008251613d4681601c85016020870161303e565b91909101601c0192915050565b600060018201613d6557613d6561392b565b5060010190565b73023b930b73ab630b92937b632b99d103937b632960651b815260008251613d9b81601485016020870161303e565b691034b990333937bd32b760b11b6014939091019283015250601e01919050565b600082613dcb57613dcb613960565b500690565b600081613ddf57613ddf61392b565b506000190190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613e1f81601785016020880161303e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613e5081602884016020880161303e565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613e8f9083018461306a565b9695505050505050565b600060208284031215613eab57600080fd5b81516113028161300b565b634e487b7160e01b600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220a323cbdf52981352f9efb73f91f4f7686e52e8fdd39a8fd8eb6d7d4ddf2a61a964736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102bb5760003560e01c806375b238fc11610182578063b29c097a116100e9578063e3d52072116100a2578063e9a9c8501161007c578063e9a9c850146106ea578063f153c2e514610711578063f2fde38b14610719578063ffa1ad741461072c57600080fd5b8063e3d5207214610694578063e8a3d485146106a6578063e985e9c5146106ae57600080fd5b8063b29c097a146105fa578063b88d4fde14610621578063b930908f14610634578063c87b56dd1461065b578063d547741f1461066e578063de374d9d1461068157600080fd5b80639da5b0a51161013b5780639da5b0a514610577578063a217fddf14610593578063a22cb4651461059b578063a2f551ec146105ae578063a3f4df7e146105c1578063a53a84b6146105f057600080fd5b806375b238fc146104ff5780637afdcdbb146105145780638d010db3146105275780638da5cb5b1461054b57806391d148541461055c57806395d89b411461056f57600080fd5b80632e628b611161022657806342966c68116101df57806342966c681461049f5780634e6f9dd6146104b25780634f6ccce7146104be5780636352211e146104d15780636c0360eb146104e457806370a08231146104ec57600080fd5b80632e628b611461042c5780632f2ff15d1461043f5780632f745c5914610452578063328825351461046557806336568abe1461047957806342842e0e1461048c57600080fd5b806321e92d491161027857806321e92d491461037757806323b872dd1461038a578063248a9ca31461039d57806325d22c8e146103c05780632a55205a146103d35780632c23b9651461040557600080fd5b806301ffc9a7146102c057806306fdde03146102e8578063081812fc146102fd578063095ea7b31461032857806318160ddd1461033d578063206b60f914610350575b600080fd5b6102d36102ce366004613021565b610735565b60405190151581526020015b60405180910390f35b6102f0610761565b6040516102df9190613096565b61031061030b3660046130a9565b6107f3565b6040516001600160a01b0390911681526020016102df565b61033b6103363660046130de565b61081a565b005b610106545b6040519081526020016102df565b6103427f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c81565b61033b6103853660046130de565b610934565b61033b610398366004613108565b6109de565b6103426103ab3660046130a9565b600090815260c9602052604090206001015490565b61033b6103ce36600461345e565b610a0f565b6103e66103e1366004613559565b610bc5565b604080516001600160a01b0390931683526020830191909152016102df565b6103427f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f581565b61033b61043a36600461357b565b610c03565b61033b61044d3660046135f6565b610dc3565b6103426104603660046130de565b610de8565b61010254610310906001600160a01b031681565b61033b6104873660046135f6565b610e6b565b61033b61049a366004613108565b610ee9565b61033b6104ad3660046130a9565b610f04565b60ff80546102d3911681565b6103426104cc3660046130a9565b61105c565b6103106104df3660046130a9565b6110dc565b6102f061113c565b6103426104fa366004613622565b6111cb565b610342600080516020613f0d83398151915281565b61034261052236600461363d565b611251565b6102d36105353660046130a9565b6101006020526000908152604090205460ff1681565b60fb546001600160a01b0316610310565b6102d361056a3660046135f6565b61129a565b6102f0611309565b61058061271081565b60405161ffff90911681526020016102df565b610342600081565b61033b6105a9366004613689565b611318565b61033b6105bc3660046136b3565b611323565b6102f06040518060400160405280601081526020016f115490cdcc8c539195141c9bd91d58dd60821b81525081565b6103426101035481565b6103427f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e681565b61033b61062f3660046136f1565b61152e565b6103427fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2281565b6102f06106693660046130a9565b611560565b61033b61067c3660046135f6565b611663565b60ff80546102d391620100009091041681565b60ff80546102d3916101009091041681565b6102f0611688565b6102d36106bc36600461376c565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6103427f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c368681565b61033b611704565b61033b610727366004613622565b611754565b61034261271381565b6000610740826118be565b8061075b57506001600160e01b0319821663152a902d60e11b145b92915050565b60606065805461077090613796565b80601f016020809104026020016040519081016040528092919081815260200182805461079c90613796565b80156107e95780601f106107be576101008083540402835291602001916107e9565b820191906000526020600020905b8154815290600101906020018083116107cc57829003601f168201915b5050505050905090565b60006107fe8261190e565b506000908152606960205260409020546001600160a01b031690565b6000610825826110dc565b9050806001600160a01b0316836001600160a01b0316036108975760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806108b357506108b381336106bc565b6109255760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161088e565b61092f8383611970565b505050565b7f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c61095e816119de565b60ff8054620100009004166109b55760405162461bcd60e51b815260206004820181905260248201527f5472616e736665723a205472616e7366657273206172652064697361626c6564604482015260640161088e565b60fb5460408051602081019091526000815261092f916001600160a01b031690859085906119e8565b6109e83382611a1b565b610a045760405162461bcd60e51b815260040161088e906137d0565b61092f838383611a99565b600054610100900460ff1615808015610a2f5750600054600160ff909116105b80610a495750303b158015610a49575060005460ff166001145b610aac5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161088e565b6000805460ff191660011790558015610acf576000805461ff0019166101001790555b610ae184600001518560200151611c40565b608083015161010280546001600160a01b0319166001600160a01b0390921691909117905560608084015161010355602084015160ff805492870151604087015161ffff1990941692151561ff00191692909217610100921515929092029190911762ff000019166201000092151592909202919091179055825161010190610b6a908261386c565b50610b79846040015183611c71565b8015610bbf576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610102546101035460009182916001600160a01b039091169061271090610bed908690613941565b610bf79190613976565b915091505b9250929050565b7f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f5610c2d816119de565b60ff80541680610c965750610101604051602001610c4b919061398a565b60408051601f198184030181529190528051602090910120610c6d8580613a00565b604051602001610c7e929190613a46565b60405160208183030381529060405280519060200120145b610ce25760405162461bcd60e51b815260206004820152601a60248201527f5570646174653a204d657461646174612069732066726f7a656e000000000000604482015260640161088e565b610cec8480613a00565b61010191610cfb919083613a56565b50610d0c60a0850160808601613622565b61010280546001600160a01b0319166001600160a01b039290921691909117905560608401803561010355610d449060408601613b16565b610d555760ff805462ff0000191690555b610d656040850160208601613b16565b158015610d73575060ff8054165b15610dac5760ff805460ff191690556040517fb59f45df38ec0d34114b1248c38a29cdbccbf3e745ae3ef310ac66199a4ceccf90600090a15b610db583611e9f565b8115610bbf57610bbf611704565b600082815260c96020526040902060010154610dde816119de565b61092f8383612189565b6000610df3836111cb565b8210610e415760405162461bcd60e51b815260206004820152601960248201527f4f776e657220696e646578206f7574206f6620626f756e647300000000000000604482015260640161088e565b506001600160a01b0391909116600090815261010460209081526040808320938352929052205490565b6001600160a01b0381163314610edb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161088e565b610ee5828261220f565b5050565b61092f8383836040518060200160405280600081525061152e565b7fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa22610f2e816119de565b60ff8054610100900416610f845760405162461bcd60e51b815260206004820152601860248201527f4275726e3a204275726e73206172652064697361626c65640000000000000000604482015260640161088e565b6000828152606760205260409020546001600160a01b0316610fe85760405162461bcd60e51b815260206004820152601a60248201527f4275726e3a20546f6b656e20646f6573206e6f74206578697374000000000000604482015260640161088e565b60fb546001600160a01b0316610ffd836110dc565b6001600160a01b0316146110535760405162461bcd60e51b815260206004820181905260248201527f4275726e3a206e6f742068656c6420627920636f6e7472616374206f776e6572604482015260640161088e565b610ee582612276565b60006110686101065490565b82106110b65760405162461bcd60e51b815260206004820152601a60248201527f476c6f62616c20696e646578206f7574206f6620626f756e6473000000000000604482015260640161088e565b61010682815481106110ca576110ca613b31565b90600052602060002001549050919050565b6000818152606760205260408120546001600160a01b03168061075b5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161088e565b610101805461114a90613796565b80601f016020809104026020016040519081016040528092919081815260200182805461117690613796565b80156111c35780601f10611198576101008083540402835291602001916111c3565b820191906000526020600020905b8154815290600101906020018083116111a657829003601f168201915b505050505081565b60006001600160a01b0382166112355760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161088e565b506001600160a01b031660009081526068602052604090205490565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c368661127d816119de565b61128785856122b6565b61129184846122d0565b50919392505050565b6001600160a01b03811660009081527f56eafcfe4e056e5ee1febf92b17728968883505f0e8dc799e4f43119d826ca85602052604081205460ff16806113025750600083815260c9602090815260408083206001600160a01b038616845290915290205460ff165b9392505050565b60606066805461077090613796565b610ee5338383612363565b7f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e661134d816119de565b6000848152606760205260409020546001600160a01b03166113b15760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e3a20546f6b656e20646f6573206e6f742065786973740000000000604482015260640161088e565b60ff8054166114025760405162461bcd60e51b815260206004820152601960248201527f546f6b656e3a204d657461646174612069732066726f7a656e00000000000000604482015260640161088e565b6000848152610100602052604090205460ff16151560010361145f5760405162461bcd60e51b81526020600482015260166024820152752a37b5b2b71d102a37b5b2b71034b990333937bd32b760511b604482015260640161088e565b818061146b5750825115155b6114b75760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e3a20546f6b656e20555249206973206d697373696e670000000000604482015260640161088e565b8251156114c8576114c884846122d0565b8115610bbf57600084815261010060205260409020805460ff19166001179055837fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b5565720761151382611560565b6040516115209190613096565b60405180910390a250505050565b6115383383611a1b565b6115545760405162461bcd60e51b815260040161088e906137d0565b610bbf848484846119e8565b606061156b8261190e565b6000828152609760205260408120805461158490613796565b80601f01602080910402602001604051908101604052809291908181526020018280546115b090613796565b80156115fd5780601f106115d2576101008083540402835291602001916115fd565b820191906000526020600020905b8154815290600101906020018083116115e057829003601f168201915b50505050509050600061160e612431565b90508051600003611620575092915050565b81511561165257808260405160200161163a929190613b47565b60405160208183030381529060405292505050919050565b61165b84612441565b949350505050565b600082815260c9602052604090206001015461167e816119de565b61092f838361220f565b606060006116d861169b610103546124a7565b610102546116b3906001600160a01b031660146125a7565b6040516020016116c4929190613b76565b604051602081830303815290604052612742565b90506000816040516020016116ed9190613bfd565b60408051601f198184030181529190529392505050565b600080516020613f0d83398151915261171c816119de565b60fc5461174190600080516020613f0d833981519152906001600160a01b031661220f565b5060fc80546001600160a01b0319169055565b60fb546001600160a01b03908116908216036117b25760405162461bcd60e51b815260206004820181905260248201527f4772616e756c6172526f6c65733a20616c726561647920746865206f776e6572604482015260640161088e565b60fb546001600160a01b0316331461180c5760405162461bcd60e51b815260206004820152601c60248201527f4772616e756c6172526f6c65733a206e6f7420746865206f776e657200000000604482015260640161088e565b60fb5461183190600080516020613f0d833981519152906001600160a01b031661220f565b60fb80546001600160a01b038381166001600160a01b031983168117909355169061186b90600080516020613f0d83398151915290612189565b816001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001600160a01b03163b151590565b60006001600160e01b031982166380ac58cd60e01b14806118ef57506001600160e01b03198216635b5e139f60e01b145b8061075b57506301ffc9a760e01b6001600160e01b031983161461075b565b6000818152606760205260409020546001600160a01b031661196d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161088e565b50565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119a5826110dc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61196d81336128ab565b6119f3848484611a99565b6119ff8484848461290f565b610bbf5760405162461bcd60e51b815260040161088e90613c42565b600080611a27836110dc565b9050806001600160a01b0316846001600160a01b03161480611a6e57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b8061165b5750836001600160a01b0316611a87846107f3565b6001600160a01b031614949350505050565b826001600160a01b0316611aac826110dc565b6001600160a01b031614611b105760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161088e565b6001600160a01b038216611b725760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161088e565b611b7d838383612a10565b611b88600082611970565b6001600160a01b0383166000908152606860205260408120805460019290611bb1908490613c94565b90915550506001600160a01b0382166000908152606860205260408120805460019290611bdf908490613cab565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600054610100900460ff16611c675760405162461bcd60e51b815260040161088e90613cc3565b610ee58282612aca565b60fb80546001600160a01b0384166001600160a01b0319918216811790925560fc805490911633179055611cb490600080516020613f0d83398151915290612189565b60fc54611cd990600080516020613f0d833981519152906001600160a01b0316612189565b60005b815181101561092f576000828281518110611cf957611cf9613b31565b6020026020010151600001519050611d1081612b0a565b611d1b8260206125a7565b604051602001611d2b9190613d0e565b60405160208183030381529060405290611d585760405162461bcd60e51b815260040161088e9190613096565b5060005b838381518110611d6e57611d6e613b31565b60200260200101516020015151811015611e4e57611dc282858581518110611d9857611d98613b31565b6020026020010151602001518381518110611db557611db5613b31565b6020026020010151612189565b600082815260fd602052604090208451859085908110611de457611de4613b31565b6020026020010151602001518281518110611e0157611e01613b31565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580611e4681613d53565b915050611d5c565b50828281518110611e6157611e61613b31565b60200260200101516040015115611e8c57600081815260fe60205260409020805460ff191660011790555b5080611e9781613d53565b915050611cdc565b80511561196d57611ebe600080516020613f0d8339815191523361129a565b611f0a5760405162461bcd60e51b815260206004820152601b60248201527f4772616e756c6172526f6c65733a206e6f7420616e2061646d696e0000000000604482015260640161088e565b60005b8151811015610ee5576000828281518110611f2a57611f2a613b31565b6020026020010151600001519050611f4181612b0a565b611f4c8260206125a7565b604051602001611f5c9190613d0e565b60405160208183030381529060405290611f895760405162461bcd60e51b815260040161088e9190613096565b50600081815260fe602090815260409091205460ff161590611fac9083906125a7565b604051602001611fbc9190613d6c565b60405160208183030381529060405290611fe95760405162461bcd60e51b815260040161088e9190613096565b5060005b600082815260fd602052604090205481101561205557600082815260fd6020526040902080546120439184918490811061202957612029613b31565b6000918252602090912001546001600160a01b031661220f565b8061204d81613d53565b915050611fed565b50600081815260fd6020526040812061206d91612f9e565b60005b83838151811061208257612082613b31565b60200260200101516020015151811015612138576120ac82858581518110611d9857611d98613b31565b600082815260fd6020526040902084518590859081106120ce576120ce613b31565b60200260200101516020015182815181106120eb576120eb613b31565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558061213081613d53565b915050612070565b5082828151811061214b5761214b613b31565b6020026020010151604001511561217657600081815260fe60205260409020805460ff191660011790555b508061218181613d53565b915050611f0d565b612193828261129a565b610ee557600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556121cb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612219828261129a565b15610ee557600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61227f81612bd9565b6000818152609760205260409020805461229890613796565b15905061196d57600081815260976020526040812061196d91612fbc565b610ee5828260405180602001604052806000815250612c80565b6000828152606760205260409020546001600160a01b031661234b5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b606482015260840161088e565b600082815260976020526040902061092f828261386c565b816001600160a01b0316836001600160a01b0316036123c45760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161088e565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6060610101805461077090613796565b606061244c8261190e565b6000612456612431565b905060008151116124765760405180602001604052806000815250611302565b80612480846124a7565b604051602001612491929190613b47565b6040516020818303038152906040529392505050565b6060816000036124ce5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156124f857806124e281613d53565b91506124f19050600a83613976565b91506124d2565b6000816001600160401b0381111561251257612512613144565b6040519080825280601f01601f19166020018201604052801561253c576020820181803683370190505b5090505b841561165b57612551600183613c94565b915061255e600a86613dbc565b612569906030613cab565b60f81b81838151811061257e5761257e613b31565b60200101906001600160f81b031916908160001a9053506125a0600a86613976565b9450612540565b606060006125b6836002613941565b6125c1906002613cab565b6001600160401b038111156125d8576125d8613144565b6040519080825280601f01601f191660200182016040528015612602576020820181803683370190505b509050600360fc1b8160008151811061261d5761261d613b31565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061264c5761264c613b31565b60200101906001600160f81b031916908160001a9053506000612670846002613941565b61267b906001613cab565b90505b60018111156126f3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106126af576126af613b31565b1a60f81b8282815181106126c5576126c5613b31565b60200101906001600160f81b031916908160001a90535060049490941c936126ec81613dd0565b905061267e565b5083156113025760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161088e565b80516060906000819003612766575050604080516020810190915260008152919050565b60006003612775836002613cab565b61277f9190613976565b61278a906004613941565b90506000612799826020613cab565b6001600160401b038111156127b0576127b0613144565b6040519080825280601f01601f1916602001820160405280156127da576020820181803683370190505b5090506000604051806060016040528060408152602001613ecd604091399050600181016020830160005b86811015612866576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101612805565b50600386066001811461288057600281146128915761289d565b613d3d60f01b60011983015261289d565b603d60f81b6000198301525b505050918152949350505050565b6128b5828261129a565b610ee5576128cd816001600160a01b031660146125a7565b6128d88360206125a7565b6040516020016128e9929190613de7565b60408051601f198184030181529082905262461bcd60e51b825261088e91600401613096565b60006001600160a01b0384163b15612a0557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612953903390899088908890600401613e5c565b6020604051808303816000875af192505050801561298e575060408051601f3d908101601f1916820190925261298b91810190613e99565b60015b6129eb573d8080156129bc576040519150601f19603f3d011682016040523d82523d6000602084013e6129c1565b606091505b5080516000036129e35760405162461bcd60e51b815260040161088e90613c42565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061165b565b506001949350505050565b6001600160a01b038316612a6d57612a68816101068054600083815261010760205260408120829055600182018355919091527fc9ef9fceea91e87b2c84ea400a44fde78842aae8aa24cd4b502ce5fb4d91e63b0155565b612a90565b816001600160a01b0316836001600160a01b031614612a9057612a908382612cb3565b6001600160a01b038216612aa75761092f81612d55565b826001600160a01b0316826001600160a01b03161461092f5761092f8282612e0a565b600054610100900460ff16612af15760405162461bcd60e51b815260040161088e90613cc3565b6065612afd838261386c565b50606661092f828261386c565b60007f154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c3686821480612b5957507f9b16859c0d694afa65b1b6551542db11ea12d6208b6a17dc922f10f2d74440f582145b80612b8357507f852fd44a27d33057a8c3d90859d4e4c9f54309d4d66d1d968e063befba9198e682145b80612bad57507fe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa2282145b8061075b5750507f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c1490565b6000612be4826110dc565b9050612bf281600084612a10565b612bfd600083611970565b6001600160a01b0381166000908152606860205260408120805460019290612c26908490613c94565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b612c8a8383612e50565b612c97600084848461290f565b61092f5760405162461bcd60e51b815260040161088e90613c42565b60006001612cc0846111cb565b612cca9190613c94565b60008381526101056020526040902054909150808214612d20576001600160a01b038416600090815261010460209081526040808320858452825280832054848452818420819055835261010590915290208190555b506000918252610105602090815260408084208490556001600160a01b03909416835261010481528383209183525290812055565b61010654600090612d6890600190613c94565b600083815261010760205260408120546101068054939450909284908110612d9257612d92613b31565b90600052602060002001549050806101068381548110612db457612db4613b31565b60009182526020808320909101929092558281526101079091526040808220849055858252812055610106805480612dee57612dee613eb6565b6001900381819060005260206000200160009055905550505050565b6000612e15836111cb565b6001600160a01b0390931660009081526101046020908152604080832086845282528083208590559382526101059052919091209190915550565b6001600160a01b038216612ea65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161088e565b6000818152606760205260409020546001600160a01b031615612f0b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161088e565b612f1760008383612a10565b6001600160a01b0382166000908152606860205260408120805460019290612f40908490613cab565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b508054600082559060005260206000209081019061196d9190612ff2565b508054612fc890613796565b6000825580601f10612fd8575050565b601f01602090049060005260206000209081019061196d91905b5b808211156130075760008155600101612ff3565b5090565b6001600160e01b03198116811461196d57600080fd5b60006020828403121561303357600080fd5b81356113028161300b565b60005b83811015613059578181015183820152602001613041565b83811115610bbf5750506000910152565b6000815180845261308281602086016020860161303e565b601f01601f19169290920160200192915050565b602081526000611302602083018461306a565b6000602082840312156130bb57600080fd5b5035919050565b80356001600160a01b03811681146130d957600080fd5b919050565b600080604083850312156130f157600080fd5b6130fa836130c2565b946020939093013593505050565b60008060006060848603121561311d57600080fd5b613126846130c2565b9250613134602085016130c2565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561317c5761317c613144565b60405290565b604051608081016001600160401b038111828210171561317c5761317c613144565b604051601f8201601f191681016001600160401b03811182821017156131cc576131cc613144565b604052919050565b60006001600160401b038311156131ed576131ed613144565b613200601f8401601f19166020016131a4565b905082815283838301111561321457600080fd5b828260208301376000602084830101529392505050565b600082601f83011261323c57600080fd5b611302838335602085016131d4565b803580151581146130d957600080fd5b600060a0828403121561326d57600080fd5b60405160a081016001600160401b03828210818311171561329057613290613144565b8160405282935084359150808211156132a857600080fd5b506132b58582860161322b565b8252506132c46020840161324b565b60208201526132d56040840161324b565b6040820152606083013560608201526132f0608084016130c2565b60808201525092915050565b60006001600160401b0382111561331557613315613144565b5060051b60200190565b600082601f83011261333057600080fd5b81356020613345613340836132fc565b6131a4565b82815260059290921b8401810191818101908684111561336457600080fd5b8286015b848110156134535780356001600160401b03808211156133885760008081fd5b908801906060828b03601f19018113156133a25760008081fd5b6133aa61315a565b878401358152604080850135848111156133c45760008081fd5b85019350603f84018d136133d85760008081fd5b888401356133e8613340826132fc565b81815260059190911b85018201908a8101908f8311156134085760008081fd5b958301955b8287101561342d5761341e876130c2565b8252958b0195908b019061340d565b848c01525061343f905085840161324b565b908201528652505050918301918301613368565b509695505050505050565b60008060006060848603121561347357600080fd5b83356001600160401b038082111561348a57600080fd5b908501906080828803121561349e57600080fd5b6134a6613182565b8235828111156134b557600080fd5b6134c18982860161322b565b8252506020830135828111156134d657600080fd5b6134e28982860161322b565b6020830152506134f4604084016130c2565b60408201526135056060840161324b565b60608201529450602086013591508082111561352057600080fd5b61352c8783880161325b565b9350604086013591508082111561354257600080fd5b5061354f8682870161331f565b9150509250925092565b6000806040838503121561356c57600080fd5b50508035926020909101359150565b60008060006060848603121561359057600080fd5b83356001600160401b03808211156135a757600080fd5b9085019060a082880312156135bb57600080fd5b909350602085013590808211156135d157600080fd5b506135de8682870161331f565b9250506135ed6040850161324b565b90509250925092565b6000806040838503121561360957600080fd5b82359150613619602084016130c2565b90509250929050565b60006020828403121561363457600080fd5b611302826130c2565b60008060006060848603121561365257600080fd5b61365b846130c2565b92506020840135915060408401356001600160401b0381111561367d57600080fd5b61354f8682870161322b565b6000806040838503121561369c57600080fd5b6136a5836130c2565b91506136196020840161324b565b6000806000606084860312156136c857600080fd5b8335925060208401356001600160401b038111156136e557600080fd5b6135de8682870161322b565b6000806000806080858703121561370757600080fd5b613710856130c2565b935061371e602086016130c2565b92506040850135915060608501356001600160401b0381111561374057600080fd5b8501601f8101871361375157600080fd5b613760878235602084016131d4565b91505092959194509250565b6000806040838503121561377f57600080fd5b613788836130c2565b9150613619602084016130c2565b600181811c908216806137aa57607f821691505b6020821081036137ca57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b601f82111561092f57600081815260208120601f850160051c810160208610156138455750805b601f850160051c820191505b8181101561386457828155600101613851565b505050505050565b81516001600160401b0381111561388557613885613144565b613899816138938454613796565b8461381e565b602080601f8311600181146138ce57600084156138b65750858301515b600019600386901b1c1916600185901b178555613864565b600085815260208120601f198616915b828110156138fd578886015182559484019460019091019084016138de565b508582101561391b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561395b5761395b61392b565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261398557613985613960565b500490565b600080835461399881613796565b600182811680156139b057600181146139c5576139f4565b60ff19841687528215158302870194506139f4565b8760005260208060002060005b858110156139eb5781548a8201529084019082016139d2565b50505082870194505b50929695505050505050565b6000808335601e19843603018112613a1757600080fd5b8301803591506001600160401b03821115613a3157600080fd5b602001915036819003821315610bfc57600080fd5b8183823760009101908152919050565b6001600160401b03831115613a6d57613a6d613144565b613a8183613a7b8354613796565b8361381e565b6000601f841160018114613ab55760008515613a9d5750838201355b600019600387901b1c1916600186901b178355613b0f565b600083815260209020601f19861690835b82811015613ae65786850135825560209485019460019092019101613ac6565b5086821015613b035760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600060208284031215613b2857600080fd5b6113028261324b565b634e487b7160e01b600052603260045260246000fd5b60008351613b5981846020880161303e565b835190830190613b6d81836020880161303e565b01949350505050565b7f7b2273656c6c65725f6665655f62617369735f706f696e7473223a2000000000815260008351613bae81601c85016020880161303e565b731610113332b2afb932b1b4b834b2b73a111d101160611b601c918401918201528351613be281603084016020880161303e565b61227d60f01b60309290910191820152603201949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251613c3581601d85016020870161303e565b91909101601d0192915050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600082821015613ca657613ca661392b565b500390565b60008219821115613cbe57613cbe61392b565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f4772616e756c6172526f6c65733a20696e76616c696420726f6c652000000000815260008251613d4681601c85016020870161303e565b91909101601c0192915050565b600060018201613d6557613d6561392b565b5060010190565b73023b930b73ab630b92937b632b99d103937b632960651b815260008251613d9b81601485016020870161303e565b691034b990333937bd32b760b11b6014939091019283015250601e01919050565b600082613dcb57613dcb613960565b500690565b600081613ddf57613ddf61392b565b506000190190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613e1f81601785016020880161303e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613e5081602884016020880161303e565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613e8f9083018461306a565b9695505050505050565b600060208284031215613eab57600080fd5b81516113028161300b565b634e487b7160e01b600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220a323cbdf52981352f9efb73f91f4f7686e52e8fdd39a8fd8eb6d7d4ddf2a61a964736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 419,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 422,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3468,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3738,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2015,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 2017,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 2021,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2025,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2029,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2035,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2877,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 3040,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3156,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7237,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_owner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 7239,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_nftPort",
        "offset": 0,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 7244,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_rolesAddressesIndexed",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 7248,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_rolesFrozen",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 8554,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "metadataUpdatable",
        "offset": 0,
        "slot": "255",
        "type": "t_bool"
      },
      {
        "astId": 8556,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "tokensBurnable",
        "offset": 1,
        "slot": "255",
        "type": "t_bool"
      },
      {
        "astId": 8558,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "tokensTransferable",
        "offset": 2,
        "slot": "255",
        "type": "t_bool"
      },
      {
        "astId": 8562,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "freezeTokenUris",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 8564,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "baseURI",
        "offset": 0,
        "slot": "257",
        "type": "t_string_storage"
      },
      {
        "astId": 8566,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "royaltiesAddress",
        "offset": 0,
        "slot": "258",
        "type": "t_address"
      },
      {
        "astId": 8568,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "royaltiesBasisPoints",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 9035,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9039,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "261",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9042,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_allTokens",
        "offset": 0,
        "slot": "262",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9046,
        "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "263",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/templates/ERC721NFTProduct.sol:ERC721NFTProduct",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}